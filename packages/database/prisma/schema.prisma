// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  clerkUserId String   @unique
  email       String   @unique
  role        Role     @default(voter)
  votes       Vote[]
  createdAt   DateTime @default(now())
}

model Election {
  id          String     @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  positions   Position[]
  createdAt   DateTime   @default(now())
  Vote        Vote[]
}

model Position {
  id         String      @id @default(uuid())
  name       String
  election   Election    @relation(fields: [electionId], references: [id])
  electionId String
  candidates Candidate[]
  votes      Vote[]
}

model Candidate {
  id         String   @id @default(uuid())
  name       String
  bio        String?
  position   Position @relation(fields: [positionId], references: [id])
  positionId String
  votes      Vote[]
}

model Vote {
  id          String    @id @default(uuid())
  election    Election  @relation(fields: [electionId], references: [id])
  electionId  String
  position    Position  @relation(fields: [positionId], references: [id])
  positionId  String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  txHash      String? // Blockchain transaction hash
  createdAt   DateTime  @default(now())
}

enum Role {
  admin
  election_officer
  voter
}
