{"id":"363ed7393044017d740f68831bf8bc4f","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function efficientKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/Voting.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract VotingGuardian is AccessControl {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n\n    struct Election {\n        string name;\n        uint256 startTime;\n        uint256 endTime;\n        bytes32 merkleRoot; // For voter eligibility verification\n        bool exists;\n    }\n\n    struct Candidate {\n        bytes32 idHash; // keccak256(candidateId)\n        uint256 positionId;\n        bool exists;\n    }\n\n    event ElectionCreated(\n        uint256 indexed electionId,\n        string name,\n        uint256 startTime,\n        uint256 endTime\n    );\n\n    event VoteCast(\n        uint256 indexed electionId,\n        bytes32 indexed voterCommitment, // keccak256(voterId + secret)\n        bytes32 indexed candidateHash\n    );\n\n    mapping(uint256 => Election) public elections;\n    mapping(bytes32 => Candidate) public candidates;\n    mapping(uint256 => mapping(bytes32 => bool)) public spentCommitments;\n\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(ADMIN_ROLE, msg.sender);\n    }\n\n    modifier validElection(uint256 electionId) {\n        Election storage election = elections[electionId];\n        require(election.exists, \"Invalid election\");\n        require(block.timestamp >= election.startTime, \"Not started\");\n        require(block.timestamp <= election.endTime, \"Ended\");\n        _;\n    }\n\n    function createElection(\n        uint256 electionId,\n        string calldata name,\n        uint256 startTime,\n        uint256 endTime,\n        bytes32 merkleRoot // Root of allowed voter IDs\n    ) external onlyRole(ADMIN_ROLE) {\n        require(!elections[electionId].exists, \"Election exists\");\n        elections[electionId] = Election(\n            name,\n            startTime,\n            endTime,\n            merkleRoot,\n            true\n        );\n        emit ElectionCreated(electionId, name, startTime, endTime);\n    }\n\n    function addCandidate(\n        bytes32 idHash,\n        uint256 positionId\n    ) external onlyRole(ADMIN_ROLE) {\n        require(!candidates[idHash].exists, \"Candidate exists\");\n        candidates[idHash] = Candidate(idHash, positionId, true);\n    }\n\n    function castVote(\n        uint256 electionId,\n        bytes32 voterCommitment, // keccak256(voterId + secretSalt)\n        bytes32 candidateHash,\n        bytes32[] calldata merkleProof // Proof of voter eligibility\n    ) external validElection(electionId) {\n        Election storage election = elections[electionId];\n        require(candidates[candidateHash].exists, \"Invalid candidate\");\n        require(\n            !spentCommitments[electionId][voterCommitment],\n            \"Already voted\"\n        );\n\n        // Verify voter is allowed\n        require(\n            MerkleProof.verify(\n                merkleProof,\n                election.merkleRoot,\n                keccak256(abi.encodePacked(voterCommitment))\n            ),\n            \"Not an eligible voter\"\n        );\n\n        spentCommitments[electionId][voterCommitment] = true;\n        emit VoteCast(electionId, voterCommitment, candidateHash);\n    }\n}\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[295],"Context":[408],"ERC165":[1545],"IAccessControl":[378]},"id":296,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:0"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":379,"src":"134:52:0","symbolAliases":[{"foreign":{"id":2,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"142:14:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":409,"src":"187:45:0","symbolAliases":[{"foreign":{"id":4,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"195:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":1546,"src":"233:57:0","symbolAliases":[{"foreign":{"id":6,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"241:6:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"Context","nameLocations":["1988:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":408,"src":"1988:7:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"1988:7:0"},{"baseName":{"id":11,"name":"IAccessControl","nameLocations":["1997:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"1997:14:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"1997:14:0"},{"baseName":{"id":13,"name":"ERC165","nameLocations":["2013:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":1545,"src":"2013:6:0"},"id":14,"nodeType":"InheritanceSpecifier","src":"2013:6:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:1660:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":295,"linearizedBaseContracts":[295,1545,1557,378,408],"name":"AccessControl","nameLocation":"1971:13:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":21,"members":[{"constant":false,"id":18,"mutability":"mutable","name":"hasRole","nameLocation":"2085:7:0","nodeType":"VariableDeclaration","scope":21,"src":"2052:40:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":17,"keyName":"account","keyNameLocation":"2068:7:0","keyType":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"2060:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2052:32:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":16,"name":"bool","nodeType":"ElementaryTypeName","src":"2079:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":20,"mutability":"mutable","name":"adminRole","nameLocation":"2110:9:0","nodeType":"VariableDeclaration","scope":21,"src":"2102:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2102:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2033:8:0","nodeType":"StructDefinition","scope":295,"src":"2026:100:0","visibility":"public"},{"constant":false,"id":26,"mutability":"mutable","name":"_roles","nameLocation":"2174:6:0","nodeType":"VariableDeclaration","scope":295,"src":"2132:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":25,"keyName":"role","keyNameLocation":"2148:4:0","keyType":{"id":22,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2140:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2132:33:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":24,"nodeType":"UserDefinedTypeName","pathNode":{"id":23,"name":"RoleData","nameLocations":["2156:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":21,"src":"2156:8:0"},"referencedDeclaration":21,"src":"2156:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":29,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2211:18:0","nodeType":"VariableDeclaration","scope":295,"src":"2187:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":27,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":28,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2232:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":39,"nodeType":"Block","src":"2454:44:0","statements":[{"expression":{"arguments":[{"id":35,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"2475:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":34,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[93,114],"referencedDeclaration":93,"src":"2464:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2464:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":37,"nodeType":"ExpressionStatement","src":"2464:16:0"},{"id":38,"nodeType":"PlaceholderStatement","src":"2490:1:0"}]},"documentation":{"id":30,"nodeType":"StructuredDocumentation","src":"2243:174:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with an {AccessControlUnauthorizedAccount} error including the required role."},"id":40,"name":"onlyRole","nameLocation":"2431:8:0","nodeType":"ModifierDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"role","nameLocation":"2448:4:0","nodeType":"VariableDeclaration","scope":40,"src":"2440:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":31,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2440:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2439:14:0"},"src":"2422:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[1544],"body":{"id":61,"nodeType":"Block","src":"2656:111:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"2673:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":51,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"2693:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$378_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$378_$","typeString":"type(contract IAccessControl)"}],"id":50,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2688:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":52,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2688:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$378","typeString":"type(contract IAccessControl)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2709:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"2688:32:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2673:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":57,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"2748:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":55,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2724:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$295_$","typeString":"type(contract super AccessControl)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2730:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1544,"src":"2724:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2724:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2673:87:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":48,"id":60,"nodeType":"Return","src":"2666:94:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"2504:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2574:17:0","nodeType":"FunctionDefinition","overrides":{"id":45,"nodeType":"OverrideSpecifier","overrides":[],"src":"2632:8:0"},"parameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"interfaceId","nameLocation":"2599:11:0","nodeType":"VariableDeclaration","scope":62,"src":"2592:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":42,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2592:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2591:20:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"2650:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":46,"name":"bool","nodeType":"ElementaryTypeName","src":"2650:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2649:6:0"},"scope":295,"src":"2565:202:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[345],"body":{"id":79,"nodeType":"Block","src":"2937:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":72,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"2954:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":74,"indexExpression":{"id":73,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"2961:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2954:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":75,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2967:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"2954:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":77,"indexExpression":{"id":76,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"2975:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2954:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":71,"id":78,"nodeType":"Return","src":"2947:36:0"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"2773:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":80,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2863:7:0","nodeType":"FunctionDefinition","parameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"role","nameLocation":"2879:4:0","nodeType":"VariableDeclaration","scope":80,"src":"2871:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":64,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2871:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"account","nameLocation":"2893:7:0","nodeType":"VariableDeclaration","scope":80,"src":"2885:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":66,"name":"address","nodeType":"ElementaryTypeName","src":"2885:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2870:31:0"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80,"src":"2931:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":69,"name":"bool","nodeType":"ElementaryTypeName","src":"2931:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2930:6:0"},"scope":295,"src":"2854:136:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":92,"nodeType":"Block","src":"3255:47:0","statements":[{"expression":{"arguments":[{"id":87,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"3276:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":88,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"3282:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3282:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[93,114],"referencedDeclaration":114,"src":"3265:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3265:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":91,"nodeType":"ExpressionStatement","src":"3265:30:0"}]},"documentation":{"id":81,"nodeType":"StructuredDocumentation","src":"2996:198:0","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier."},"id":93,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3208:10:0","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"role","nameLocation":"3227:4:0","nodeType":"VariableDeclaration","scope":93,"src":"3219:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":82,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3219:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3218:14:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"3255:0:0"},"scope":295,"src":"3199:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":113,"nodeType":"Block","src":"3505:124:0","statements":[{"condition":{"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3519:23:0","subExpression":{"arguments":[{"id":102,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"3528:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":103,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"3534:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":101,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3520:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3520:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":112,"nodeType":"IfStatement","src":"3515:108:0","trueBody":{"id":111,"nodeType":"Block","src":"3544:79:0","statements":[{"errorCall":{"arguments":[{"id":107,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"3598:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":108,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"3607:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":106,"name":"AccessControlUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"3565:32:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32) pure"}},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3565:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":110,"nodeType":"RevertStatement","src":"3558:54:0"}]}}]},"documentation":{"id":94,"nodeType":"StructuredDocumentation","src":"3308:119:0","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n is missing `role`."},"id":114,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3441:10:0","nodeType":"FunctionDefinition","parameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"role","nameLocation":"3460:4:0","nodeType":"VariableDeclaration","scope":114,"src":"3452:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":95,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3452:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"account","nameLocation":"3474:7:0","nodeType":"VariableDeclaration","scope":114,"src":"3466:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"3466:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3451:31:0"},"returnParameters":{"id":100,"nodeType":"ParameterList","parameters":[],"src":"3505:0:0"},"scope":295,"src":"3432:197:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[353],"body":{"id":127,"nodeType":"Block","src":"3884:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":122,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"3901:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":124,"indexExpression":{"id":123,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"3908:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3901:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":125,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3914:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":20,"src":"3901:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":121,"id":126,"nodeType":"Return","src":"3894:29:0"}]},"documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"3635:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":128,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"3819:12:0","nodeType":"FunctionDefinition","parameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"role","nameLocation":"3840:4:0","nodeType":"VariableDeclaration","scope":128,"src":"3832:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3832:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3831:14:0"},"returnParameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":128,"src":"3875:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":119,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3875:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3874:9:0"},"scope":295,"src":"3810:120:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[361],"body":{"id":146,"nodeType":"Block","src":"4320:42:0","statements":[{"expression":{"arguments":[{"id":142,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"4341:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":143,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"4347:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":141,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"4330:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4330:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":145,"nodeType":"ExpressionStatement","src":"4330:25:0"}]},"documentation":{"id":129,"nodeType":"StructuredDocumentation","src":"3936:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":147,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":137,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"4313:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":136,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"4300:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4300:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":139,"kind":"modifierInvocation","modifierName":{"id":135,"name":"onlyRole","nameLocations":["4291:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"4291:8:0"},"nodeType":"ModifierInvocation","src":"4291:28:0"}],"name":"grantRole","nameLocation":"4235:9:0","nodeType":"FunctionDefinition","parameters":{"id":134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":131,"mutability":"mutable","name":"role","nameLocation":"4253:4:0","nodeType":"VariableDeclaration","scope":147,"src":"4245:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4245:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":133,"mutability":"mutable","name":"account","nameLocation":"4267:7:0","nodeType":"VariableDeclaration","scope":147,"src":"4259:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"4259:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4244:31:0"},"returnParameters":{"id":140,"nodeType":"ParameterList","parameters":[],"src":"4320:0:0"},"scope":295,"src":"4226:136:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[369],"body":{"id":165,"nodeType":"Block","src":"4737:43:0","statements":[{"expression":{"arguments":[{"id":161,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"4759:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"4765:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":160,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"4747:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4747:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":164,"nodeType":"ExpressionStatement","src":"4747:26:0"}]},"documentation":{"id":148,"nodeType":"StructuredDocumentation","src":"4368:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":166,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"4730:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":155,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"4717:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4717:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":158,"kind":"modifierInvocation","modifierName":{"id":154,"name":"onlyRole","nameLocations":["4708:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"4708:8:0"},"nodeType":"ModifierInvocation","src":"4708:28:0"}],"name":"revokeRole","nameLocation":"4651:10:0","nodeType":"FunctionDefinition","parameters":{"id":153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"role","nameLocation":"4670:4:0","nodeType":"VariableDeclaration","scope":166,"src":"4662:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4662:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":152,"mutability":"mutable","name":"account","nameLocation":"4684:7:0","nodeType":"VariableDeclaration","scope":166,"src":"4676:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":151,"name":"address","nodeType":"ElementaryTypeName","src":"4676:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4661:31:0"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"4737:0:0"},"scope":295,"src":"4642:138:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[377],"body":{"id":188,"nodeType":"Block","src":"5407:166:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":174,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5421:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":175,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"5443:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5443:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5421:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":182,"nodeType":"IfStatement","src":"5417:102:0","trueBody":{"id":181,"nodeType":"Block","src":"5457:62:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":178,"name":"AccessControlBadConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"5478:28:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5478:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":180,"nodeType":"RevertStatement","src":"5471:37:0"}]}},{"expression":{"arguments":[{"id":184,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5541:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":185,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5547:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":183,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"5529:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5529:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":187,"nodeType":"ExpressionStatement","src":"5529:37:0"}]},"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"4786:537:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":189,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"5337:12:0","nodeType":"FunctionDefinition","parameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"role","nameLocation":"5358:4:0","nodeType":"VariableDeclaration","scope":189,"src":"5350:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5350:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":171,"mutability":"mutable","name":"callerConfirmation","nameLocation":"5372:18:0","nodeType":"VariableDeclaration","scope":189,"src":"5364:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"5364:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5349:42:0"},"returnParameters":{"id":173,"nodeType":"ParameterList","parameters":[],"src":"5407:0:0"},"scope":295,"src":"5328:245:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":216,"nodeType":"Block","src":"5771:174:0","statements":[{"assignments":[198],"declarations":[{"constant":false,"id":198,"mutability":"mutable","name":"previousAdminRole","nameLocation":"5789:17:0","nodeType":"VariableDeclaration","scope":216,"src":"5781:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":197,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5781:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":202,"initialValue":{"arguments":[{"id":200,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5822:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":199,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"5809:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5809:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5781:46:0"},{"expression":{"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":203,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"5837:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":205,"indexExpression":{"id":204,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5844:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5837:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5850:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":20,"src":"5837:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":207,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"5862:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5837:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":209,"nodeType":"ExpressionStatement","src":"5837:34:0"},{"eventCall":{"arguments":[{"id":211,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5903:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":212,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"5909:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":213,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"5928:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":210,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"5886:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5886:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":215,"nodeType":"EmitStatement","src":"5881:57:0"}]},"documentation":{"id":190,"nodeType":"StructuredDocumentation","src":"5579:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":217,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"5707:13:0","nodeType":"FunctionDefinition","parameters":{"id":195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"role","nameLocation":"5729:4:0","nodeType":"VariableDeclaration","scope":217,"src":"5721:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":191,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5721:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":194,"mutability":"mutable","name":"adminRole","nameLocation":"5743:9:0","nodeType":"VariableDeclaration","scope":217,"src":"5735:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5735:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5720:33:0"},"returnParameters":{"id":196,"nodeType":"ParameterList","parameters":[],"src":"5771:0:0"},"scope":295,"src":"5698:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":255,"nodeType":"Block","src":"6262:233:0","statements":[{"condition":{"id":231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6276:23:0","subExpression":{"arguments":[{"id":228,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6285:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":229,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6291:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":227,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"6277:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6277:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":253,"nodeType":"Block","src":"6452:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6473:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":226,"id":252,"nodeType":"Return","src":"6466:12:0"}]},"id":254,"nodeType":"IfStatement","src":"6272:217:0","trueBody":{"id":250,"nodeType":"Block","src":"6301:145:0","statements":[{"expression":{"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":232,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6315:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":234,"indexExpression":{"id":233,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6322:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6315:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6328:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"6315:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":237,"indexExpression":{"id":236,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6336:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6315:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6347:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6315:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":240,"nodeType":"ExpressionStatement","src":"6315:36:0"},{"eventCall":{"arguments":[{"id":242,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6382:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":243,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6388:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":244,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"6397:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6397:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":241,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"6370:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6370:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":247,"nodeType":"EmitStatement","src":"6365:45:0"},{"expression":{"hexValue":"74727565","id":248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6431:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":226,"id":249,"nodeType":"Return","src":"6424:11:0"}]}}]},"documentation":{"id":218,"nodeType":"StructuredDocumentation","src":"5951:223:0","text":" @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":256,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"6188:10:0","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"role","nameLocation":"6207:4:0","nodeType":"VariableDeclaration","scope":256,"src":"6199:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6199:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"account","nameLocation":"6221:7:0","nodeType":"VariableDeclaration","scope":256,"src":"6213:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"6213:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6198:31:0"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":256,"src":"6256:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":224,"name":"bool","nodeType":"ElementaryTypeName","src":"6256:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6255:6:0"},"scope":295,"src":"6179:316:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":293,"nodeType":"Block","src":"6816:233:0","statements":[{"condition":{"arguments":[{"id":267,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6838:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":268,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6844:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":266,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"6830:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6830:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":291,"nodeType":"Block","src":"7006:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7027:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":265,"id":290,"nodeType":"Return","src":"7020:12:0"}]},"id":292,"nodeType":"IfStatement","src":"6826:217:0","trueBody":{"id":288,"nodeType":"Block","src":"6854:146:0","statements":[{"expression":{"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":270,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6868:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":272,"indexExpression":{"id":271,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6875:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6868:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":273,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6881:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"6868:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":275,"indexExpression":{"id":274,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6889:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6868:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6900:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6868:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":278,"nodeType":"ExpressionStatement","src":"6868:37:0"},{"eventCall":{"arguments":[{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6936:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":281,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6942:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":282,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"6951:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6951:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":279,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"6924:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6924:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":285,"nodeType":"EmitStatement","src":"6919:45:0"},{"expression":{"hexValue":"74727565","id":286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6985:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":265,"id":287,"nodeType":"Return","src":"6978:11:0"}]}}]},"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"6501:226:0","text":" @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":294,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"6741:11:0","nodeType":"FunctionDefinition","parameters":{"id":262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":259,"mutability":"mutable","name":"role","nameLocation":"6761:4:0","nodeType":"VariableDeclaration","scope":294,"src":"6753:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6753:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":261,"mutability":"mutable","name":"account","nameLocation":"6775:7:0","nodeType":"VariableDeclaration","scope":294,"src":"6767:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":260,"name":"address","nodeType":"ElementaryTypeName","src":"6767:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6752:31:0"},"returnParameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":294,"src":"6810:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":263,"name":"bool","nodeType":"ElementaryTypeName","src":"6810:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6809:6:0"},"scope":295,"src":"6732:317:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":296,"src":"1953:5098:0","usedErrors":[305,308],"usedEvents":[317,326,335]}],"src":"108:6944:0"},"id":0},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[378]},"id":379,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":297,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":298,"nodeType":"StructuredDocumentation","src":"135:90:1","text":" @dev External interface of AccessControl declared to support ERC-165 detection."},"fullyImplemented":false,"id":378,"linearizedBaseContracts":[378],"name":"IAccessControl","nameLocation":"236:14:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"257:56:1","text":" @dev The `account` is missing a role."},"errorSelector":"e2517d3f","id":305,"name":"AccessControlUnauthorizedAccount","nameLocation":"324:32:1","nodeType":"ErrorDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"account","nameLocation":"365:7:1","nodeType":"VariableDeclaration","scope":305,"src":"357:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":300,"name":"address","nodeType":"ElementaryTypeName","src":"357:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"neededRole","nameLocation":"382:10:1","nodeType":"VariableDeclaration","scope":305,"src":"374:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":302,"name":"bytes32","nodeType":"ElementaryTypeName","src":"374:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"356:37:1"},"src":"318:76:1"},{"documentation":{"id":306,"nodeType":"StructuredDocumentation","src":"400:148:1","text":" @dev The caller of a function is not the expected one.\n NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."},"errorSelector":"6697b232","id":308,"name":"AccessControlBadConfirmation","nameLocation":"559:28:1","nodeType":"ErrorDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[],"src":"587:2:1"},"src":"553:37:1"},{"anonymous":false,"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"596:254:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted to signal this."},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":317,"name":"RoleAdminChanged","nameLocation":"861:16:1","nodeType":"EventDefinition","parameters":{"id":316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"894:4:1","nodeType":"VariableDeclaration","scope":317,"src":"878:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":313,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"916:17:1","nodeType":"VariableDeclaration","scope":317,"src":"900:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"900:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":315,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"951:12:1","nodeType":"VariableDeclaration","scope":317,"src":"935:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"935:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:87:1"},"src":"855:110:1"},{"anonymous":false,"documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"971:295:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":326,"name":"RoleGranted","nameLocation":"1277:11:1","nodeType":"EventDefinition","parameters":{"id":325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":320,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1305:4:1","nodeType":"VariableDeclaration","scope":326,"src":"1289:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1289:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":322,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1327:7:1","nodeType":"VariableDeclaration","scope":326,"src":"1311:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":321,"name":"address","nodeType":"ElementaryTypeName","src":"1311:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":324,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1352:6:1","nodeType":"VariableDeclaration","scope":326,"src":"1336:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":323,"name":"address","nodeType":"ElementaryTypeName","src":"1336:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1288:71:1"},"src":"1271:89:1"},{"anonymous":false,"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"1366:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":335,"name":"RoleRevoked","nameLocation":"1652:11:1","nodeType":"EventDefinition","parameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1680:4:1","nodeType":"VariableDeclaration","scope":335,"src":"1664:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1664:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":331,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1702:7:1","nodeType":"VariableDeclaration","scope":335,"src":"1686:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":330,"name":"address","nodeType":"ElementaryTypeName","src":"1686:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":333,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1727:6:1","nodeType":"VariableDeclaration","scope":335,"src":"1711:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":332,"name":"address","nodeType":"ElementaryTypeName","src":"1711:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1663:71:1"},"src":"1646:89:1"},{"documentation":{"id":336,"nodeType":"StructuredDocumentation","src":"1741:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":345,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1831:7:1","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"role","nameLocation":"1847:4:1","nodeType":"VariableDeclaration","scope":345,"src":"1839:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1839:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":340,"mutability":"mutable","name":"account","nameLocation":"1861:7:1","nodeType":"VariableDeclaration","scope":345,"src":"1853:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":339,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1838:31:1"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":345,"src":"1893:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":342,"name":"bool","nodeType":"ElementaryTypeName","src":"1893:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1892:6:1"},"scope":378,"src":"1822:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"1905:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":353,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"2103:12:1","nodeType":"FunctionDefinition","parameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"role","nameLocation":"2124:4:1","nodeType":"VariableDeclaration","scope":353,"src":"2116:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2116:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2115:14:1"},"returnParameters":{"id":352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":353,"src":"2153:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2153:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2152:9:1"},"scope":378,"src":"2094:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":354,"nodeType":"StructuredDocumentation","src":"2168:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":361,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2421:9:1","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":356,"mutability":"mutable","name":"role","nameLocation":"2439:4:1","nodeType":"VariableDeclaration","scope":361,"src":"2431:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2431:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":358,"mutability":"mutable","name":"account","nameLocation":"2453:7:1","nodeType":"VariableDeclaration","scope":361,"src":"2445:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"2445:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2430:31:1"},"returnParameters":{"id":360,"nodeType":"ParameterList","parameters":[],"src":"2470:0:1"},"scope":378,"src":"2412:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"2477:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":369,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2714:10:1","nodeType":"FunctionDefinition","parameters":{"id":367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"role","nameLocation":"2733:4:1","nodeType":"VariableDeclaration","scope":369,"src":"2725:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2725:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":366,"mutability":"mutable","name":"account","nameLocation":"2747:7:1","nodeType":"VariableDeclaration","scope":369,"src":"2739:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2724:31:1"},"returnParameters":{"id":368,"nodeType":"ParameterList","parameters":[],"src":"2764:0:1"},"scope":378,"src":"2705:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"2771:491:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`."},"functionSelector":"36568abe","id":377,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"3276:12:1","nodeType":"FunctionDefinition","parameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"role","nameLocation":"3297:4:1","nodeType":"VariableDeclaration","scope":377,"src":"3289:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3289:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"callerConfirmation","nameLocation":"3311:18:1","nodeType":"VariableDeclaration","scope":377,"src":"3303:26:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"3303:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3288:42:1"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[],"src":"3339:0:1"},"scope":378,"src":"3267:73:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":379,"src":"226:3116:1","usedErrors":[305,308],"usedEvents":[317,326,335]}],"src":"109:3234:1"},"id":1},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[408]},"id":409,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":380,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:2"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"127:496:2","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":408,"linearizedBaseContracts":[408],"name":"Context","nameLocation":"642:7:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":389,"nodeType":"Block","src":"718:34:2","statements":[{"expression":{"expression":{"id":386,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:2","memberName":"sender","nodeType":"MemberAccess","src":"735:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":385,"id":388,"nodeType":"Return","src":"728:17:2"}]},"id":390,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:2","nodeType":"FunctionDefinition","parameters":{"id":382,"nodeType":"ParameterList","parameters":[],"src":"675:2:2"},"returnParameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":390,"src":"709:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":383,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:2"},"scope":408,"src":"656:96:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":398,"nodeType":"Block","src":"825:32:2","statements":[{"expression":{"expression":{"id":395,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:2","memberName":"data","nodeType":"MemberAccess","src":"842:8:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":394,"id":397,"nodeType":"Return","src":"835:15:2"}]},"id":399,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:2","nodeType":"FunctionDefinition","parameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"775:2:2"},"returnParameters":{"id":394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":399,"src":"809:14:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":392,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:2"},"scope":408,"src":"758:99:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":406,"nodeType":"Block","src":"935:25:2","statements":[{"expression":{"hexValue":"30","id":404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":403,"id":405,"nodeType":"Return","src":"945:8:2"}]},"id":407,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:2","nodeType":"FunctionDefinition","parameters":{"id":400,"nodeType":"ParameterList","parameters":[],"src":"892:2:2"},"returnParameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":407,"src":"926:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":401,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:2"},"scope":408,"src":"863:97:2","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":409,"src":"624:338:2","usedErrors":[],"usedEvents":[]}],"src":"101:862:2"},"id":2},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","exportedSymbols":{"Hashes":[448]},"id":449,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":410,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:3"},{"abstract":false,"baseContracts":[],"canonicalName":"Hashes","contractDependencies":[],"contractKind":"library","documentation":{"id":411,"nodeType":"StructuredDocumentation","src":"139:81:3","text":" @dev Library of standard hash functions.\n _Available since v5.1._"},"fullyImplemented":true,"id":448,"linearizedBaseContracts":[448],"name":"Hashes","nameLocation":"229:6:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":434,"nodeType":"Block","src":"588:83:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":421,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"605:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":422,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"609:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"605:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":429,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"659:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":430,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"662:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":428,"name":"efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"640:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"640:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"605:59:3","trueExpression":{"arguments":[{"id":425,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"632:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":426,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"635:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":424,"name":"efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"613:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"613:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":420,"id":433,"nodeType":"Return","src":"598:66:3"}]},"documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"242:257:3","text":" @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."},"id":435,"implemented":true,"kind":"function","modifiers":[],"name":"commutativeKeccak256","nameLocation":"513:20:3","nodeType":"FunctionDefinition","parameters":{"id":417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"mutability":"mutable","name":"a","nameLocation":"542:1:3","nodeType":"VariableDeclaration","scope":435,"src":"534:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":413,"name":"bytes32","nodeType":"ElementaryTypeName","src":"534:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"b","nameLocation":"553:1:3","nodeType":"VariableDeclaration","scope":435,"src":"545:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":415,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"533:22:3"},"returnParameters":{"id":420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":419,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":435,"src":"579:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":418,"name":"bytes32","nodeType":"ElementaryTypeName","src":"579:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"578:9:3"},"scope":448,"src":"504:167:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":446,"nodeType":"Block","src":"879:151:3","statements":[{"AST":{"nodeType":"YulBlock","src":"914:110:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"935:4:3","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"941:1:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"928:6:3"},"nodeType":"YulFunctionCall","src":"928:15:3"},"nodeType":"YulExpressionStatement","src":"928:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"963:4:3","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"969:1:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"956:6:3"},"nodeType":"YulFunctionCall","src":"956:15:3"},"nodeType":"YulExpressionStatement","src":"956:15:3"},{"nodeType":"YulAssignment","src":"984:30:3","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1003:4:3","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"1009:4:3","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"993:9:3"},"nodeType":"YulFunctionCall","src":"993:21:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"984:5:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":438,"isOffset":false,"isSlot":false,"src":"941:1:3","valueSize":1},{"declaration":440,"isOffset":false,"isSlot":false,"src":"969:1:3","valueSize":1},{"declaration":443,"isOffset":false,"isSlot":false,"src":"984:5:3","valueSize":1}],"flags":["memory-safe"],"id":445,"nodeType":"InlineAssembly","src":"889:135:3"}]},"documentation":{"id":436,"nodeType":"StructuredDocumentation","src":"677:109:3","text":" @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."},"id":447,"implemented":true,"kind":"function","modifiers":[],"name":"efficientKeccak256","nameLocation":"800:18:3","nodeType":"FunctionDefinition","parameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"mutability":"mutable","name":"a","nameLocation":"827:1:3","nodeType":"VariableDeclaration","scope":447,"src":"819:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":437,"name":"bytes32","nodeType":"ElementaryTypeName","src":"819:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":440,"mutability":"mutable","name":"b","nameLocation":"838:1:3","nodeType":"VariableDeclaration","scope":447,"src":"830:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":439,"name":"bytes32","nodeType":"ElementaryTypeName","src":"830:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"818:22:3"},"returnParameters":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":443,"mutability":"mutable","name":"value","nameLocation":"872:5:3","nodeType":"VariableDeclaration","scope":447,"src":"864:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"864:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"863:15:3"},"scope":448,"src":"791:239:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":449,"src":"221:811:3","usedErrors":[],"usedEvents":[]}],"src":"113:920:3"},"id":3},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"Hashes":[448],"MerkleProof":[1521]},"id":1522,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":450,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"206:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","file":"./Hashes.sol","id":452,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1522,"sourceUnit":449,"src":"232:36:4","symbolAliases":[{"foreign":{"id":451,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"240:6:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":453,"nodeType":"StructuredDocumentation","src":"270:1082:4","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."},"fullyImplemented":true,"id":1521,"linearizedBaseContracts":[1521],"name":"MerkleProof","nameLocation":"1361:11:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":454,"nodeType":"StructuredDocumentation","src":"1379:60:4","text":"@dev The multiproof provided is not valid."},"errorSelector":"35140492","id":456,"name":"MerkleProofInvalidMultiproof","nameLocation":"1450:28:4","nodeType":"ErrorDefinition","parameters":{"id":455,"nodeType":"ParameterList","parameters":[],"src":"1478:2:4"},"src":"1444:37:4"},{"body":{"id":476,"nodeType":"Block","src":"1999:57:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":470,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"2029:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":471,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"2036:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":469,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[518,600],"referencedDeclaration":518,"src":"2016:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":473,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"2045:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2016:33:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":468,"id":475,"nodeType":"Return","src":"2009:40:4"}]},"documentation":{"id":457,"nodeType":"StructuredDocumentation","src":"1487:410:4","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":477,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1911:6:4","nodeType":"FunctionDefinition","parameters":{"id":465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":460,"mutability":"mutable","name":"proof","nameLocation":"1935:5:4","nodeType":"VariableDeclaration","scope":477,"src":"1918:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":458,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1918:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":459,"nodeType":"ArrayTypeName","src":"1918:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":462,"mutability":"mutable","name":"root","nameLocation":"1950:4:4","nodeType":"VariableDeclaration","scope":477,"src":"1942:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":461,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1942:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"leaf","nameLocation":"1964:4:4","nodeType":"VariableDeclaration","scope":477,"src":"1956:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1917:52:4"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":477,"src":"1993:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":466,"name":"bool","nodeType":"ElementaryTypeName","src":"1993:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1992:6:4"},"scope":1521,"src":"1902:154:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":517,"nodeType":"Block","src":"2549:216:4","statements":[{"assignments":[489],"declarations":[{"constant":false,"id":489,"mutability":"mutable","name":"computedHash","nameLocation":"2567:12:4","nodeType":"VariableDeclaration","scope":517,"src":"2559:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2559:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":491,"initialValue":{"id":490,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"2582:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2559:27:4"},{"body":{"id":513,"nodeType":"Block","src":"2639:91:4","statements":[{"expression":{"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":503,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"2653:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":506,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"2696:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":507,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"2710:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":509,"indexExpression":{"id":508,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"2716:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2710:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":504,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"2668:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$448_$","typeString":"type(library Hashes)"}},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2675:20:4","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":435,"src":"2668:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2653:66:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":512,"nodeType":"ExpressionStatement","src":"2653:66:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":496,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"2616:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":497,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"2620:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2626:6:4","memberName":"length","nodeType":"MemberAccess","src":"2620:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2616:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":514,"initializationExpression":{"assignments":[493],"declarations":[{"constant":false,"id":493,"mutability":"mutable","name":"i","nameLocation":"2609:1:4","nodeType":"VariableDeclaration","scope":514,"src":"2601:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":492,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":495,"initialValue":{"hexValue":"30","id":494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2613:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2601:13:4"},"loopExpression":{"expression":{"id":501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2634:3:4","subExpression":{"id":500,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"2634:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":502,"nodeType":"ExpressionStatement","src":"2634:3:4"},"nodeType":"ForStatement","src":"2596:134:4"},{"expression":{"id":515,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"2746:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":487,"id":516,"nodeType":"Return","src":"2739:19:4"}]},"documentation":{"id":478,"nodeType":"StructuredDocumentation","src":"2062:390:4","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":518,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2466:12:4","nodeType":"FunctionDefinition","parameters":{"id":484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":481,"mutability":"mutable","name":"proof","nameLocation":"2496:5:4","nodeType":"VariableDeclaration","scope":518,"src":"2479:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":479,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2479:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":480,"nodeType":"ArrayTypeName","src":"2479:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":483,"mutability":"mutable","name":"leaf","nameLocation":"2511:4:4","nodeType":"VariableDeclaration","scope":518,"src":"2503:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":482,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2478:38:4"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":518,"src":"2540:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":485,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2540:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2539:9:4"},"scope":1521,"src":"2457:308:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":549,"nodeType":"Block","src":"3376:65:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":542,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"3406:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":543,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"3413:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":544,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"3419:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":541,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[518,600],"referencedDeclaration":600,"src":"3393:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3393:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":546,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"3430:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3393:41:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":540,"id":548,"nodeType":"Return","src":"3386:48:4"}]},"documentation":{"id":519,"nodeType":"StructuredDocumentation","src":"2771:407:4","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":550,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"3192:6:4","nodeType":"FunctionDefinition","parameters":{"id":537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"proof","nameLocation":"3225:5:4","nodeType":"VariableDeclaration","scope":550,"src":"3208:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":520,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3208:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":521,"nodeType":"ArrayTypeName","src":"3208:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"root","nameLocation":"3248:4:4","nodeType":"VariableDeclaration","scope":550,"src":"3240:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3240:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":526,"mutability":"mutable","name":"leaf","nameLocation":"3270:4:4","nodeType":"VariableDeclaration","scope":550,"src":"3262:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3262:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":536,"mutability":"mutable","name":"hasher","nameLocation":"3334:6:4","nodeType":"VariableDeclaration","scope":550,"src":"3284:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":535,"nodeType":"FunctionTypeName","parameterTypes":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":535,"src":"3293:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":527,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3293:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":535,"src":"3302:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":529,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3302:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3292:18:4"},"returnParameterTypes":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":535,"src":"3325:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":532,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3325:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3324:9:4"},"src":"3284:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3198:148:4"},"returnParameters":{"id":540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":550,"src":"3370:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":538,"name":"bool","nodeType":"ElementaryTypeName","src":"3370:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3369:6:4"},"scope":1521,"src":"3183:258:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":599,"nodeType":"Block","src":"4019:195:4","statements":[{"assignments":[572],"declarations":[{"constant":false,"id":572,"mutability":"mutable","name":"computedHash","nameLocation":"4037:12:4","nodeType":"VariableDeclaration","scope":599,"src":"4029:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4029:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":574,"initialValue":{"id":573,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"4052:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4029:27:4"},{"body":{"id":595,"nodeType":"Block","src":"4109:70:4","statements":[{"expression":{"id":593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":586,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"4123:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":588,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"4145:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":589,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"4159:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":591,"indexExpression":{"id":590,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"4165:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4159:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":587,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"4138:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4138:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4123:45:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":594,"nodeType":"ExpressionStatement","src":"4123:45:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":579,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"4086:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":580,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"4090:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:6:4","memberName":"length","nodeType":"MemberAccess","src":"4090:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4086:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":596,"initializationExpression":{"assignments":[576],"declarations":[{"constant":false,"id":576,"mutability":"mutable","name":"i","nameLocation":"4079:1:4","nodeType":"VariableDeclaration","scope":596,"src":"4071:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":575,"name":"uint256","nodeType":"ElementaryTypeName","src":"4071:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":578,"initialValue":{"hexValue":"30","id":577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4083:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4071:13:4"},"loopExpression":{"expression":{"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4104:3:4","subExpression":{"id":583,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"4104:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":585,"nodeType":"ExpressionStatement","src":"4104:3:4"},"nodeType":"ForStatement","src":"4066:113:4"},{"expression":{"id":597,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"4195:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":570,"id":598,"nodeType":"Return","src":"4188:19:4"}]},"documentation":{"id":551,"nodeType":"StructuredDocumentation","src":"3447:387:4","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":600,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"3848:12:4","nodeType":"FunctionDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"proof","nameLocation":"3887:5:4","nodeType":"VariableDeclaration","scope":600,"src":"3870:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3870:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":553,"nodeType":"ArrayTypeName","src":"3870:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"leaf","nameLocation":"3910:4:4","nodeType":"VariableDeclaration","scope":600,"src":"3902:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":555,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3902:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"hasher","nameLocation":"3974:6:4","nodeType":"VariableDeclaration","scope":600,"src":"3924:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":565,"nodeType":"FunctionTypeName","parameterTypes":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":565,"src":"3933:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":557,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3933:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":565,"src":"3942:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":559,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3942:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3932:18:4"},"returnParameterTypes":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":563,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":565,"src":"3965:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":562,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3965:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3964:9:4"},"src":"3924:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3860:126:4"},"returnParameters":{"id":570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":600,"src":"4010:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4010:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4009:9:4"},"scope":1521,"src":"3839:375:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":620,"nodeType":"Block","src":"4744:65:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":614,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4782:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":615,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"4789:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":613,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[662,744],"referencedDeclaration":662,"src":"4761:20:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4761:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":617,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"4798:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4761:41:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":612,"id":619,"nodeType":"Return","src":"4754:48:4"}]},"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"4220:412:4","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":621,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"4646:14:4","nodeType":"FunctionDefinition","parameters":{"id":609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"proof","nameLocation":"4680:5:4","nodeType":"VariableDeclaration","scope":621,"src":"4661:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":602,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4661:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":603,"nodeType":"ArrayTypeName","src":"4661:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"root","nameLocation":"4695:4:4","nodeType":"VariableDeclaration","scope":621,"src":"4687:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":605,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4687:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":608,"mutability":"mutable","name":"leaf","nameLocation":"4709:4:4","nodeType":"VariableDeclaration","scope":621,"src":"4701:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":607,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4701:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4660:54:4"},"returnParameters":{"id":612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":621,"src":"4738:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":610,"name":"bool","nodeType":"ElementaryTypeName","src":"4738:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4737:6:4"},"scope":1521,"src":"4637:172:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":661,"nodeType":"Block","src":"5314:216:4","statements":[{"assignments":[633],"declarations":[{"constant":false,"id":633,"mutability":"mutable","name":"computedHash","nameLocation":"5332:12:4","nodeType":"VariableDeclaration","scope":661,"src":"5324:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":632,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5324:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":635,"initialValue":{"id":634,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":627,"src":"5347:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5324:27:4"},{"body":{"id":657,"nodeType":"Block","src":"5404:91:4","statements":[{"expression":{"id":655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":647,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"5418:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":650,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"5461:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":651,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"5475:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":653,"indexExpression":{"id":652,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"5481:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5475:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":648,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"5433:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$448_$","typeString":"type(library Hashes)"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5440:20:4","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":435,"src":"5433:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5433:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5418:66:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":656,"nodeType":"ExpressionStatement","src":"5418:66:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":640,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"5381:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":641,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"5385:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5391:6:4","memberName":"length","nodeType":"MemberAccess","src":"5385:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5381:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":658,"initializationExpression":{"assignments":[637],"declarations":[{"constant":false,"id":637,"mutability":"mutable","name":"i","nameLocation":"5374:1:4","nodeType":"VariableDeclaration","scope":658,"src":"5366:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":636,"name":"uint256","nodeType":"ElementaryTypeName","src":"5366:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":639,"initialValue":{"hexValue":"30","id":638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5378:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5366:13:4"},"loopExpression":{"expression":{"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5399:3:4","subExpression":{"id":644,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"5399:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":646,"nodeType":"ExpressionStatement","src":"5399:3:4"},"nodeType":"ForStatement","src":"5361:134:4"},{"expression":{"id":659,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"5511:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":631,"id":660,"nodeType":"Return","src":"5504:19:4"}]},"documentation":{"id":622,"nodeType":"StructuredDocumentation","src":"4815:392:4","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":662,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"5221:20:4","nodeType":"FunctionDefinition","parameters":{"id":628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":625,"mutability":"mutable","name":"proof","nameLocation":"5261:5:4","nodeType":"VariableDeclaration","scope":662,"src":"5242:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":623,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5242:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":624,"nodeType":"ArrayTypeName","src":"5242:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":627,"mutability":"mutable","name":"leaf","nameLocation":"5276:4:4","nodeType":"VariableDeclaration","scope":662,"src":"5268:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5268:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5241:40:4"},"returnParameters":{"id":631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":630,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":662,"src":"5305:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":629,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5305:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5304:9:4"},"scope":1521,"src":"5212:318:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":693,"nodeType":"Block","src":"6153:73:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":686,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"6191:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":687,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"6198:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":688,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"6204:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":685,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[662,744],"referencedDeclaration":744,"src":"6170:20:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6170:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":690,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"6215:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6170:49:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":684,"id":692,"nodeType":"Return","src":"6163:56:4"}]},"documentation":{"id":663,"nodeType":"StructuredDocumentation","src":"5536:409:4","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":694,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"5959:14:4","nodeType":"FunctionDefinition","parameters":{"id":681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":666,"mutability":"mutable","name":"proof","nameLocation":"6002:5:4","nodeType":"VariableDeclaration","scope":694,"src":"5983:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5983:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":665,"nodeType":"ArrayTypeName","src":"5983:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":668,"mutability":"mutable","name":"root","nameLocation":"6025:4:4","nodeType":"VariableDeclaration","scope":694,"src":"6017:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":667,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6017:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":670,"mutability":"mutable","name":"leaf","nameLocation":"6047:4:4","nodeType":"VariableDeclaration","scope":694,"src":"6039:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":669,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6039:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":680,"mutability":"mutable","name":"hasher","nameLocation":"6111:6:4","nodeType":"VariableDeclaration","scope":694,"src":"6061:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":679,"nodeType":"FunctionTypeName","parameterTypes":{"id":675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":679,"src":"6070:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":671,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6070:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":674,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":679,"src":"6079:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":673,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6079:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6069:18:4"},"returnParameterTypes":{"id":678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":677,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":679,"src":"6102:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":676,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6102:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6101:9:4"},"src":"6061:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"5973:150:4"},"returnParameters":{"id":684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":683,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":694,"src":"6147:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":682,"name":"bool","nodeType":"ElementaryTypeName","src":"6147:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6146:6:4"},"scope":1521,"src":"5950:276:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":743,"nodeType":"Block","src":"6816:195:4","statements":[{"assignments":[716],"declarations":[{"constant":false,"id":716,"mutability":"mutable","name":"computedHash","nameLocation":"6834:12:4","nodeType":"VariableDeclaration","scope":743,"src":"6826:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":715,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6826:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":718,"initialValue":{"id":717,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"6849:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6826:27:4"},{"body":{"id":739,"nodeType":"Block","src":"6906:70:4","statements":[{"expression":{"id":737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":730,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"6920:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":732,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"6942:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":733,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"6956:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":735,"indexExpression":{"id":734,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"6962:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6956:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":731,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"6935:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6935:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6920:45:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":738,"nodeType":"ExpressionStatement","src":"6920:45:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":723,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"6883:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":724,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"6887:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6893:6:4","memberName":"length","nodeType":"MemberAccess","src":"6887:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6883:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":740,"initializationExpression":{"assignments":[720],"declarations":[{"constant":false,"id":720,"mutability":"mutable","name":"i","nameLocation":"6876:1:4","nodeType":"VariableDeclaration","scope":740,"src":"6868:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":719,"name":"uint256","nodeType":"ElementaryTypeName","src":"6868:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":722,"initialValue":{"hexValue":"30","id":721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6880:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6868:13:4"},"loopExpression":{"expression":{"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6901:3:4","subExpression":{"id":727,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"6901:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":729,"nodeType":"ExpressionStatement","src":"6901:3:4"},"nodeType":"ForStatement","src":"6863:113:4"},{"expression":{"id":741,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"6992:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":714,"id":742,"nodeType":"Return","src":"6985:19:4"}]},"documentation":{"id":695,"nodeType":"StructuredDocumentation","src":"6232:389:4","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":744,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"6635:20:4","nodeType":"FunctionDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"proof","nameLocation":"6684:5:4","nodeType":"VariableDeclaration","scope":744,"src":"6665:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":696,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6665:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":697,"nodeType":"ArrayTypeName","src":"6665:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":700,"mutability":"mutable","name":"leaf","nameLocation":"6707:4:4","nodeType":"VariableDeclaration","scope":744,"src":"6699:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":699,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6699:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":710,"mutability":"mutable","name":"hasher","nameLocation":"6771:6:4","nodeType":"VariableDeclaration","scope":744,"src":"6721:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":709,"nodeType":"FunctionTypeName","parameterTypes":{"id":705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":709,"src":"6730:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":701,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6730:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":709,"src":"6739:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":703,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6739:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6729:18:4"},"returnParameterTypes":{"id":708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":709,"src":"6762:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":706,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6762:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6761:9:4"},"src":"6721:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"6655:128:4"},"returnParameters":{"id":714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":744,"src":"6807:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":712,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6807:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6806:9:4"},"scope":1521,"src":"6626:385:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":769,"nodeType":"Block","src":"7797:76:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":762,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"7832:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":763,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":751,"src":"7839:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":764,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"7851:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":761,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[928,1132],"referencedDeclaration":928,"src":"7814:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7814:44:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":766,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"7862:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7814:52:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":760,"id":768,"nodeType":"Return","src":"7807:59:4"}]},"documentation":{"id":745,"nodeType":"StructuredDocumentation","src":"7017:593:4","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":770,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"7624:16:4","nodeType":"FunctionDefinition","parameters":{"id":757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":748,"mutability":"mutable","name":"proof","nameLocation":"7667:5:4","nodeType":"VariableDeclaration","scope":770,"src":"7650:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":746,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7650:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":747,"nodeType":"ArrayTypeName","src":"7650:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":751,"mutability":"mutable","name":"proofFlags","nameLocation":"7696:10:4","nodeType":"VariableDeclaration","scope":770,"src":"7682:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":749,"name":"bool","nodeType":"ElementaryTypeName","src":"7682:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":750,"nodeType":"ArrayTypeName","src":"7682:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":753,"mutability":"mutable","name":"root","nameLocation":"7724:4:4","nodeType":"VariableDeclaration","scope":770,"src":"7716:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":752,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7716:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":756,"mutability":"mutable","name":"leaves","nameLocation":"7755:6:4","nodeType":"VariableDeclaration","scope":770,"src":"7738:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":754,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7738:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":755,"nodeType":"ArrayTypeName","src":"7738:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7640:127:4"},"returnParameters":{"id":760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":759,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":770,"src":"7791:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":758,"name":"bool","nodeType":"ElementaryTypeName","src":"7791:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7790:6:4"},"scope":1521,"src":"7615:258:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":927,"nodeType":"Block","src":"9159:2104:4","statements":[{"assignments":[786],"declarations":[{"constant":false,"id":786,"mutability":"mutable","name":"leavesLen","nameLocation":"9551:9:4","nodeType":"VariableDeclaration","scope":927,"src":"9543:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"9543:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":789,"initialValue":{"expression":{"id":787,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"9563:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9570:6:4","memberName":"length","nodeType":"MemberAccess","src":"9563:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9543:33:4"},{"assignments":[791],"declarations":[{"constant":false,"id":791,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"9594:13:4","nodeType":"VariableDeclaration","scope":927,"src":"9586:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":790,"name":"uint256","nodeType":"ElementaryTypeName","src":"9586:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":794,"initialValue":{"expression":{"id":792,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"9610:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9621:6:4","memberName":"length","nodeType":"MemberAccess","src":"9610:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9586:41:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":795,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"9675:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":796,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"9687:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9693:6:4","memberName":"length","nodeType":"MemberAccess","src":"9687:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":799,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"9703:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9703:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:45:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":807,"nodeType":"IfStatement","src":"9671:113:4","trueBody":{"id":806,"nodeType":"Block","src":"9722:62:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":803,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"9743:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9743:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":805,"nodeType":"RevertStatement","src":"9736:37:4"}]}},{"assignments":[812],"declarations":[{"constant":false,"id":812,"mutability":"mutable","name":"hashes","nameLocation":"10045:6:4","nodeType":"VariableDeclaration","scope":927,"src":"10028:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":810,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10028:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":811,"nodeType":"ArrayTypeName","src":"10028:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":818,"initialValue":{"arguments":[{"id":816,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"10068:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"10054:13:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":813,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10058:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":814,"nodeType":"ArrayTypeName","src":"10058:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10054:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10028:54:4"},{"assignments":[820],"declarations":[{"constant":false,"id":820,"mutability":"mutable","name":"leafPos","nameLocation":"10100:7:4","nodeType":"VariableDeclaration","scope":927,"src":"10092:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":819,"name":"uint256","nodeType":"ElementaryTypeName","src":"10092:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":822,"initialValue":{"hexValue":"30","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10110:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10092:19:4"},{"assignments":[824],"declarations":[{"constant":false,"id":824,"mutability":"mutable","name":"hashPos","nameLocation":"10129:7:4","nodeType":"VariableDeclaration","scope":927,"src":"10121:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":823,"name":"uint256","nodeType":"ElementaryTypeName","src":"10121:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":826,"initialValue":{"hexValue":"30","id":825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10139:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10121:19:4"},{"assignments":[828],"declarations":[{"constant":false,"id":828,"mutability":"mutable","name":"proofPos","nameLocation":"10158:8:4","nodeType":"VariableDeclaration","scope":927,"src":"10150:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":827,"name":"uint256","nodeType":"ElementaryTypeName","src":"10150:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":830,"initialValue":{"hexValue":"30","id":829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10169:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10150:20:4"},{"body":{"id":890,"nodeType":"Block","src":"10590:310:4","statements":[{"assignments":[842],"declarations":[{"constant":false,"id":842,"mutability":"mutable","name":"a","nameLocation":"10612:1:4","nodeType":"VariableDeclaration","scope":890,"src":"10604:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":841,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10604:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":855,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":843,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"10616:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":844,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"10626:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10616:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":850,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"10658:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":853,"indexExpression":{"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10665:9:4","subExpression":{"id":851,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"10665:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10658:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10616:59:4","trueExpression":{"baseExpression":{"id":846,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"10638:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":849,"indexExpression":{"id":848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10645:9:4","subExpression":{"id":847,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"10645:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10638:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10604:71:4"},{"assignments":[857],"declarations":[{"constant":false,"id":857,"mutability":"mutable","name":"b","nameLocation":"10697:1:4","nodeType":"VariableDeclaration","scope":890,"src":"10689:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":856,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10689:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":879,"initialValue":{"condition":{"baseExpression":{"id":858,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"10701:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":860,"indexExpression":{"id":859,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"10712:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10701:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":874,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"10813:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":877,"indexExpression":{"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10819:10:4","subExpression":{"id":875,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"10819:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10813:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10701:129:4","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":861,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"10734:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":862,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"10744:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10734:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":868,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"10776:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":871,"indexExpression":{"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10783:9:4","subExpression":{"id":869,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"10783:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10776:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10734:59:4","trueExpression":{"baseExpression":{"id":864,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"10756:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":867,"indexExpression":{"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10763:9:4","subExpression":{"id":865,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"10763:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10756:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":873,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10733:61:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10689:141:4"},{"expression":{"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":880,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"10844:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":882,"indexExpression":{"id":881,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"10851:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10844:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":885,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"10884:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":886,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"10887:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":883,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"10856:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$448_$","typeString":"type(library Hashes)"}},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10863:20:4","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":435,"src":"10856:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10856:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10844:45:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":889,"nodeType":"ExpressionStatement","src":"10844:45:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":835,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"10566:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":836,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"10570:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10566:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":891,"initializationExpression":{"assignments":[832],"declarations":[{"constant":false,"id":832,"mutability":"mutable","name":"i","nameLocation":"10559:1:4","nodeType":"VariableDeclaration","scope":891,"src":"10551:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":831,"name":"uint256","nodeType":"ElementaryTypeName","src":"10551:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":834,"initialValue":{"hexValue":"30","id":833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10563:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10551:13:4"},"loopExpression":{"expression":{"id":839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10585:3:4","subExpression":{"id":838,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"10585:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":840,"nodeType":"ExpressionStatement","src":"10585:3:4"},"nodeType":"ForStatement","src":"10546:354:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":892,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"10914:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10930:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10914:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":912,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"11155:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11155:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":924,"nodeType":"Block","src":"11217:40:4","statements":[{"expression":{"baseExpression":{"id":920,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"11238:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":922,"indexExpression":{"hexValue":"30","id":921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11244:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11238:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":784,"id":923,"nodeType":"Return","src":"11231:15:4"}]},"id":925,"nodeType":"IfStatement","src":"11151:106:4","trueBody":{"id":919,"nodeType":"Block","src":"11170:41:4","statements":[{"expression":{"baseExpression":{"id":915,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"11191:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":917,"indexExpression":{"hexValue":"30","id":916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11198:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11191:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":784,"id":918,"nodeType":"Return","src":"11184:16:4"}]}},"id":926,"nodeType":"IfStatement","src":"10910:347:4","trueBody":{"id":911,"nodeType":"Block","src":"10933:212:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":895,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"10951:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":896,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"10963:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10969:6:4","memberName":"length","nodeType":"MemberAccess","src":"10963:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10951:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":903,"nodeType":"IfStatement","src":"10947:100:4","trueBody":{"id":902,"nodeType":"Block","src":"10977:70:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":899,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"11002:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11002:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":901,"nodeType":"RevertStatement","src":"10995:37:4"}]}},{"id":910,"nodeType":"UncheckedBlock","src":"11060:75:4","statements":[{"expression":{"baseExpression":{"id":904,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"11095:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":908,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":905,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"11102:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11118:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11102:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11095:25:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":784,"id":909,"nodeType":"Return","src":"11088:32:4"}]}]}}]},"documentation":{"id":771,"nodeType":"StructuredDocumentation","src":"7879:1100:4","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":928,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"8993:17:4","nodeType":"FunctionDefinition","parameters":{"id":781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":774,"mutability":"mutable","name":"proof","nameLocation":"9037:5:4","nodeType":"VariableDeclaration","scope":928,"src":"9020:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":772,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9020:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":773,"nodeType":"ArrayTypeName","src":"9020:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"proofFlags","nameLocation":"9066:10:4","nodeType":"VariableDeclaration","scope":928,"src":"9052:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":775,"name":"bool","nodeType":"ElementaryTypeName","src":"9052:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":776,"nodeType":"ArrayTypeName","src":"9052:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":780,"mutability":"mutable","name":"leaves","nameLocation":"9103:6:4","nodeType":"VariableDeclaration","scope":928,"src":"9086:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":778,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9086:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":779,"nodeType":"ArrayTypeName","src":"9086:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9010:105:4"},"returnParameters":{"id":784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"merkleRoot","nameLocation":"9147:10:4","nodeType":"VariableDeclaration","scope":928,"src":"9139:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":782,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9139:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9138:20:4"},"scope":1521,"src":"8984:2279:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":964,"nodeType":"Block","src":"12112:84:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":956,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"12147:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":957,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"12154:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":958,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"12166:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":959,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"12174:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":955,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[928,1132],"referencedDeclaration":1132,"src":"12129:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12129:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":961,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"12185:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12129:60:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":954,"id":963,"nodeType":"Return","src":"12122:67:4"}]},"documentation":{"id":929,"nodeType":"StructuredDocumentation","src":"11269:590:4","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":965,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"11873:16:4","nodeType":"FunctionDefinition","parameters":{"id":951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":932,"mutability":"mutable","name":"proof","nameLocation":"11916:5:4","nodeType":"VariableDeclaration","scope":965,"src":"11899:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":930,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11899:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":931,"nodeType":"ArrayTypeName","src":"11899:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":935,"mutability":"mutable","name":"proofFlags","nameLocation":"11945:10:4","nodeType":"VariableDeclaration","scope":965,"src":"11931:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":933,"name":"bool","nodeType":"ElementaryTypeName","src":"11931:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":934,"nodeType":"ArrayTypeName","src":"11931:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":937,"mutability":"mutable","name":"root","nameLocation":"11973:4:4","nodeType":"VariableDeclaration","scope":965,"src":"11965:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":936,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11965:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"leaves","nameLocation":"12004:6:4","nodeType":"VariableDeclaration","scope":965,"src":"11987:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11987:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":939,"nodeType":"ArrayTypeName","src":"11987:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":950,"mutability":"mutable","name":"hasher","nameLocation":"12070:6:4","nodeType":"VariableDeclaration","scope":965,"src":"12020:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":949,"nodeType":"FunctionTypeName","parameterTypes":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":942,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":949,"src":"12029:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":941,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12029:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":949,"src":"12038:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":943,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12038:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12028:18:4"},"returnParameterTypes":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":949,"src":"12061:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":946,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12061:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12060:9:4"},"src":"12020:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"11889:193:4"},"returnParameters":{"id":954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":953,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":965,"src":"12106:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":952,"name":"bool","nodeType":"ElementaryTypeName","src":"12106:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12105:6:4"},"scope":1521,"src":"11864:332:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1131,"nodeType":"Block","src":"13545:2083:4","statements":[{"assignments":[991],"declarations":[{"constant":false,"id":991,"mutability":"mutable","name":"leavesLen","nameLocation":"13937:9:4","nodeType":"VariableDeclaration","scope":1131,"src":"13929:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":990,"name":"uint256","nodeType":"ElementaryTypeName","src":"13929:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":994,"initialValue":{"expression":{"id":992,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"13949:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13956:6:4","memberName":"length","nodeType":"MemberAccess","src":"13949:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13929:33:4"},{"assignments":[996],"declarations":[{"constant":false,"id":996,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"13980:13:4","nodeType":"VariableDeclaration","scope":1131,"src":"13972:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":995,"name":"uint256","nodeType":"ElementaryTypeName","src":"13972:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":999,"initialValue":{"expression":{"id":997,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"13996:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14007:6:4","memberName":"length","nodeType":"MemberAccess","src":"13996:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13972:41:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1000,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"14061:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1001,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"14073:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14079:6:4","memberName":"length","nodeType":"MemberAccess","src":"14073:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1004,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"14089:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14105:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14089:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:45:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1012,"nodeType":"IfStatement","src":"14057:113:4","trueBody":{"id":1011,"nodeType":"Block","src":"14108:62:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1008,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"14129:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1010,"nodeType":"RevertStatement","src":"14122:37:4"}]}},{"assignments":[1017],"declarations":[{"constant":false,"id":1017,"mutability":"mutable","name":"hashes","nameLocation":"14431:6:4","nodeType":"VariableDeclaration","scope":1131,"src":"14414:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1015,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14414:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1016,"nodeType":"ArrayTypeName","src":"14414:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1023,"initialValue":{"arguments":[{"id":1021,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"14454:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1020,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14440:13:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1018,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14444:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1019,"nodeType":"ArrayTypeName","src":"14444:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14440:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14414:54:4"},{"assignments":[1025],"declarations":[{"constant":false,"id":1025,"mutability":"mutable","name":"leafPos","nameLocation":"14486:7:4","nodeType":"VariableDeclaration","scope":1131,"src":"14478:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1024,"name":"uint256","nodeType":"ElementaryTypeName","src":"14478:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1027,"initialValue":{"hexValue":"30","id":1026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14496:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14478:19:4"},{"assignments":[1029],"declarations":[{"constant":false,"id":1029,"mutability":"mutable","name":"hashPos","nameLocation":"14515:7:4","nodeType":"VariableDeclaration","scope":1131,"src":"14507:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1028,"name":"uint256","nodeType":"ElementaryTypeName","src":"14507:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1031,"initialValue":{"hexValue":"30","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14525:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14507:19:4"},{"assignments":[1033],"declarations":[{"constant":false,"id":1033,"mutability":"mutable","name":"proofPos","nameLocation":"14544:8:4","nodeType":"VariableDeclaration","scope":1131,"src":"14536:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1032,"name":"uint256","nodeType":"ElementaryTypeName","src":"14536:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1035,"initialValue":{"hexValue":"30","id":1034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14555:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14536:20:4"},{"body":{"id":1094,"nodeType":"Block","src":"14976:289:4","statements":[{"assignments":[1047],"declarations":[{"constant":false,"id":1047,"mutability":"mutable","name":"a","nameLocation":"14998:1:4","nodeType":"VariableDeclaration","scope":1094,"src":"14990:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1046,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14990:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1060,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1048,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"15002:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1049,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"15012:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15002:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1055,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"15044:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1058,"indexExpression":{"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15051:9:4","subExpression":{"id":1056,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"15051:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15044:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15002:59:4","trueExpression":{"baseExpression":{"id":1051,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"15024:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1054,"indexExpression":{"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15031:9:4","subExpression":{"id":1052,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"15031:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15024:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"14990:71:4"},{"assignments":[1062],"declarations":[{"constant":false,"id":1062,"mutability":"mutable","name":"b","nameLocation":"15083:1:4","nodeType":"VariableDeclaration","scope":1094,"src":"15075:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1061,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15075:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1084,"initialValue":{"condition":{"baseExpression":{"id":1063,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"15087:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1065,"indexExpression":{"id":1064,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"15098:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15087:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1079,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"15199:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1082,"indexExpression":{"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15205:10:4","subExpression":{"id":1080,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"15205:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15199:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15087:129:4","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1066,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"15120:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1067,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"15130:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15120:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1073,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"15162:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1076,"indexExpression":{"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15169:9:4","subExpression":{"id":1074,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"15169:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15162:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15120:59:4","trueExpression":{"baseExpression":{"id":1069,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"15142:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1072,"indexExpression":{"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15149:9:4","subExpression":{"id":1070,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"15149:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15142:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1078,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15119:61:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15075:141:4"},{"expression":{"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1085,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"15230:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1087,"indexExpression":{"id":1086,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"15237:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15230:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1089,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"15249:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1090,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"15252:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1088,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"15242:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15242:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15230:24:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1093,"nodeType":"ExpressionStatement","src":"15230:24:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1040,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"14952:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1041,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"14956:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14952:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1095,"initializationExpression":{"assignments":[1037],"declarations":[{"constant":false,"id":1037,"mutability":"mutable","name":"i","nameLocation":"14945:1:4","nodeType":"VariableDeclaration","scope":1095,"src":"14937:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1036,"name":"uint256","nodeType":"ElementaryTypeName","src":"14937:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1039,"initialValue":{"hexValue":"30","id":1038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14949:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14937:13:4"},"loopExpression":{"expression":{"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14971:3:4","subExpression":{"id":1043,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"14971:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1045,"nodeType":"ExpressionStatement","src":"14971:3:4"},"nodeType":"ForStatement","src":"14932:333:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1096,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"15279:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15295:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15279:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1116,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"15520:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15532:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15520:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1128,"nodeType":"Block","src":"15582:40:4","statements":[{"expression":{"baseExpression":{"id":1124,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"15603:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1126,"indexExpression":{"hexValue":"30","id":1125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15609:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15603:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":989,"id":1127,"nodeType":"Return","src":"15596:15:4"}]},"id":1129,"nodeType":"IfStatement","src":"15516:106:4","trueBody":{"id":1123,"nodeType":"Block","src":"15535:41:4","statements":[{"expression":{"baseExpression":{"id":1119,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"15556:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1121,"indexExpression":{"hexValue":"30","id":1120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15563:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15556:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":989,"id":1122,"nodeType":"Return","src":"15549:16:4"}]}},"id":1130,"nodeType":"IfStatement","src":"15275:347:4","trueBody":{"id":1115,"nodeType":"Block","src":"15298:212:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1099,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"15316:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1100,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"15328:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15334:6:4","memberName":"length","nodeType":"MemberAccess","src":"15328:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15316:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1107,"nodeType":"IfStatement","src":"15312:100:4","trueBody":{"id":1106,"nodeType":"Block","src":"15342:70:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1103,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"15367:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15367:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1105,"nodeType":"RevertStatement","src":"15360:37:4"}]}},{"id":1114,"nodeType":"UncheckedBlock","src":"15425:75:4","statements":[{"expression":{"baseExpression":{"id":1108,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"15460:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1112,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1109,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"15467:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15483:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15467:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15460:25:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":989,"id":1113,"nodeType":"Return","src":"15453:32:4"}]}]}}]},"documentation":{"id":966,"nodeType":"StructuredDocumentation","src":"12202:1097:4","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1132,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"13313:17:4","nodeType":"FunctionDefinition","parameters":{"id":986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":969,"mutability":"mutable","name":"proof","nameLocation":"13357:5:4","nodeType":"VariableDeclaration","scope":1132,"src":"13340:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":967,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13340:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":968,"nodeType":"ArrayTypeName","src":"13340:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":972,"mutability":"mutable","name":"proofFlags","nameLocation":"13386:10:4","nodeType":"VariableDeclaration","scope":1132,"src":"13372:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":970,"name":"bool","nodeType":"ElementaryTypeName","src":"13372:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":971,"nodeType":"ArrayTypeName","src":"13372:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":975,"mutability":"mutable","name":"leaves","nameLocation":"13423:6:4","nodeType":"VariableDeclaration","scope":1132,"src":"13406:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":973,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13406:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":974,"nodeType":"ArrayTypeName","src":"13406:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":985,"mutability":"mutable","name":"hasher","nameLocation":"13489:6:4","nodeType":"VariableDeclaration","scope":1132,"src":"13439:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":984,"nodeType":"FunctionTypeName","parameterTypes":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":984,"src":"13448:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":976,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13448:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":979,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":984,"src":"13457:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":978,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13457:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13447:18:4"},"returnParameterTypes":{"id":983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":982,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":984,"src":"13480:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":981,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13480:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13479:9:4"},"src":"13439:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"13330:171:4"},"returnParameters":{"id":989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":988,"mutability":"mutable","name":"merkleRoot","nameLocation":"13533:10:4","nodeType":"VariableDeclaration","scope":1132,"src":"13525:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":987,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13525:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13524:20:4"},"scope":1521,"src":"13304:2324:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1157,"nodeType":"Block","src":"16436:84:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1150,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"16479:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1151,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"16486:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1152,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"16498:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1149,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1316,1520],"referencedDeclaration":1316,"src":"16453:25:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16453:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1154,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"16509:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16453:60:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1148,"id":1156,"nodeType":"Return","src":"16446:67:4"}]},"documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"15634:603:4","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":1158,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"16251:24:4","nodeType":"FunctionDefinition","parameters":{"id":1145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1136,"mutability":"mutable","name":"proof","nameLocation":"16304:5:4","nodeType":"VariableDeclaration","scope":1158,"src":"16285:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1134,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16285:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1135,"nodeType":"ArrayTypeName","src":"16285:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1139,"mutability":"mutable","name":"proofFlags","nameLocation":"16335:10:4","nodeType":"VariableDeclaration","scope":1158,"src":"16319:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1137,"name":"bool","nodeType":"ElementaryTypeName","src":"16319:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1138,"nodeType":"ArrayTypeName","src":"16319:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"root","nameLocation":"16363:4:4","nodeType":"VariableDeclaration","scope":1158,"src":"16355:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1140,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16355:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1144,"mutability":"mutable","name":"leaves","nameLocation":"16394:6:4","nodeType":"VariableDeclaration","scope":1158,"src":"16377:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1142,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16377:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1143,"nodeType":"ArrayTypeName","src":"16377:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"16275:131:4"},"returnParameters":{"id":1148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1158,"src":"16430:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1146,"name":"bool","nodeType":"ElementaryTypeName","src":"16430:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16429:6:4"},"scope":1521,"src":"16242:278:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1315,"nodeType":"Block","src":"17820:2104:4","statements":[{"assignments":[1174],"declarations":[{"constant":false,"id":1174,"mutability":"mutable","name":"leavesLen","nameLocation":"18212:9:4","nodeType":"VariableDeclaration","scope":1315,"src":"18204:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1173,"name":"uint256","nodeType":"ElementaryTypeName","src":"18204:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1177,"initialValue":{"expression":{"id":1175,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"18224:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18231:6:4","memberName":"length","nodeType":"MemberAccess","src":"18224:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18204:33:4"},{"assignments":[1179],"declarations":[{"constant":false,"id":1179,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"18255:13:4","nodeType":"VariableDeclaration","scope":1315,"src":"18247:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1178,"name":"uint256","nodeType":"ElementaryTypeName","src":"18247:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1182,"initialValue":{"expression":{"id":1180,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"18271:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18282:6:4","memberName":"length","nodeType":"MemberAccess","src":"18271:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18247:41:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1183,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"18336:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1184,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"18348:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18354:6:4","memberName":"length","nodeType":"MemberAccess","src":"18348:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1187,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"18364:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18380:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18364:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:45:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1195,"nodeType":"IfStatement","src":"18332:113:4","trueBody":{"id":1194,"nodeType":"Block","src":"18383:62:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1191,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"18404:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18404:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1193,"nodeType":"RevertStatement","src":"18397:37:4"}]}},{"assignments":[1200],"declarations":[{"constant":false,"id":1200,"mutability":"mutable","name":"hashes","nameLocation":"18706:6:4","nodeType":"VariableDeclaration","scope":1315,"src":"18689:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1198,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18689:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1199,"nodeType":"ArrayTypeName","src":"18689:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1206,"initialValue":{"arguments":[{"id":1204,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"18729:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"18715:13:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1201,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18719:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1202,"nodeType":"ArrayTypeName","src":"18719:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18715:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18689:54:4"},{"assignments":[1208],"declarations":[{"constant":false,"id":1208,"mutability":"mutable","name":"leafPos","nameLocation":"18761:7:4","nodeType":"VariableDeclaration","scope":1315,"src":"18753:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"18753:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1210,"initialValue":{"hexValue":"30","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18771:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18753:19:4"},{"assignments":[1212],"declarations":[{"constant":false,"id":1212,"mutability":"mutable","name":"hashPos","nameLocation":"18790:7:4","nodeType":"VariableDeclaration","scope":1315,"src":"18782:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1211,"name":"uint256","nodeType":"ElementaryTypeName","src":"18782:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1214,"initialValue":{"hexValue":"30","id":1213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18800:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18782:19:4"},{"assignments":[1216],"declarations":[{"constant":false,"id":1216,"mutability":"mutable","name":"proofPos","nameLocation":"18819:8:4","nodeType":"VariableDeclaration","scope":1315,"src":"18811:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1215,"name":"uint256","nodeType":"ElementaryTypeName","src":"18811:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1218,"initialValue":{"hexValue":"30","id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18830:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18811:20:4"},{"body":{"id":1278,"nodeType":"Block","src":"19251:310:4","statements":[{"assignments":[1230],"declarations":[{"constant":false,"id":1230,"mutability":"mutable","name":"a","nameLocation":"19273:1:4","nodeType":"VariableDeclaration","scope":1278,"src":"19265:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1229,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19265:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1243,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1231,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"19277:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1232,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"19287:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19277:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1238,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"19319:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1241,"indexExpression":{"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19326:9:4","subExpression":{"id":1239,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"19326:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19319:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19277:59:4","trueExpression":{"baseExpression":{"id":1234,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"19299:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1237,"indexExpression":{"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19306:9:4","subExpression":{"id":1235,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"19306:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19299:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19265:71:4"},{"assignments":[1245],"declarations":[{"constant":false,"id":1245,"mutability":"mutable","name":"b","nameLocation":"19358:1:4","nodeType":"VariableDeclaration","scope":1278,"src":"19350:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19350:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1267,"initialValue":{"condition":{"baseExpression":{"id":1246,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"19362:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1248,"indexExpression":{"id":1247,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"19373:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19362:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1262,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"19474:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1265,"indexExpression":{"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19480:10:4","subExpression":{"id":1263,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"19480:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19474:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19362:129:4","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1249,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"19395:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1250,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"19405:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19395:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1256,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"19437:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1259,"indexExpression":{"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19444:9:4","subExpression":{"id":1257,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"19444:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19437:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19395:59:4","trueExpression":{"baseExpression":{"id":1252,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"19417:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1255,"indexExpression":{"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19424:9:4","subExpression":{"id":1253,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"19424:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19417:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1261,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19394:61:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19350:141:4"},{"expression":{"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1268,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"19505:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1270,"indexExpression":{"id":1269,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"19512:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19505:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1273,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"19545:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1274,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"19548:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1271,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"19517:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$448_$","typeString":"type(library Hashes)"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19524:20:4","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":435,"src":"19517:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19517:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"19505:45:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1277,"nodeType":"ExpressionStatement","src":"19505:45:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1223,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"19227:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1224,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"19231:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19227:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1279,"initializationExpression":{"assignments":[1220],"declarations":[{"constant":false,"id":1220,"mutability":"mutable","name":"i","nameLocation":"19220:1:4","nodeType":"VariableDeclaration","scope":1279,"src":"19212:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1219,"name":"uint256","nodeType":"ElementaryTypeName","src":"19212:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1222,"initialValue":{"hexValue":"30","id":1221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19224:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19212:13:4"},"loopExpression":{"expression":{"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19246:3:4","subExpression":{"id":1226,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"19246:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1228,"nodeType":"ExpressionStatement","src":"19246:3:4"},"nodeType":"ForStatement","src":"19207:354:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1280,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"19575:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19591:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19575:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1300,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"19816:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19828:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19816:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1312,"nodeType":"Block","src":"19878:40:4","statements":[{"expression":{"baseExpression":{"id":1308,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"19899:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1310,"indexExpression":{"hexValue":"30","id":1309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19905:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19899:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1172,"id":1311,"nodeType":"Return","src":"19892:15:4"}]},"id":1313,"nodeType":"IfStatement","src":"19812:106:4","trueBody":{"id":1307,"nodeType":"Block","src":"19831:41:4","statements":[{"expression":{"baseExpression":{"id":1303,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"19852:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1305,"indexExpression":{"hexValue":"30","id":1304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19859:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19852:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1172,"id":1306,"nodeType":"Return","src":"19845:16:4"}]}},"id":1314,"nodeType":"IfStatement","src":"19571:347:4","trueBody":{"id":1299,"nodeType":"Block","src":"19594:212:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1283,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"19612:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1284,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"19624:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19630:6:4","memberName":"length","nodeType":"MemberAccess","src":"19624:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19612:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1291,"nodeType":"IfStatement","src":"19608:100:4","trueBody":{"id":1290,"nodeType":"Block","src":"19638:70:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1287,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"19663:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19663:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1289,"nodeType":"RevertStatement","src":"19656:37:4"}]}},{"id":1298,"nodeType":"UncheckedBlock","src":"19721:75:4","statements":[{"expression":{"baseExpression":{"id":1292,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"19756:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1296,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1293,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"19763:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19779:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19763:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19756:25:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1172,"id":1297,"nodeType":"Return","src":"19749:32:4"}]}]}}]},"documentation":{"id":1159,"nodeType":"StructuredDocumentation","src":"16526:1102:4","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1316,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"17642:25:4","nodeType":"FunctionDefinition","parameters":{"id":1169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"proof","nameLocation":"17696:5:4","nodeType":"VariableDeclaration","scope":1316,"src":"17677:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17677:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1161,"nodeType":"ArrayTypeName","src":"17677:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1165,"mutability":"mutable","name":"proofFlags","nameLocation":"17727:10:4","nodeType":"VariableDeclaration","scope":1316,"src":"17711:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1163,"name":"bool","nodeType":"ElementaryTypeName","src":"17711:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1164,"nodeType":"ArrayTypeName","src":"17711:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"leaves","nameLocation":"17764:6:4","nodeType":"VariableDeclaration","scope":1316,"src":"17747:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1166,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17747:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1167,"nodeType":"ArrayTypeName","src":"17747:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"17667:109:4"},"returnParameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"mutability":"mutable","name":"merkleRoot","nameLocation":"17808:10:4","nodeType":"VariableDeclaration","scope":1316,"src":"17800:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1170,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17800:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17799:20:4"},"scope":1521,"src":"17633:2291:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1352,"nodeType":"Block","src":"20795:92:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1344,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"20838:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1345,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"20845:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1346,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"20857:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1347,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"20865:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1343,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1316,1520],"referencedDeclaration":1520,"src":"20812:25:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20812:60:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1349,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"20876:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20812:68:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1342,"id":1351,"nodeType":"Return","src":"20805:75:4"}]},"documentation":{"id":1317,"nodeType":"StructuredDocumentation","src":"19930:600:4","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":1353,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"20544:24:4","nodeType":"FunctionDefinition","parameters":{"id":1339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1320,"mutability":"mutable","name":"proof","nameLocation":"20597:5:4","nodeType":"VariableDeclaration","scope":1353,"src":"20578:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1318,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20578:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1319,"nodeType":"ArrayTypeName","src":"20578:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1323,"mutability":"mutable","name":"proofFlags","nameLocation":"20628:10:4","nodeType":"VariableDeclaration","scope":1353,"src":"20612:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1321,"name":"bool","nodeType":"ElementaryTypeName","src":"20612:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1322,"nodeType":"ArrayTypeName","src":"20612:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1325,"mutability":"mutable","name":"root","nameLocation":"20656:4:4","nodeType":"VariableDeclaration","scope":1353,"src":"20648:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20648:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"leaves","nameLocation":"20687:6:4","nodeType":"VariableDeclaration","scope":1353,"src":"20670:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20670:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1327,"nodeType":"ArrayTypeName","src":"20670:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1338,"mutability":"mutable","name":"hasher","nameLocation":"20753:6:4","nodeType":"VariableDeclaration","scope":1353,"src":"20703:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1337,"nodeType":"FunctionTypeName","parameterTypes":{"id":1333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1337,"src":"20712:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1329,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20712:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1337,"src":"20721:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1331,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20721:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20711:18:4"},"returnParameterTypes":{"id":1336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1337,"src":"20744:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20744:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20743:9:4"},"src":"20703:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"20568:197:4"},"returnParameters":{"id":1342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1353,"src":"20789:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1340,"name":"bool","nodeType":"ElementaryTypeName","src":"20789:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20788:6:4"},"scope":1521,"src":"20535:352:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1519,"nodeType":"Block","src":"22250:2083:4","statements":[{"assignments":[1379],"declarations":[{"constant":false,"id":1379,"mutability":"mutable","name":"leavesLen","nameLocation":"22642:9:4","nodeType":"VariableDeclaration","scope":1519,"src":"22634:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1378,"name":"uint256","nodeType":"ElementaryTypeName","src":"22634:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1382,"initialValue":{"expression":{"id":1380,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"22654:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22661:6:4","memberName":"length","nodeType":"MemberAccess","src":"22654:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22634:33:4"},{"assignments":[1384],"declarations":[{"constant":false,"id":1384,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"22685:13:4","nodeType":"VariableDeclaration","scope":1519,"src":"22677:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1383,"name":"uint256","nodeType":"ElementaryTypeName","src":"22677:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1387,"initialValue":{"expression":{"id":1385,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"22701:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22712:6:4","memberName":"length","nodeType":"MemberAccess","src":"22701:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22677:41:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1388,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"22766:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1389,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"22778:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22784:6:4","memberName":"length","nodeType":"MemberAccess","src":"22778:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1392,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"22794:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22810:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22794:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:45:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1400,"nodeType":"IfStatement","src":"22762:113:4","trueBody":{"id":1399,"nodeType":"Block","src":"22813:62:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1396,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"22834:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22834:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1398,"nodeType":"RevertStatement","src":"22827:37:4"}]}},{"assignments":[1405],"declarations":[{"constant":false,"id":1405,"mutability":"mutable","name":"hashes","nameLocation":"23136:6:4","nodeType":"VariableDeclaration","scope":1519,"src":"23119:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23119:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1404,"nodeType":"ArrayTypeName","src":"23119:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1411,"initialValue":{"arguments":[{"id":1409,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"23159:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"23145:13:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23149:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1407,"nodeType":"ArrayTypeName","src":"23149:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23145:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"23119:54:4"},{"assignments":[1413],"declarations":[{"constant":false,"id":1413,"mutability":"mutable","name":"leafPos","nameLocation":"23191:7:4","nodeType":"VariableDeclaration","scope":1519,"src":"23183:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1412,"name":"uint256","nodeType":"ElementaryTypeName","src":"23183:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1415,"initialValue":{"hexValue":"30","id":1414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23201:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23183:19:4"},{"assignments":[1417],"declarations":[{"constant":false,"id":1417,"mutability":"mutable","name":"hashPos","nameLocation":"23220:7:4","nodeType":"VariableDeclaration","scope":1519,"src":"23212:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1416,"name":"uint256","nodeType":"ElementaryTypeName","src":"23212:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1419,"initialValue":{"hexValue":"30","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23230:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23212:19:4"},{"assignments":[1421],"declarations":[{"constant":false,"id":1421,"mutability":"mutable","name":"proofPos","nameLocation":"23249:8:4","nodeType":"VariableDeclaration","scope":1519,"src":"23241:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1420,"name":"uint256","nodeType":"ElementaryTypeName","src":"23241:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1423,"initialValue":{"hexValue":"30","id":1422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23260:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23241:20:4"},{"body":{"id":1482,"nodeType":"Block","src":"23681:289:4","statements":[{"assignments":[1435],"declarations":[{"constant":false,"id":1435,"mutability":"mutable","name":"a","nameLocation":"23703:1:4","nodeType":"VariableDeclaration","scope":1482,"src":"23695:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1434,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23695:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1448,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1436,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"23707:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1437,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"23717:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23707:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1443,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"23749:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1446,"indexExpression":{"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23756:9:4","subExpression":{"id":1444,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"23756:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23749:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23707:59:4","trueExpression":{"baseExpression":{"id":1439,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"23729:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1442,"indexExpression":{"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23736:9:4","subExpression":{"id":1440,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"23736:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23729:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23695:71:4"},{"assignments":[1450],"declarations":[{"constant":false,"id":1450,"mutability":"mutable","name":"b","nameLocation":"23788:1:4","nodeType":"VariableDeclaration","scope":1482,"src":"23780:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23780:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1472,"initialValue":{"condition":{"baseExpression":{"id":1451,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"23792:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1453,"indexExpression":{"id":1452,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"23803:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23792:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1467,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"23904:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1470,"indexExpression":{"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23910:10:4","subExpression":{"id":1468,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"23910:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23904:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23792:129:4","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1454,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"23825:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1455,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"23835:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23825:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1461,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"23867:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1464,"indexExpression":{"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23874:9:4","subExpression":{"id":1462,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"23874:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23867:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23825:59:4","trueExpression":{"baseExpression":{"id":1457,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"23847:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1460,"indexExpression":{"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23854:9:4","subExpression":{"id":1458,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"23854:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23847:17:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1466,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23824:61:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23780:141:4"},{"expression":{"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1473,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"23935:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1475,"indexExpression":{"id":1474,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"23942:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23935:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1477,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"23954:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1478,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"23957:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1476,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"23947:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23947:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"23935:24:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1481,"nodeType":"ExpressionStatement","src":"23935:24:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1428,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"23657:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1429,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"23661:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23657:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1483,"initializationExpression":{"assignments":[1425],"declarations":[{"constant":false,"id":1425,"mutability":"mutable","name":"i","nameLocation":"23650:1:4","nodeType":"VariableDeclaration","scope":1483,"src":"23642:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1424,"name":"uint256","nodeType":"ElementaryTypeName","src":"23642:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1427,"initialValue":{"hexValue":"30","id":1426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23654:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23642:13:4"},"loopExpression":{"expression":{"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23676:3:4","subExpression":{"id":1431,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"23676:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1433,"nodeType":"ExpressionStatement","src":"23676:3:4"},"nodeType":"ForStatement","src":"23637:333:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1484,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"23984:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24000:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23984:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1504,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"24225:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24237:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24225:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1516,"nodeType":"Block","src":"24287:40:4","statements":[{"expression":{"baseExpression":{"id":1512,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"24308:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1514,"indexExpression":{"hexValue":"30","id":1513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24314:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24308:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1377,"id":1515,"nodeType":"Return","src":"24301:15:4"}]},"id":1517,"nodeType":"IfStatement","src":"24221:106:4","trueBody":{"id":1511,"nodeType":"Block","src":"24240:41:4","statements":[{"expression":{"baseExpression":{"id":1507,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"24261:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1509,"indexExpression":{"hexValue":"30","id":1508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24268:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24261:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1377,"id":1510,"nodeType":"Return","src":"24254:16:4"}]}},"id":1518,"nodeType":"IfStatement","src":"23980:347:4","trueBody":{"id":1503,"nodeType":"Block","src":"24003:212:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1487,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"24021:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1488,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"24033:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24039:6:4","memberName":"length","nodeType":"MemberAccess","src":"24033:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24021:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1495,"nodeType":"IfStatement","src":"24017:100:4","trueBody":{"id":1494,"nodeType":"Block","src":"24047:70:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1491,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"24072:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24072:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1493,"nodeType":"RevertStatement","src":"24065:37:4"}]}},{"id":1502,"nodeType":"UncheckedBlock","src":"24130:75:4","statements":[{"expression":{"baseExpression":{"id":1496,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"24165:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1500,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1497,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"24172:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24188:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24172:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24165:25:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1377,"id":1501,"nodeType":"Return","src":"24158:32:4"}]}]}}]},"documentation":{"id":1354,"nodeType":"StructuredDocumentation","src":"20893:1099:4","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1520,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"22006:25:4","nodeType":"FunctionDefinition","parameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1357,"mutability":"mutable","name":"proof","nameLocation":"22060:5:4","nodeType":"VariableDeclaration","scope":1520,"src":"22041:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22041:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1356,"nodeType":"ArrayTypeName","src":"22041:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1360,"mutability":"mutable","name":"proofFlags","nameLocation":"22091:10:4","nodeType":"VariableDeclaration","scope":1520,"src":"22075:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1358,"name":"bool","nodeType":"ElementaryTypeName","src":"22075:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1359,"nodeType":"ArrayTypeName","src":"22075:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1363,"mutability":"mutable","name":"leaves","nameLocation":"22128:6:4","nodeType":"VariableDeclaration","scope":1520,"src":"22111:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22111:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1362,"nodeType":"ArrayTypeName","src":"22111:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1373,"mutability":"mutable","name":"hasher","nameLocation":"22194:6:4","nodeType":"VariableDeclaration","scope":1520,"src":"22144:56:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1372,"nodeType":"FunctionTypeName","parameterTypes":{"id":1368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1372,"src":"22153:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1364,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22153:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1367,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1372,"src":"22162:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1366,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22162:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22152:18:4"},"returnParameterTypes":{"id":1371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1370,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1372,"src":"22185:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1369,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22185:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22184:9:4"},"src":"22144:56:4","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"22031:175:4"},"returnParameters":{"id":1377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1376,"mutability":"mutable","name":"merkleRoot","nameLocation":"22238:10:4","nodeType":"VariableDeclaration","scope":1520,"src":"22230:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1375,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22230:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22229:20:4"},"scope":1521,"src":"21997:2336:4","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1522,"src":"1353:22982:4","usedErrors":[456],"usedEvents":[]}],"src":"206:24130:4"},"id":4},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1545],"IERC165":[1557]},"id":1546,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1523,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:5"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1525,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1546,"sourceUnit":1558,"src":"140:38:5","symbolAliases":[{"foreign":{"id":1524,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"148:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1527,"name":"IERC165","nameLocations":["688:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1557,"src":"688:7:5"},"id":1528,"nodeType":"InheritanceSpecifier","src":"688:7:5"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1526,"nodeType":"StructuredDocumentation","src":"180:479:5","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":1545,"linearizedBaseContracts":[1545,1557],"name":"ERC165","nameLocation":"678:6:5","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1556],"body":{"id":1543,"nodeType":"Block","src":"845:64:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1536,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"862:11:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1538,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"882:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1557_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1557_$","typeString":"type(contract IERC165)"}],"id":1537,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"877:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"877:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1557","typeString":"type(contract IERC165)"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"891:11:5","memberName":"interfaceId","nodeType":"MemberAccess","src":"877:25:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"862:40:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1535,"id":1542,"nodeType":"Return","src":"855:47:5"}]},"documentation":{"id":1529,"nodeType":"StructuredDocumentation","src":"702:56:5","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1544,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"772:17:5","nodeType":"FunctionDefinition","parameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1531,"mutability":"mutable","name":"interfaceId","nameLocation":"797:11:5","nodeType":"VariableDeclaration","scope":1544,"src":"790:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1530,"name":"bytes4","nodeType":"ElementaryTypeName","src":"790:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"789:20:5"},"returnParameters":{"id":1535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1534,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1544,"src":"839:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1533,"name":"bool","nodeType":"ElementaryTypeName","src":"839:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"838:6:5"},"scope":1545,"src":"763:146:5","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1546,"src":"660:251:5","usedErrors":[],"usedEvents":[]}],"src":"114:798:5"},"id":5},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1557]},"id":1558,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1547,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1548,"nodeType":"StructuredDocumentation","src":"141:280:6","text":" @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1557,"linearizedBaseContracts":[1557],"name":"IERC165","nameLocation":"432:7:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1549,"nodeType":"StructuredDocumentation","src":"446:340:6","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1556,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"800:17:6","nodeType":"FunctionDefinition","parameters":{"id":1552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1551,"mutability":"mutable","name":"interfaceId","nameLocation":"825:11:6","nodeType":"VariableDeclaration","scope":1556,"src":"818:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1550,"name":"bytes4","nodeType":"ElementaryTypeName","src":"818:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"817:20:6"},"returnParameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1556,"src":"861:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1553,"name":"bool","nodeType":"ElementaryTypeName","src":"861:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"860:6:6"},"scope":1557,"src":"791:76:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1558,"src":"422:447:6","usedErrors":[],"usedEvents":[]}],"src":"115:755:6"},"id":6},"contracts/Voting.sol":{"ast":{"absolutePath":"contracts/Voting.sol","exportedSymbols":{"AccessControl":[295],"Context":[408],"ERC165":[1545],"Hashes":[448],"IAccessControl":[378],"MerkleProof":[1521],"VotingGuardian":[1820]},"id":1821,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1559,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":1560,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1821,"sourceUnit":296,"src":"58:58:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":1561,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1821,"sourceUnit":1522,"src":"117:68:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1562,"name":"AccessControl","nameLocations":["214:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":295,"src":"214:13:7"},"id":1563,"nodeType":"InheritanceSpecifier","src":"214:13:7"}],"canonicalName":"VotingGuardian","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1820,"linearizedBaseContracts":[1820,295,1545,1557,378,408],"name":"VotingGuardian","nameLocation":"196:14:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"75b238fc","id":1568,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"258:10:7","nodeType":"VariableDeclaration","scope":1820,"src":"234:60:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"234:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":1566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"281:12:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":1565,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"271:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"271:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"canonicalName":"VotingGuardian.Election","id":1579,"members":[{"constant":false,"id":1570,"mutability":"mutable","name":"name","nameLocation":"334:4:7","nodeType":"VariableDeclaration","scope":1579,"src":"327:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1569,"name":"string","nodeType":"ElementaryTypeName","src":"327:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1572,"mutability":"mutable","name":"startTime","nameLocation":"356:9:7","nodeType":"VariableDeclaration","scope":1579,"src":"348:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1571,"name":"uint256","nodeType":"ElementaryTypeName","src":"348:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1574,"mutability":"mutable","name":"endTime","nameLocation":"383:7:7","nodeType":"VariableDeclaration","scope":1579,"src":"375:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1573,"name":"uint256","nodeType":"ElementaryTypeName","src":"375:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1576,"mutability":"mutable","name":"merkleRoot","nameLocation":"408:10:7","nodeType":"VariableDeclaration","scope":1579,"src":"400:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"400:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1578,"mutability":"mutable","name":"exists","nameLocation":"471:6:7","nodeType":"VariableDeclaration","scope":1579,"src":"466:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1577,"name":"bool","nodeType":"ElementaryTypeName","src":"466:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Election","nameLocation":"308:8:7","nodeType":"StructDefinition","scope":1820,"src":"301:183:7","visibility":"public"},{"canonicalName":"VotingGuardian.Candidate","id":1586,"members":[{"constant":false,"id":1581,"mutability":"mutable","name":"idHash","nameLocation":"525:6:7","nodeType":"VariableDeclaration","scope":1586,"src":"517:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1580,"name":"bytes32","nodeType":"ElementaryTypeName","src":"517:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1583,"mutability":"mutable","name":"positionId","nameLocation":"575:10:7","nodeType":"VariableDeclaration","scope":1586,"src":"567:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"567:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1585,"mutability":"mutable","name":"exists","nameLocation":"600:6:7","nodeType":"VariableDeclaration","scope":1586,"src":"595:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1584,"name":"bool","nodeType":"ElementaryTypeName","src":"595:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Candidate","nameLocation":"497:9:7","nodeType":"StructDefinition","scope":1820,"src":"490:123:7","visibility":"public"},{"anonymous":false,"eventSelector":"e7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d9","id":1596,"name":"ElectionCreated","nameLocation":"625:15:7","nodeType":"EventDefinition","parameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1588,"indexed":true,"mutability":"mutable","name":"electionId","nameLocation":"666:10:7","nodeType":"VariableDeclaration","scope":1596,"src":"650:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1587,"name":"uint256","nodeType":"ElementaryTypeName","src":"650:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1590,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"693:4:7","nodeType":"VariableDeclaration","scope":1596,"src":"686:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1589,"name":"string","nodeType":"ElementaryTypeName","src":"686:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1592,"indexed":false,"mutability":"mutable","name":"startTime","nameLocation":"715:9:7","nodeType":"VariableDeclaration","scope":1596,"src":"707:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1591,"name":"uint256","nodeType":"ElementaryTypeName","src":"707:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1594,"indexed":false,"mutability":"mutable","name":"endTime","nameLocation":"742:7:7","nodeType":"VariableDeclaration","scope":1596,"src":"734:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1593,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"640:115:7"},"src":"619:137:7"},{"anonymous":false,"eventSelector":"2e82bdc8daf342458c2dc7bf51c3aefd294a3f9d8389e73e35937693b793882e","id":1604,"name":"VoteCast","nameLocation":"768:8:7","nodeType":"EventDefinition","parameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1598,"indexed":true,"mutability":"mutable","name":"electionId","nameLocation":"802:10:7","nodeType":"VariableDeclaration","scope":1604,"src":"786:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1597,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1600,"indexed":true,"mutability":"mutable","name":"voterCommitment","nameLocation":"838:15:7","nodeType":"VariableDeclaration","scope":1604,"src":"822:31:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1599,"name":"bytes32","nodeType":"ElementaryTypeName","src":"822:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1602,"indexed":true,"mutability":"mutable","name":"candidateHash","nameLocation":"910:13:7","nodeType":"VariableDeclaration","scope":1604,"src":"894:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1601,"name":"bytes32","nodeType":"ElementaryTypeName","src":"894:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"776:153:7"},"src":"762:168:7"},{"constant":false,"functionSelector":"5e6fef01","id":1609,"mutability":"mutable","name":"elections","nameLocation":"972:9:7","nodeType":"VariableDeclaration","scope":1820,"src":"936:45:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Election_$1579_storage_$","typeString":"mapping(uint256 => struct VotingGuardian.Election)"},"typeName":{"id":1608,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1605,"name":"uint256","nodeType":"ElementaryTypeName","src":"944:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"936:28:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Election_$1579_storage_$","typeString":"mapping(uint256 => struct VotingGuardian.Election)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1607,"nodeType":"UserDefinedTypeName","pathNode":{"id":1606,"name":"Election","nameLocations":["955:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":1579,"src":"955:8:7"},"referencedDeclaration":1579,"src":"955:8:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage_ptr","typeString":"struct VotingGuardian.Election"}}},"visibility":"public"},{"constant":false,"functionSelector":"1a0478d5","id":1614,"mutability":"mutable","name":"candidates","nameLocation":"1024:10:7","nodeType":"VariableDeclaration","scope":1820,"src":"987:47:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Candidate_$1586_storage_$","typeString":"mapping(bytes32 => struct VotingGuardian.Candidate)"},"typeName":{"id":1613,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"995:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"987:29:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Candidate_$1586_storage_$","typeString":"mapping(bytes32 => struct VotingGuardian.Candidate)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1612,"nodeType":"UserDefinedTypeName","pathNode":{"id":1611,"name":"Candidate","nameLocations":["1006:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":1586,"src":"1006:9:7"},"referencedDeclaration":1586,"src":"1006:9:7","typeDescriptions":{"typeIdentifier":"t_struct$_Candidate_$1586_storage_ptr","typeString":"struct VotingGuardian.Candidate"}}},"visibility":"public"},{"constant":false,"functionSelector":"bd7cab9c","id":1620,"mutability":"mutable","name":"spentCommitments","nameLocation":"1092:16:7","nodeType":"VariableDeclaration","scope":1820,"src":"1040:68:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(bytes32 => bool))"},"typeName":{"id":1619,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1615,"name":"uint256","nodeType":"ElementaryTypeName","src":"1048:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1040:44:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(bytes32 => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1618,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1616,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1067:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1059:24:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1617,"name":"bool","nodeType":"ElementaryTypeName","src":"1078:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"public"},{"body":{"id":1635,"nodeType":"Block","src":"1129:103:7","statements":[{"expression":{"arguments":[{"id":1624,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1150:18:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":1625,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1170:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1174:6:7","memberName":"sender","nodeType":"MemberAccess","src":"1170:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1623,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"1139:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1628,"nodeType":"ExpressionStatement","src":"1139:42:7"},{"expression":{"arguments":[{"id":1630,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"1202:10:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":1631,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1214:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1218:6:7","memberName":"sender","nodeType":"MemberAccess","src":"1214:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1629,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"1191:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1191:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1634,"nodeType":"ExpressionStatement","src":"1191:34:7"}]},"id":1636,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1621,"nodeType":"ParameterList","parameters":[],"src":"1126:2:7"},"returnParameters":{"id":1622,"nodeType":"ParameterList","parameters":[],"src":"1129:0:7"},"scope":1820,"src":"1115:117:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1672,"nodeType":"Block","src":"1281:265:7","statements":[{"assignments":[1642],"declarations":[{"constant":false,"id":1642,"mutability":"mutable","name":"election","nameLocation":"1308:8:7","nodeType":"VariableDeclaration","scope":1672,"src":"1291:25:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage_ptr","typeString":"struct VotingGuardian.Election"},"typeName":{"id":1641,"nodeType":"UserDefinedTypeName","pathNode":{"id":1640,"name":"Election","nameLocations":["1291:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":1579,"src":"1291:8:7"},"referencedDeclaration":1579,"src":"1291:8:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage_ptr","typeString":"struct VotingGuardian.Election"}},"visibility":"internal"}],"id":1646,"initialValue":{"baseExpression":{"id":1643,"name":"elections","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"1319:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Election_$1579_storage_$","typeString":"mapping(uint256 => struct VotingGuardian.Election storage ref)"}},"id":1645,"indexExpression":{"id":1644,"name":"electionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"1329:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1319:21:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage","typeString":"struct VotingGuardian.Election storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1291:49:7"},{"expression":{"arguments":[{"expression":{"id":1648,"name":"election","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"1358:8:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage_ptr","typeString":"struct VotingGuardian.Election storage pointer"}},"id":1649,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1367:6:7","memberName":"exists","nodeType":"MemberAccess","referencedDeclaration":1578,"src":"1358:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420656c656374696f6e","id":1650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1375:18:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a","typeString":"literal_string \"Invalid election\""},"value":"Invalid election"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a","typeString":"literal_string \"Invalid election\""}],"id":1647,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1350:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:44:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1652,"nodeType":"ExpressionStatement","src":"1350:44:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1654,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1412:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1418:9:7","memberName":"timestamp","nodeType":"MemberAccess","src":"1412:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1656,"name":"election","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"1431:8:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage_ptr","typeString":"struct VotingGuardian.Election storage pointer"}},"id":1657,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1440:9:7","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":1572,"src":"1431:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1412:37:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f742073746172746564","id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1451:13:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8","typeString":"literal_string \"Not started\""},"value":"Not started"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8","typeString":"literal_string \"Not started\""}],"id":1653,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1404:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1404:61:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1661,"nodeType":"ExpressionStatement","src":"1404:61:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1663,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1483:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1489:9:7","memberName":"timestamp","nodeType":"MemberAccess","src":"1483:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":1665,"name":"election","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"1502:8:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage_ptr","typeString":"struct VotingGuardian.Election storage pointer"}},"id":1666,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1511:7:7","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":1574,"src":"1502:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1483:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"456e646564","id":1668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1520:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057","typeString":"literal_string \"Ended\""},"value":"Ended"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057","typeString":"literal_string \"Ended\""}],"id":1662,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1475:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1475:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1670,"nodeType":"ExpressionStatement","src":"1475:53:7"},{"id":1671,"nodeType":"PlaceholderStatement","src":"1538:1:7"}]},"id":1673,"name":"validElection","nameLocation":"1247:13:7","nodeType":"ModifierDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1638,"mutability":"mutable","name":"electionId","nameLocation":"1269:10:7","nodeType":"VariableDeclaration","scope":1673,"src":"1261:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1637,"name":"uint256","nodeType":"ElementaryTypeName","src":"1261:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1260:20:7"},"src":"1238:308:7","virtual":false,"visibility":"internal"},{"body":{"id":1717,"nodeType":"Block","src":"1779:298:7","statements":[{"expression":{"arguments":[{"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1797:29:7","subExpression":{"expression":{"baseExpression":{"id":1690,"name":"elections","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"1798:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Election_$1579_storage_$","typeString":"mapping(uint256 => struct VotingGuardian.Election storage ref)"}},"id":1692,"indexExpression":{"id":1691,"name":"electionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"1808:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1798:21:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage","typeString":"struct VotingGuardian.Election storage ref"}},"id":1693,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1820:6:7","memberName":"exists","nodeType":"MemberAccess","referencedDeclaration":1578,"src":"1798:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"456c656374696f6e20657869737473","id":1695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1828:17:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779","typeString":"literal_string \"Election exists\""},"value":"Election exists"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779","typeString":"literal_string \"Election exists\""}],"id":1689,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1789:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1789:57:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1697,"nodeType":"ExpressionStatement","src":"1789:57:7"},{"expression":{"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1698,"name":"elections","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"1856:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Election_$1579_storage_$","typeString":"mapping(uint256 => struct VotingGuardian.Election storage ref)"}},"id":1700,"indexExpression":{"id":1699,"name":"electionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"1866:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1856:21:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage","typeString":"struct VotingGuardian.Election storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1702,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"1902:4:7","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":1703,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"1920:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1704,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"1943:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1705,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"1964:10:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"74727565","id":1706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1988:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1701,"name":"Election","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"1880:8:7","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Election_$1579_storage_ptr_$","typeString":"type(struct VotingGuardian.Election storage pointer)"}},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1880:122:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_memory_ptr","typeString":"struct VotingGuardian.Election memory"}},"src":"1856:146:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage","typeString":"struct VotingGuardian.Election storage ref"}},"id":1709,"nodeType":"ExpressionStatement","src":"1856:146:7"},{"eventCall":{"arguments":[{"id":1711,"name":"electionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"2033:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1712,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"2045:4:7","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":1713,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"2051:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1714,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"2062:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1710,"name":"ElectionCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"2017:15:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,string memory,uint256,uint256)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2017:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1716,"nodeType":"EmitStatement","src":"2012:58:7"}]},"functionSelector":"789175b2","id":1718,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1686,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"1767:10:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1687,"kind":"modifierInvocation","modifierName":{"id":1685,"name":"onlyRole","nameLocations":["1758:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"1758:8:7"},"nodeType":"ModifierInvocation","src":"1758:20:7"}],"name":"createElection","nameLocation":"1561:14:7","nodeType":"FunctionDefinition","parameters":{"id":1684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1675,"mutability":"mutable","name":"electionId","nameLocation":"1593:10:7","nodeType":"VariableDeclaration","scope":1718,"src":"1585:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1674,"name":"uint256","nodeType":"ElementaryTypeName","src":"1585:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1677,"mutability":"mutable","name":"name","nameLocation":"1629:4:7","nodeType":"VariableDeclaration","scope":1718,"src":"1613:20:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":1676,"name":"string","nodeType":"ElementaryTypeName","src":"1613:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1679,"mutability":"mutable","name":"startTime","nameLocation":"1651:9:7","nodeType":"VariableDeclaration","scope":1718,"src":"1643:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1678,"name":"uint256","nodeType":"ElementaryTypeName","src":"1643:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1681,"mutability":"mutable","name":"endTime","nameLocation":"1678:7:7","nodeType":"VariableDeclaration","scope":1718,"src":"1670:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1680,"name":"uint256","nodeType":"ElementaryTypeName","src":"1670:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1683,"mutability":"mutable","name":"merkleRoot","nameLocation":"1703:10:7","nodeType":"VariableDeclaration","scope":1718,"src":"1695:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1682,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1695:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1575:173:7"},"returnParameters":{"id":1688,"nodeType":"ParameterList","parameters":[],"src":"1779:0:7"},"scope":1820,"src":"1552:525:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1747,"nodeType":"Block","src":"2193:138:7","statements":[{"expression":{"arguments":[{"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2211:26:7","subExpression":{"expression":{"baseExpression":{"id":1729,"name":"candidates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"2212:10:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Candidate_$1586_storage_$","typeString":"mapping(bytes32 => struct VotingGuardian.Candidate storage ref)"}},"id":1731,"indexExpression":{"id":1730,"name":"idHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"2223:6:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2212:18:7","typeDescriptions":{"typeIdentifier":"t_struct$_Candidate_$1586_storage","typeString":"struct VotingGuardian.Candidate storage ref"}},"id":1732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2231:6:7","memberName":"exists","nodeType":"MemberAccess","referencedDeclaration":1585,"src":"2212:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e64696461746520657869737473","id":1734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2239:18:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1","typeString":"literal_string \"Candidate exists\""},"value":"Candidate exists"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1","typeString":"literal_string \"Candidate exists\""}],"id":1728,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2203:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2203:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1736,"nodeType":"ExpressionStatement","src":"2203:55:7"},{"expression":{"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1737,"name":"candidates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"2268:10:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Candidate_$1586_storage_$","typeString":"mapping(bytes32 => struct VotingGuardian.Candidate storage ref)"}},"id":1739,"indexExpression":{"id":1738,"name":"idHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"2279:6:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2268:18:7","typeDescriptions":{"typeIdentifier":"t_struct$_Candidate_$1586_storage","typeString":"struct VotingGuardian.Candidate storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1741,"name":"idHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"2299:6:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1742,"name":"positionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"2307:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":1743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2319:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1740,"name":"Candidate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"2289:9:7","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Candidate_$1586_storage_ptr_$","typeString":"type(struct VotingGuardian.Candidate storage pointer)"}},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2289:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Candidate_$1586_memory_ptr","typeString":"struct VotingGuardian.Candidate memory"}},"src":"2268:56:7","typeDescriptions":{"typeIdentifier":"t_struct$_Candidate_$1586_storage","typeString":"struct VotingGuardian.Candidate storage ref"}},"id":1746,"nodeType":"ExpressionStatement","src":"2268:56:7"}]},"functionSelector":"840e12f5","id":1748,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1725,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"2181:10:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1726,"kind":"modifierInvocation","modifierName":{"id":1724,"name":"onlyRole","nameLocations":["2172:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"2172:8:7"},"nodeType":"ModifierInvocation","src":"2172:20:7"}],"name":"addCandidate","nameLocation":"2092:12:7","nodeType":"FunctionDefinition","parameters":{"id":1723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1720,"mutability":"mutable","name":"idHash","nameLocation":"2122:6:7","nodeType":"VariableDeclaration","scope":1748,"src":"2114:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1719,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2114:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1722,"mutability":"mutable","name":"positionId","nameLocation":"2146:10:7","nodeType":"VariableDeclaration","scope":1748,"src":"2138:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1721,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2104:58:7"},"returnParameters":{"id":1727,"nodeType":"ParameterList","parameters":[],"src":"2193:0:7"},"scope":1820,"src":"2083:248:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1818,"nodeType":"Block","src":"2593:658:7","statements":[{"assignments":[1765],"declarations":[{"constant":false,"id":1765,"mutability":"mutable","name":"election","nameLocation":"2620:8:7","nodeType":"VariableDeclaration","scope":1818,"src":"2603:25:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage_ptr","typeString":"struct VotingGuardian.Election"},"typeName":{"id":1764,"nodeType":"UserDefinedTypeName","pathNode":{"id":1763,"name":"Election","nameLocations":["2603:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":1579,"src":"2603:8:7"},"referencedDeclaration":1579,"src":"2603:8:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage_ptr","typeString":"struct VotingGuardian.Election"}},"visibility":"internal"}],"id":1769,"initialValue":{"baseExpression":{"id":1766,"name":"elections","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"2631:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Election_$1579_storage_$","typeString":"mapping(uint256 => struct VotingGuardian.Election storage ref)"}},"id":1768,"indexExpression":{"id":1767,"name":"electionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"2641:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2631:21:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage","typeString":"struct VotingGuardian.Election storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2603:49:7"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":1771,"name":"candidates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"2670:10:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Candidate_$1586_storage_$","typeString":"mapping(bytes32 => struct VotingGuardian.Candidate storage ref)"}},"id":1773,"indexExpression":{"id":1772,"name":"candidateHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"2681:13:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2670:25:7","typeDescriptions":{"typeIdentifier":"t_struct$_Candidate_$1586_storage","typeString":"struct VotingGuardian.Candidate storage ref"}},"id":1774,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2696:6:7","memberName":"exists","nodeType":"MemberAccess","referencedDeclaration":1585,"src":"2670:32:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642063616e646964617465","id":1775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2704:19:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1","typeString":"literal_string \"Invalid candidate\""},"value":"Invalid candidate"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1","typeString":"literal_string \"Invalid candidate\""}],"id":1770,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2662:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2662:62:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1777,"nodeType":"ExpressionStatement","src":"2662:62:7"},{"expression":{"arguments":[{"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2755:46:7","subExpression":{"baseExpression":{"baseExpression":{"id":1779,"name":"spentCommitments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"2756:16:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(bytes32 => bool))"}},"id":1781,"indexExpression":{"id":1780,"name":"electionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"2773:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2756:28:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":1783,"indexExpression":{"id":1782,"name":"voterCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"2785:15:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2756:45:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416c726561647920766f746564","id":1785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2815:15:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6","typeString":"literal_string \"Already voted\""},"value":"Already voted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6","typeString":"literal_string \"Already voted\""}],"id":1778,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2734:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2734:106:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1787,"nodeType":"ExpressionStatement","src":"2734:106:7"},{"expression":{"arguments":[{"arguments":[{"id":1791,"name":"merkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"2943:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"expression":{"id":1792,"name":"election","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"2972:8:7","typeDescriptions":{"typeIdentifier":"t_struct$_Election_$1579_storage_ptr","typeString":"struct VotingGuardian.Election storage pointer"}},"id":1793,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2981:10:7","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":1576,"src":"2972:19:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"id":1797,"name":"voterCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"3036:15:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1795,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3023:12:7","memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1794,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3009:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:44:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1789,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"2907:11:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$1521_$","typeString":"type(library MerkleProof)"}},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2919:6:7","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":477,"src":"2907:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2907:160:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420616e20656c696769626c6520766f746572","id":1801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3081:23:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b","typeString":"literal_string \"Not an eligible voter\""},"value":"Not an eligible voter"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b","typeString":"literal_string \"Not an eligible voter\""}],"id":1788,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2886:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2886:228:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1803,"nodeType":"ExpressionStatement","src":"2886:228:7"},{"expression":{"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1804,"name":"spentCommitments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"3125:16:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(bytes32 => bool))"}},"id":1807,"indexExpression":{"id":1805,"name":"electionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"3142:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3125:28:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":1808,"indexExpression":{"id":1806,"name":"voterCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"3154:15:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3125:45:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3173:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3125:52:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1811,"nodeType":"ExpressionStatement","src":"3125:52:7"},{"eventCall":{"arguments":[{"id":1813,"name":"electionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"3201:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1814,"name":"voterCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"3213:15:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1815,"name":"candidateHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"3230:13:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1812,"name":"VoteCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"3192:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (uint256,bytes32,bytes32)"}},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3192:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1817,"nodeType":"EmitStatement","src":"3187:57:7"}]},"functionSelector":"17386b87","id":1819,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1760,"name":"electionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"2581:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1761,"kind":"modifierInvocation","modifierName":{"id":1759,"name":"validElection","nameLocations":["2567:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":1673,"src":"2567:13:7"},"nodeType":"ModifierInvocation","src":"2567:25:7"}],"name":"castVote","nameLocation":"2346:8:7","nodeType":"FunctionDefinition","parameters":{"id":1758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1750,"mutability":"mutable","name":"electionId","nameLocation":"2372:10:7","nodeType":"VariableDeclaration","scope":1819,"src":"2364:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1749,"name":"uint256","nodeType":"ElementaryTypeName","src":"2364:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1752,"mutability":"mutable","name":"voterCommitment","nameLocation":"2400:15:7","nodeType":"VariableDeclaration","scope":1819,"src":"2392:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1751,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2392:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1754,"mutability":"mutable","name":"candidateHash","nameLocation":"2468:13:7","nodeType":"VariableDeclaration","scope":1819,"src":"2460:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1753,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2460:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1757,"mutability":"mutable","name":"merkleProof","nameLocation":"2510:11:7","nodeType":"VariableDeclaration","scope":1819,"src":"2491:30:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1755,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2491:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1756,"nodeType":"ArrayTypeName","src":"2491:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"2354:203:7"},"returnParameters":{"id":1762,"nodeType":"ParameterList","parameters":[],"src":"2593:0:7"},"scope":1820,"src":"2337:914:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1821,"src":"187:3066:7","usedErrors":[305,308],"usedEvents":[317,326,335,1596,1604]}],"src":"32:3222:7"},"id":7}},"contracts":{"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://928cf2f0042c606f3dcb21bd8a272573f462a215cd65285d2d6b407f31e9bd67\",\"dweb:/ipfs/QmWGxjckno6sfjHPX5naPnsfsyisgy4PJDf46eLw9umfpx\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}"}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC-165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"Hashes":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b66bf6dcab31c139255fde1eecd03ea719c1beed635de0ae2a3d4b07c85591cf64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 PUSH12 0xF6DCAB31C139255FDE1EECD0 RETURNDATACOPY 0xA7 NOT 0xC1 0xBE 0xED PUSH4 0x5DE0AE2A RETURNDATASIZE 0x4B SMOD 0xC8 SSTORE SWAP2 0xCF PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"221:811:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b66bf6dcab31c139255fde1eecd03ea719c1beed635de0ae2a3d4b07c85591cf64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 PUSH12 0xF6DCAB31C139255FDE1EECD0 RETURNDATACOPY 0xA7 NOT 0xC1 0xBE 0xED PUSH4 0x5DE0AE2A RETURNDATASIZE 0x4B SMOD 0xC8 SSTORE SWAP2 0xCF PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"221:811:3:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[{"inputs":[],"name":"MerkleProofInvalidMultiproof","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ae1901d992abdc86968fb5627205ea48fbadc0c9023c476a9e977183b11fedd964736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE NOT ADD 0xD9 SWAP3 0xAB 0xDC DUP7 SWAP7 DUP16 0xB5 PUSH3 0x7205EA BASEFEE 0xFB 0xAD 0xC0 0xC9 MUL EXTCODECOPY SELFBALANCE PUSH11 0x9E977183B11FEDD964736F PUSH13 0x63430008140033000000000000 ","sourceMap":"1353:22982:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ae1901d992abdc86968fb5627205ea48fbadc0c9023c476a9e977183b11fedd964736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE NOT ADD 0xD9 SWAP3 0xAB 0xDC DUP7 SWAP7 DUP16 0xB5 PUSH3 0x7205EA BASEFEE 0xFB 0xAD 0xC0 0xC9 MUL EXTCODECOPY SELFBALANCE PUSH11 0x9E977183B11FEDD964736F PUSH13 0x63430008140033000000000000 ","sourceMap":"1353:22982:4:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}"}},"contracts/Voting.sol":{"VotingGuardian":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"electionId","type":"uint256"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"ElectionCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"electionId","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"voterCommitment","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"candidateHash","type":"bytes32"}],"name":"VoteCast","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"idHash","type":"bytes32"},{"internalType":"uint256","name":"positionId","type":"uint256"}],"name":"addCandidate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"candidates","outputs":[{"internalType":"bytes32","name":"idHash","type":"bytes32"},{"internalType":"uint256","name":"positionId","type":"uint256"},{"internalType":"bool","name":"exists","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"},{"internalType":"bytes32","name":"voterCommitment","type":"bytes32"},{"internalType":"bytes32","name":"candidateHash","type":"bytes32"},{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"castVote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"electionId","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"createElection","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"elections","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"bool","name":"exists","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"spentCommitments","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_1636":{"entryPoint":null,"id":1636,"parameterSlots":0,"returnSlots":0},"@_grantRole_256":{"entryPoint":97,"id":256,"parameterSlots":2,"returnSlots":1},"@_msgSender_390":{"entryPoint":462,"id":390,"parameterSlots":0,"returnSlots":1},"@hasRole_80":{"entryPoint":356,"id":80,"parameterSlots":2,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50620000276000801b336200006160201b60201c565b506200005a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336200006160201b60201c565b50620001d6565b60006200007583836200016460201b60201c565b6200015957600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620000f5620001ce60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506200015e565b600090505b92915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b611d4f80620001e66000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806375b238fc1161008c57806391d148541161006657806391d148541461025f578063a217fddf1461028f578063bd7cab9c146102ad578063d547741f146102dd576100ea565b806375b238fc14610209578063789175b214610227578063840e12f514610243576100ea565b8063248a9ca3116100c8578063248a9ca31461016d5780632f2ff15d1461019d57806336568abe146101b95780635e6fef01146101d5576100ea565b806301ffc9a7146100ef57806317386b871461011f5780631a0478d51461013b575b600080fd5b61010960048036038101906101049190610f98565b6102f9565b6040516101169190610fe0565b60405180910390f35b610139600480360381019061013491906110cc565b610373565b005b61015560048036038101906101509190611154565b610681565b6040516101649392919061119f565b60405180910390f35b61018760048036038101906101829190611154565b6106b8565b60405161019491906111d6565b60405180910390f35b6101b760048036038101906101b2919061124f565b6106d7565b005b6101d360048036038101906101ce919061124f565b6106f9565b005b6101ef60048036038101906101ea919061128f565b610774565b60405161020095949392919061134c565b60405180910390f35b61021161083f565b60405161021e91906111d6565b60405180910390f35b610241600480360381019061023c91906113fc565b610863565b005b61025d60048036038101906102589190611496565b610a10565b005b6102796004803603810190610274919061124f565b610b0b565b6040516102869190610fe0565b60405180910390f35b610297610b75565b6040516102a491906111d6565b60405180910390f35b6102c760048036038101906102c291906114d6565b610b7c565b6040516102d49190610fe0565b60405180910390f35b6102f760048036038101906102f2919061124f565b610bab565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061036c575061036b82610bcd565b5b9050919050565b8460006001600083815260200190815260200160002090508060040160009054906101000a900460ff166103dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d390611562565b60405180910390fd5b8060010154421015610423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041a906115ce565b60405180910390fd5b806002015442111561046a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104619061163a565b60405180910390fd5b60006001600089815260200190815260200160002090506002600087815260200190815260200160002060020160009054906101000a900460ff166104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db906116a6565b60405180910390fd5b60036000898152602001908152602001600020600088815260200190815260200160002060009054906101000a900460ff1615610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90611712565b60405180910390fd5b6105cc858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508260030154896040516020016105b19190611753565b60405160208183030381529060405280519060200120610c37565b61060b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610602906117ba565b60405180910390fd5b6001600360008a8152602001908152602001600020600089815260200190815260200160002060006101000a81548160ff0219169083151502179055508587897f2e82bdc8daf342458c2dc7bf51c3aefd294a3f9d8389e73e35937693b793882e60405160405180910390a45050505050505050565b60026020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16905083565b6000806000838152602001908152602001600020600101549050919050565b6106e0826106b8565b6106e981610c4e565b6106f38383610c62565b50505050565b610701610d53565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610765576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61076f8282610d5b565b505050565b600160205280600052604060002060009150905080600001805461079790611809565b80601f01602080910402602001604051908101604052809291908181526020018280546107c390611809565b80156108105780601f106107e557610100808354040283529160200191610810565b820191906000526020600020905b8154815290600101906020018083116107f357829003601f168201915b5050505050908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561088d81610c4e565b6001600088815260200190815260200160002060040160009054906101000a900460ff16156108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e890611886565b60405180910390fd5b6040518060a0016040528087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001858152602001848152602001838152602001600115158152506001600089815260200190815260200160002060008201518160000190816109879190611a81565b5060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050867fe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d9878787876040516109ff9493929190611b8f565b60405180910390a250505050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610a3a81610c4e565b6002600084815260200190815260200160002060020160009054906101000a900460ff1615610a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9590611c1b565b60405180910390fd5b60405180606001604052808481526020018381526020016001151581525060026000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b610bb4826106b8565b610bbd81610c4e565b610bc78383610d5b565b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600082610c448584610e4d565b1490509392505050565b610c5f81610c5a610d53565b610ea3565b50565b6000610c6e8383610b0b565b610d4857600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610ce5610d53565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050610d4d565b600090505b92915050565b600033905090565b6000610d678383610b0b565b15610e4257600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610ddf610d53565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050610e47565b600090505b92915050565b60008082905060005b8451811015610e9857610e8382868381518110610e7657610e75611c3b565b5b6020026020010151610ef4565b91508080610e9090611c99565b915050610e56565b508091505092915050565b610ead8282610b0b565b610ef05780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401610ee7929190611cf0565b60405180910390fd5b5050565b6000818310610f0c57610f078284610f1f565b610f17565b610f168383610f1f565b5b905092915050565b600082600052816020526040600020905092915050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610f7581610f40565b8114610f8057600080fd5b50565b600081359050610f9281610f6c565b92915050565b600060208284031215610fae57610fad610f36565b5b6000610fbc84828501610f83565b91505092915050565b60008115159050919050565b610fda81610fc5565b82525050565b6000602082019050610ff56000830184610fd1565b92915050565b6000819050919050565b61100e81610ffb565b811461101957600080fd5b50565b60008135905061102b81611005565b92915050565b6000819050919050565b61104481611031565b811461104f57600080fd5b50565b6000813590506110618161103b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261108c5761108b611067565b5b8235905067ffffffffffffffff8111156110a9576110a861106c565b5b6020830191508360208202830111156110c5576110c4611071565b5b9250929050565b6000806000806000608086880312156110e8576110e7610f36565b5b60006110f68882890161101c565b955050602061110788828901611052565b945050604061111888828901611052565b935050606086013567ffffffffffffffff81111561113957611138610f3b565b5b61114588828901611076565b92509250509295509295909350565b60006020828403121561116a57611169610f36565b5b600061117884828501611052565b91505092915050565b61118a81611031565b82525050565b61119981610ffb565b82525050565b60006060820190506111b46000830186611181565b6111c16020830185611190565b6111ce6040830184610fd1565b949350505050565b60006020820190506111eb6000830184611181565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061121c826111f1565b9050919050565b61122c81611211565b811461123757600080fd5b50565b60008135905061124981611223565b92915050565b6000806040838503121561126657611265610f36565b5b600061127485828601611052565b92505060206112858582860161123a565b9150509250929050565b6000602082840312156112a5576112a4610f36565b5b60006112b38482850161101c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112f65780820151818401526020810190506112db565b60008484015250505050565b6000601f19601f8301169050919050565b600061131e826112bc565b61132881856112c7565b93506113388185602086016112d8565b61134181611302565b840191505092915050565b600060a08201905081810360008301526113668188611313565b90506113756020830187611190565b6113826040830186611190565b61138f6060830185611181565b61139c6080830184610fd1565b9695505050505050565b60008083601f8401126113bc576113bb611067565b5b8235905067ffffffffffffffff8111156113d9576113d861106c565b5b6020830191508360018202830111156113f5576113f4611071565b5b9250929050565b60008060008060008060a0878903121561141957611418610f36565b5b600061142789828a0161101c565b965050602087013567ffffffffffffffff81111561144857611447610f3b565b5b61145489828a016113a6565b9550955050604061146789828a0161101c565b935050606061147889828a0161101c565b925050608061148989828a01611052565b9150509295509295509295565b600080604083850312156114ad576114ac610f36565b5b60006114bb85828601611052565b92505060206114cc8582860161101c565b9150509250929050565b600080604083850312156114ed576114ec610f36565b5b60006114fb8582860161101c565b925050602061150c85828601611052565b9150509250929050565b7f496e76616c696420656c656374696f6e00000000000000000000000000000000600082015250565b600061154c6010836112c7565b915061155782611516565b602082019050919050565b6000602082019050818103600083015261157b8161153f565b9050919050565b7f4e6f742073746172746564000000000000000000000000000000000000000000600082015250565b60006115b8600b836112c7565b91506115c382611582565b602082019050919050565b600060208201905081810360008301526115e7816115ab565b9050919050565b7f456e646564000000000000000000000000000000000000000000000000000000600082015250565b60006116246005836112c7565b915061162f826115ee565b602082019050919050565b6000602082019050818103600083015261165381611617565b9050919050565b7f496e76616c69642063616e646964617465000000000000000000000000000000600082015250565b60006116906011836112c7565b915061169b8261165a565b602082019050919050565b600060208201905081810360008301526116bf81611683565b9050919050565b7f416c726561647920766f74656400000000000000000000000000000000000000600082015250565b60006116fc600d836112c7565b9150611707826116c6565b602082019050919050565b6000602082019050818103600083015261172b816116ef565b9050919050565b6000819050919050565b61174d61174882611031565b611732565b82525050565b600061175f828461173c565b60208201915081905092915050565b7f4e6f7420616e20656c696769626c6520766f7465720000000000000000000000600082015250565b60006117a46015836112c7565b91506117af8261176e565b602082019050919050565b600060208201905081810360008301526117d381611797565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061182157607f821691505b602082108103611834576118336117da565b5b50919050565b7f456c656374696f6e206578697374730000000000000000000000000000000000600082015250565b6000611870600f836112c7565b915061187b8261183a565b602082019050919050565b6000602082019050818103600083015261189f81611863565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026119377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826118fa565b61194186836118fa565b95508019841693508086168417925050509392505050565b6000819050919050565b600061197e61197961197484610ffb565b611959565b610ffb565b9050919050565b6000819050919050565b61199883611963565b6119ac6119a482611985565b848454611907565b825550505050565b600090565b6119c16119b4565b6119cc81848461198f565b505050565b5b818110156119f0576119e56000826119b9565b6001810190506119d2565b5050565b601f821115611a3557611a06816118d5565b611a0f846118ea565b81016020851015611a1e578190505b611a32611a2a856118ea565b8301826119d1565b50505b505050565b600082821c905092915050565b6000611a5860001984600802611a3a565b1980831691505092915050565b6000611a718383611a47565b9150826002028217905092915050565b611a8a826112bc565b67ffffffffffffffff811115611aa357611aa26118a6565b5b611aad8254611809565b611ab88282856119f4565b600060209050601f831160018114611aeb5760008415611ad9578287015190505b611ae38582611a65565b865550611b4b565b601f198416611af9866118d5565b60005b82811015611b2157848901518255600182019150602085019450602081019050611afc565b86831015611b3e5784890151611b3a601f891682611a47565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b6000611b6e83856112c7565b9350611b7b838584611b53565b611b8483611302565b840190509392505050565b60006060820190508181036000830152611baa818688611b62565b9050611bb96020830185611190565b611bc66040830184611190565b95945050505050565b7f43616e6469646174652065786973747300000000000000000000000000000000600082015250565b6000611c056010836112c7565b9150611c1082611bcf565b602082019050919050565b60006020820190508181036000830152611c3481611bf8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ca482610ffb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611cd657611cd5611c6a565b5b600182019050919050565b611cea81611211565b82525050565b6000604082019050611d056000830185611ce1565b611d126020830184611181565b939250505056fea264697066735822122048bb1c48fd43ca8ad57e13e687e4ad242b8b3c42e126a579b9665cf6f7c7066964736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x27 PUSH1 0x0 DUP1 SHL CALLER PUSH3 0x61 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x5A PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH3 0x61 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x1D6 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x75 DUP4 DUP4 PUSH3 0x164 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x159 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH3 0xF5 PUSH3 0x1CE PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 POP PUSH3 0x15E JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1D4F DUP1 PUSH3 0x1E6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x91D14854 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0xBD7CAB9C EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2DD JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x75B238FC EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x789175B2 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x840E12F5 EQ PUSH2 0x243 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x248A9CA3 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x5E6FEF01 EQ PUSH2 0x1D5 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x17386B87 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x1A0478D5 EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x109 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x116 SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x155 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0x681 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x164 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x119F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x187 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x194 SWAP2 SWAP1 PUSH2 0x11D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B2 SWAP2 SWAP1 PUSH2 0x124F JUMP JUMPDEST PUSH2 0x6D7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CE SWAP2 SWAP1 PUSH2 0x124F JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EA SWAP2 SWAP1 PUSH2 0x128F JUMP JUMPDEST PUSH2 0x774 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x200 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x134C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x211 PUSH2 0x83F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x11D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x241 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23C SWAP2 SWAP1 PUSH2 0x13FC JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x258 SWAP2 SWAP1 PUSH2 0x1496 JUMP JUMPDEST PUSH2 0xA10 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x279 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x274 SWAP2 SWAP1 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xB0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x286 SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x297 PUSH2 0xB75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A4 SWAP2 SWAP1 PUSH2 0x11D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x14D6 JUMP JUMPDEST PUSH2 0xB7C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D4 SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F2 SWAP2 SWAP1 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xBAB JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x36C JUMPI POP PUSH2 0x36B DUP3 PUSH2 0xBCD JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP5 PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3D3 SWAP1 PUSH2 0x1562 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP1 PUSH2 0x15CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT ISZERO PUSH2 0x46A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x461 SWAP1 PUSH2 0x163A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x2 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DB SWAP1 PUSH2 0x16A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x556 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54D SWAP1 PUSH2 0x1712 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5CC DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP3 PUSH1 0x3 ADD SLOAD DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5B1 SWAP2 SWAP1 PUSH2 0x1753 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x60B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x602 SWAP1 PUSH2 0x17BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP6 DUP8 DUP10 PUSH32 0x2E82BDC8DAF342458C2DC7BF51C3AEFD294A3F9D8389E73E35937693B793882E PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6E0 DUP3 PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x6E9 DUP2 PUSH2 0xC4E JUMP JUMPDEST PUSH2 0x6F3 DUP4 DUP4 PUSH2 0xC62 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x701 PUSH2 0xD53 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x765 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6697B23200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x76F DUP3 DUP3 PUSH2 0xD5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x797 SWAP1 PUSH2 0x1809 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7C3 SWAP1 PUSH2 0x1809 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x810 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7E5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x810 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7F3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP6 JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH2 0x88D DUP2 PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8E8 SWAP1 PUSH2 0x1886 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x1 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SWAP1 DUP2 PUSH2 0x987 SWAP2 SWAP1 PUSH2 0x1A81 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP7 PUSH32 0xE7A0AAE5D733E07E246DEA86213A1AC1B0AA8554BDE889BB75C12752F44E53D9 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x9FF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH2 0xA3A DUP2 PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xA9E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA95 SWAP1 PUSH2 0x1C1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xBB4 DUP3 PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0xBBD DUP2 PUSH2 0xC4E JUMP JUMPDEST PUSH2 0xBC7 DUP4 DUP4 PUSH2 0xD5B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC44 DUP6 DUP5 PUSH2 0xE4D JUMP JUMPDEST EQ SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xC5F DUP2 PUSH2 0xC5A PUSH2 0xD53 JUMP JUMPDEST PUSH2 0xEA3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC6E DUP4 DUP4 PUSH2 0xB0B JUMP JUMPDEST PUSH2 0xD48 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xCE5 PUSH2 0xD53 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 POP PUSH2 0xD4D JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD67 DUP4 DUP4 PUSH2 0xB0B JUMP JUMPDEST ISZERO PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xDDF PUSH2 0xD53 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 POP PUSH2 0xE47 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE98 JUMPI PUSH2 0xE83 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE76 JUMPI PUSH2 0xE75 PUSH2 0x1C3B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xEF4 JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH2 0xE90 SWAP1 PUSH2 0x1C99 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE56 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xEAD DUP3 DUP3 PUSH2 0xB0B JUMP JUMPDEST PUSH2 0xEF0 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH32 0xE2517D3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEE7 SWAP3 SWAP2 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xF0C JUMPI PUSH2 0xF07 DUP3 DUP5 PUSH2 0xF1F JUMP JUMPDEST PUSH2 0xF17 JUMP JUMPDEST PUSH2 0xF16 DUP4 DUP4 PUSH2 0xF1F JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF75 DUP2 PUSH2 0xF40 JUMP JUMPDEST DUP2 EQ PUSH2 0xF80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF92 DUP2 PUSH2 0xF6C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFAE JUMPI PUSH2 0xFAD PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFBC DUP5 DUP3 DUP6 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFDA DUP2 PUSH2 0xFC5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFF5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xFD1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x100E DUP2 PUSH2 0xFFB JUMP JUMPDEST DUP2 EQ PUSH2 0x1019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x102B DUP2 PUSH2 0x1005 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1044 DUP2 PUSH2 0x1031 JUMP JUMPDEST DUP2 EQ PUSH2 0x104F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1061 DUP2 PUSH2 0x103B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x108C JUMPI PUSH2 0x108B PUSH2 0x1067 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A9 JUMPI PUSH2 0x10A8 PUSH2 0x106C JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x10C5 JUMPI PUSH2 0x10C4 PUSH2 0x1071 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x10E8 JUMPI PUSH2 0x10E7 PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10F6 DUP9 DUP3 DUP10 ADD PUSH2 0x101C JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x1107 DUP9 DUP3 DUP10 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x1118 DUP9 DUP3 DUP10 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1139 JUMPI PUSH2 0x1138 PUSH2 0xF3B JUMP JUMPDEST JUMPDEST PUSH2 0x1145 DUP9 DUP3 DUP10 ADD PUSH2 0x1076 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x116A JUMPI PUSH2 0x1169 PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1178 DUP5 DUP3 DUP6 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x118A DUP2 PUSH2 0x1031 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1199 DUP2 PUSH2 0xFFB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x11B4 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1181 JUMP JUMPDEST PUSH2 0x11C1 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1190 JUMP JUMPDEST PUSH2 0x11CE PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xFD1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11EB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1181 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x121C DUP3 PUSH2 0x11F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x122C DUP2 PUSH2 0x1211 JUMP JUMPDEST DUP2 EQ PUSH2 0x1237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1249 DUP2 PUSH2 0x1223 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1266 JUMPI PUSH2 0x1265 PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1274 DUP6 DUP3 DUP7 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1285 DUP6 DUP3 DUP7 ADD PUSH2 0x123A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12A5 JUMPI PUSH2 0x12A4 PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x12B3 DUP5 DUP3 DUP6 ADD PUSH2 0x101C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12F6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x12DB JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x131E DUP3 PUSH2 0x12BC JUMP JUMPDEST PUSH2 0x1328 DUP2 DUP6 PUSH2 0x12C7 JUMP JUMPDEST SWAP4 POP PUSH2 0x1338 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x12D8 JUMP JUMPDEST PUSH2 0x1341 DUP2 PUSH2 0x1302 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1366 DUP2 DUP9 PUSH2 0x1313 JUMP JUMPDEST SWAP1 POP PUSH2 0x1375 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1190 JUMP JUMPDEST PUSH2 0x1382 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x1190 JUMP JUMPDEST PUSH2 0x138F PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1181 JUMP JUMPDEST PUSH2 0x139C PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xFD1 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x13BC JUMPI PUSH2 0x13BB PUSH2 0x1067 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13D9 JUMPI PUSH2 0x13D8 PUSH2 0x106C JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x13F5 JUMPI PUSH2 0x13F4 PUSH2 0x1071 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1419 JUMPI PUSH2 0x1418 PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1427 DUP10 DUP3 DUP11 ADD PUSH2 0x101C JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1448 JUMPI PUSH2 0x1447 PUSH2 0xF3B JUMP JUMPDEST JUMPDEST PUSH2 0x1454 DUP10 DUP3 DUP11 ADD PUSH2 0x13A6 JUMP JUMPDEST SWAP6 POP SWAP6 POP POP PUSH1 0x40 PUSH2 0x1467 DUP10 DUP3 DUP11 ADD PUSH2 0x101C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x1478 DUP10 DUP3 DUP11 ADD PUSH2 0x101C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x1489 DUP10 DUP3 DUP11 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14AD JUMPI PUSH2 0x14AC PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14BB DUP6 DUP3 DUP7 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x14CC DUP6 DUP3 DUP7 ADD PUSH2 0x101C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14ED JUMPI PUSH2 0x14EC PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14FB DUP6 DUP3 DUP7 ADD PUSH2 0x101C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x150C DUP6 DUP3 DUP7 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C696420656C656374696F6E00000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x154C PUSH1 0x10 DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x1557 DUP3 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x157B DUP2 PUSH2 0x153F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E6F742073746172746564000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B8 PUSH1 0xB DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x15C3 DUP3 PUSH2 0x1582 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15E7 DUP2 PUSH2 0x15AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x456E646564000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1624 PUSH1 0x5 DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x162F DUP3 PUSH2 0x15EE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1653 DUP2 PUSH2 0x1617 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C69642063616E646964617465000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1690 PUSH1 0x11 DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x169B DUP3 PUSH2 0x165A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16BF DUP2 PUSH2 0x1683 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416C726561647920766F74656400000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16FC PUSH1 0xD DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x1707 DUP3 PUSH2 0x16C6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x172B DUP2 PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x174D PUSH2 0x1748 DUP3 PUSH2 0x1031 JUMP JUMPDEST PUSH2 0x1732 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x175F DUP3 DUP5 PUSH2 0x173C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E6F7420616E20656C696769626C6520766F7465720000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17A4 PUSH1 0x15 DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x17AF DUP3 PUSH2 0x176E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17D3 DUP2 PUSH2 0x1797 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1821 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1834 JUMPI PUSH2 0x1833 PUSH2 0x17DA JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x456C656374696F6E206578697374730000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1870 PUSH1 0xF DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x187B DUP3 PUSH2 0x183A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x189F DUP2 PUSH2 0x1863 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x1937 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x18FA JUMP JUMPDEST PUSH2 0x1941 DUP7 DUP4 PUSH2 0x18FA JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197E PUSH2 0x1979 PUSH2 0x1974 DUP5 PUSH2 0xFFB JUMP JUMPDEST PUSH2 0x1959 JUMP JUMPDEST PUSH2 0xFFB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1998 DUP4 PUSH2 0x1963 JUMP JUMPDEST PUSH2 0x19AC PUSH2 0x19A4 DUP3 PUSH2 0x1985 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x1907 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x19C1 PUSH2 0x19B4 JUMP JUMPDEST PUSH2 0x19CC DUP2 DUP5 DUP5 PUSH2 0x198F JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x19F0 JUMPI PUSH2 0x19E5 PUSH1 0x0 DUP3 PUSH2 0x19B9 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x19D2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1A35 JUMPI PUSH2 0x1A06 DUP2 PUSH2 0x18D5 JUMP JUMPDEST PUSH2 0x1A0F DUP5 PUSH2 0x18EA JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x1A1E JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x1A32 PUSH2 0x1A2A DUP6 PUSH2 0x18EA JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x19D1 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A58 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x1A3A JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A71 DUP4 DUP4 PUSH2 0x1A47 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1A8A DUP3 PUSH2 0x12BC JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AA3 JUMPI PUSH2 0x1AA2 PUSH2 0x18A6 JUMP JUMPDEST JUMPDEST PUSH2 0x1AAD DUP3 SLOAD PUSH2 0x1809 JUMP JUMPDEST PUSH2 0x1AB8 DUP3 DUP3 DUP6 PUSH2 0x19F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1AEB JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x1AD9 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x1AE3 DUP6 DUP3 PUSH2 0x1A65 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x1B4B JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x1AF9 DUP7 PUSH2 0x18D5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1B21 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1AFC JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x1B3E JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x1B3A PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x1A47 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B6E DUP4 DUP6 PUSH2 0x12C7 JUMP JUMPDEST SWAP4 POP PUSH2 0x1B7B DUP4 DUP6 DUP5 PUSH2 0x1B53 JUMP JUMPDEST PUSH2 0x1B84 DUP4 PUSH2 0x1302 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BAA DUP2 DUP7 DUP9 PUSH2 0x1B62 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BB9 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1190 JUMP JUMPDEST PUSH2 0x1BC6 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1190 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x43616E6469646174652065786973747300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C05 PUSH1 0x10 DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C10 DUP3 PUSH2 0x1BCF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C34 DUP2 PUSH2 0x1BF8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1CA4 DUP3 PUSH2 0xFFB JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1CD6 JUMPI PUSH2 0x1CD5 PUSH2 0x1C6A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CEA DUP2 PUSH2 0x1211 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1D05 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1CE1 JUMP JUMPDEST PUSH2 0x1D12 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1181 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE 0xBB SHR BASEFEE REVERT NUMBER 0xCA DUP11 0xD5 PUSH31 0x13E687E4AD242B8B3C42E126A579B9665CF6F7C7066964736F6C6343000814 STOP CALLER ","sourceMap":"187:3066:7:-:0;;;1115:117;;;;;;;;;;1139:42;2232:4:0;1150:18:7;;1170:10;1139;;;:42;;:::i;:::-;;1191:34;271:23;1214:10;1191;;;:34;;:::i;:::-;;187:3066;;6179:316:0;6256:4;6277:22;6285:4;6291:7;6277;;;:22;;:::i;:::-;6272:217;;6347:4;6315:6;:12;6322:4;6315:12;;;;;;;;;;;:20;;:29;6336:7;6315:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;6397:12;:10;;;:12;;:::i;:::-;6370:40;;6388:7;6370:40;;6382:4;6370:40;;;;;;;;;;6431:4;6424:11;;;;6272:217;6473:5;6466:12;;6179:316;;;;;:::o;2854:136::-;2931:4;2954:6;:12;2961:4;2954:12;;;;;;;;;;;:20;;:29;2975:7;2954:29;;;;;;;;;;;;;;;;;;;;;;;;;2947:36;;2854:136;;;;:::o;656:96:2:-;709:7;735:10;728:17;;656:96;:::o;187:3066:7:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_1568":{"entryPoint":2111,"id":1568,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_29":{"entryPoint":2933,"id":29,"parameterSlots":0,"returnSlots":0},"@_checkRole_114":{"entryPoint":3747,"id":114,"parameterSlots":2,"returnSlots":0},"@_checkRole_93":{"entryPoint":3150,"id":93,"parameterSlots":1,"returnSlots":0},"@_grantRole_256":{"entryPoint":3170,"id":256,"parameterSlots":2,"returnSlots":1},"@_msgSender_390":{"entryPoint":3411,"id":390,"parameterSlots":0,"returnSlots":1},"@_revokeRole_294":{"entryPoint":3419,"id":294,"parameterSlots":2,"returnSlots":1},"@addCandidate_1748":{"entryPoint":2576,"id":1748,"parameterSlots":2,"returnSlots":0},"@candidates_1614":{"entryPoint":1665,"id":1614,"parameterSlots":0,"returnSlots":0},"@castVote_1819":{"entryPoint":883,"id":1819,"parameterSlots":5,"returnSlots":0},"@commutativeKeccak256_435":{"entryPoint":3828,"id":435,"parameterSlots":2,"returnSlots":1},"@createElection_1718":{"entryPoint":2147,"id":1718,"parameterSlots":6,"returnSlots":0},"@efficientKeccak256_447":{"entryPoint":3871,"id":447,"parameterSlots":2,"returnSlots":1},"@elections_1609":{"entryPoint":1908,"id":1609,"parameterSlots":0,"returnSlots":0},"@getRoleAdmin_128":{"entryPoint":1720,"id":128,"parameterSlots":1,"returnSlots":1},"@grantRole_147":{"entryPoint":1751,"id":147,"parameterSlots":2,"returnSlots":0},"@hasRole_80":{"entryPoint":2827,"id":80,"parameterSlots":2,"returnSlots":1},"@processProof_518":{"entryPoint":3661,"id":518,"parameterSlots":2,"returnSlots":1},"@renounceRole_189":{"entryPoint":1785,"id":189,"parameterSlots":2,"returnSlots":0},"@revokeRole_166":{"entryPoint":2987,"id":166,"parameterSlots":2,"returnSlots":0},"@spentCommitments_1620":{"entryPoint":2940,"id":1620,"parameterSlots":0,"returnSlots":0},"@supportsInterface_1544":{"entryPoint":3021,"id":1544,"parameterSlots":1,"returnSlots":1},"@supportsInterface_62":{"entryPoint":761,"id":62,"parameterSlots":1,"returnSlots":1},"@verify_477":{"entryPoint":3127,"id":477,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":4666,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":4214,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_bytes32":{"entryPoint":4178,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":3971,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_calldata_ptr":{"entryPoint":5030,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_uint256":{"entryPoint":4124,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":4436,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":4687,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":5270,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3992,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4751,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_bytes32":{"entryPoint":5334,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_bytes32t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":4300,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_uint256t_string_calldata_ptrt_uint256t_uint256t_bytes32":{"entryPoint":5116,"id":null,"parameterSlots":2,"returnSlots":6},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":7393,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":4049,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":4481,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack":{"entryPoint":5948,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":7010,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":4883,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8_to_t_string_memory_ptr_fromStack":{"entryPoint":5547,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6_to_t_string_memory_ptr_fromStack":{"entryPoint":5871,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1_to_t_string_memory_ptr_fromStack":{"entryPoint":5763,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057_to_t_string_memory_ptr_fromStack":{"entryPoint":5655,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b_to_t_string_memory_ptr_fromStack":{"entryPoint":6039,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1_to_t_string_memory_ptr_fromStack":{"entryPoint":7160,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779_to_t_string_memory_ptr_fromStack":{"entryPoint":6243,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a_to_t_string_memory_ptr_fromStack":{"entryPoint":5439,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":4496,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":5971,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":7408,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":4064,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":4566,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_bool__to_t_bytes32_t_uint256_t_bool__fromStack_reversed":{"entryPoint":4511,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_uint256__to_t_string_memory_ptr_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":7055,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_uint256_t_uint256_t_bytes32_t_bool__to_t_string_memory_ptr_t_uint256_t_uint256_t_bytes32_t_bool__fromStack_reversed":{"entryPoint":4940,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5582,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5906,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5798,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5690,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6074,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7195,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6278,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5474,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":6357,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":4796,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":4807,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":6644,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":4625,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":4037,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":4145,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":3904,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":4593,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4091,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":6609,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":6499,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":6785,"id":null,"parameterSlots":2,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":6995,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":4824,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":6378,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":6153,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":6757,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":6489,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":7321,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes32":{"entryPoint":5938,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":6727,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":7274,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":6106,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":7227,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6310,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":6533,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":4204,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":4199,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":4209,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":3899,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3894,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":4866,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":6394,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":6714,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":6585,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8":{"entryPoint":5506,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6":{"entryPoint":5830,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1":{"entryPoint":5722,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057":{"entryPoint":5614,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b":{"entryPoint":5998,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1":{"entryPoint":7119,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779":{"entryPoint":6202,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a":{"entryPoint":5398,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":6407,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":6543,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":4643,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":4155,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":3948,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":4101,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":6580,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:26596:8","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:8","statements":[{"nodeType":"YulAssignment","src":"57:19:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:8","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:8"},"nodeType":"YulFunctionCall","src":"67:9:8"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:8"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:8","type":""}],"src":"7:75:8"},{"body":{"nodeType":"YulBlock","src":"177:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:8"},"nodeType":"YulFunctionCall","src":"187:12:8"},"nodeType":"YulExpressionStatement","src":"187:12:8"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:8"},{"body":{"nodeType":"YulBlock","src":"300:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:8"},"nodeType":"YulFunctionCall","src":"310:12:8"},"nodeType":"YulExpressionStatement","src":"310:12:8"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:8"},{"body":{"nodeType":"YulBlock","src":"378:105:8","statements":[{"nodeType":"YulAssignment","src":"388:89:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:8","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:8"},"nodeType":"YulFunctionCall","src":"399:78:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:8"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:8","type":""}],"src":"334:149:8"},{"body":{"nodeType":"YulBlock","src":"531:78:8","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:8"},"nodeType":"YulFunctionCall","src":"589:12:8"},"nodeType":"YulExpressionStatement","src":"589:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:8"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:8"},"nodeType":"YulFunctionCall","src":"561:23:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:8"},"nodeType":"YulFunctionCall","src":"551:34:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:8"},"nodeType":"YulFunctionCall","src":"544:42:8"},"nodeType":"YulIf","src":"541:62:8"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:8","type":""}],"src":"489:120:8"},{"body":{"nodeType":"YulBlock","src":"666:86:8","statements":[{"nodeType":"YulAssignment","src":"676:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:8"},"nodeType":"YulFunctionCall","src":"685:20:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:8"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:8"},"nodeType":"YulFunctionCall","src":"714:32:8"},"nodeType":"YulExpressionStatement","src":"714:32:8"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:8","type":""}],"src":"615:137:8"},{"body":{"nodeType":"YulBlock","src":"823:262:8","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:8"},"nodeType":"YulFunctionCall","src":"871:79:8"},"nodeType":"YulExpressionStatement","src":"871:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:8"},"nodeType":"YulFunctionCall","src":"840:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:8"},"nodeType":"YulFunctionCall","src":"836:32:8"},"nodeType":"YulIf","src":"833:119:8"},{"nodeType":"YulBlock","src":"962:116:8","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:8","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:8"},"nodeType":"YulFunctionCall","src":"1036:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:8"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:8"},"nodeType":"YulFunctionCall","src":"1016:52:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:8"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:8","type":""}],"src":"758:327:8"},{"body":{"nodeType":"YulBlock","src":"1133:48:8","statements":[{"nodeType":"YulAssignment","src":"1143:32:8","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:8"},"nodeType":"YulFunctionCall","src":"1161:13:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:8"},"nodeType":"YulFunctionCall","src":"1154:21:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:8"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:8","type":""}],"src":"1091:90:8"},{"body":{"nodeType":"YulBlock","src":"1246:50:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:8"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:8"},"nodeType":"YulFunctionCall","src":"1268:21:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:8"},"nodeType":"YulFunctionCall","src":"1256:34:8"},"nodeType":"YulExpressionStatement","src":"1256:34:8"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:8","type":""}],"src":"1187:109:8"},{"body":{"nodeType":"YulBlock","src":"1394:118:8","statements":[{"nodeType":"YulAssignment","src":"1404:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:8"},"nodeType":"YulFunctionCall","src":"1412:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:8"},"nodeType":"YulFunctionCall","src":"1487:17:8"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:8"},"nodeType":"YulFunctionCall","src":"1440:65:8"},"nodeType":"YulExpressionStatement","src":"1440:65:8"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:8","type":""}],"src":"1302:210:8"},{"body":{"nodeType":"YulBlock","src":"1563:32:8","statements":[{"nodeType":"YulAssignment","src":"1573:16:8","value":{"name":"value","nodeType":"YulIdentifier","src":"1584:5:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:8"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:8","type":""}],"src":"1518:77:8"},{"body":{"nodeType":"YulBlock","src":"1644:79:8","statements":[{"body":{"nodeType":"YulBlock","src":"1701:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:8"},"nodeType":"YulFunctionCall","src":"1703:12:8"},"nodeType":"YulExpressionStatement","src":"1703:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1667:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1692:5:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1674:17:8"},"nodeType":"YulFunctionCall","src":"1674:24:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1664:2:8"},"nodeType":"YulFunctionCall","src":"1664:35:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1657:6:8"},"nodeType":"YulFunctionCall","src":"1657:43:8"},"nodeType":"YulIf","src":"1654:63:8"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1637:5:8","type":""}],"src":"1601:122:8"},{"body":{"nodeType":"YulBlock","src":"1781:87:8","statements":[{"nodeType":"YulAssignment","src":"1791:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1813:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1800:12:8"},"nodeType":"YulFunctionCall","src":"1800:20:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1856:5:8"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1829:26:8"},"nodeType":"YulFunctionCall","src":"1829:33:8"},"nodeType":"YulExpressionStatement","src":"1829:33:8"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1759:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"1767:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:8","type":""}],"src":"1729:139:8"},{"body":{"nodeType":"YulBlock","src":"1919:32:8","statements":[{"nodeType":"YulAssignment","src":"1929:16:8","value":{"name":"value","nodeType":"YulIdentifier","src":"1940:5:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1929:7:8"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1901:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1911:7:8","type":""}],"src":"1874:77:8"},{"body":{"nodeType":"YulBlock","src":"2000:79:8","statements":[{"body":{"nodeType":"YulBlock","src":"2057:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2066:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2069:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2059:6:8"},"nodeType":"YulFunctionCall","src":"2059:12:8"},"nodeType":"YulExpressionStatement","src":"2059:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2023:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2048:5:8"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2030:17:8"},"nodeType":"YulFunctionCall","src":"2030:24:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2020:2:8"},"nodeType":"YulFunctionCall","src":"2020:35:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2013:6:8"},"nodeType":"YulFunctionCall","src":"2013:43:8"},"nodeType":"YulIf","src":"2010:63:8"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1993:5:8","type":""}],"src":"1957:122:8"},{"body":{"nodeType":"YulBlock","src":"2137:87:8","statements":[{"nodeType":"YulAssignment","src":"2147:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2169:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2156:12:8"},"nodeType":"YulFunctionCall","src":"2156:20:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2147:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2212:5:8"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"2185:26:8"},"nodeType":"YulFunctionCall","src":"2185:33:8"},"nodeType":"YulExpressionStatement","src":"2185:33:8"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2115:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"2123:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2131:5:8","type":""}],"src":"2085:139:8"},{"body":{"nodeType":"YulBlock","src":"2319:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2336:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2339:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2329:6:8"},"nodeType":"YulFunctionCall","src":"2329:12:8"},"nodeType":"YulExpressionStatement","src":"2329:12:8"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"2230:117:8"},{"body":{"nodeType":"YulBlock","src":"2442:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2459:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2462:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2452:6:8"},"nodeType":"YulFunctionCall","src":"2452:12:8"},"nodeType":"YulExpressionStatement","src":"2452:12:8"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"2353:117:8"},{"body":{"nodeType":"YulBlock","src":"2565:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2582:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2585:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2575:6:8"},"nodeType":"YulFunctionCall","src":"2575:12:8"},"nodeType":"YulExpressionStatement","src":"2575:12:8"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"2476:117:8"},{"body":{"nodeType":"YulBlock","src":"2706:478:8","statements":[{"body":{"nodeType":"YulBlock","src":"2755:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2757:77:8"},"nodeType":"YulFunctionCall","src":"2757:79:8"},"nodeType":"YulExpressionStatement","src":"2757:79:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2734:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"2742:4:8","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2730:3:8"},"nodeType":"YulFunctionCall","src":"2730:17:8"},{"name":"end","nodeType":"YulIdentifier","src":"2749:3:8"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2726:3:8"},"nodeType":"YulFunctionCall","src":"2726:27:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2719:6:8"},"nodeType":"YulFunctionCall","src":"2719:35:8"},"nodeType":"YulIf","src":"2716:122:8"},{"nodeType":"YulAssignment","src":"2847:30:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2870:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2857:12:8"},"nodeType":"YulFunctionCall","src":"2857:20:8"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2847:6:8"}]},{"body":{"nodeType":"YulBlock","src":"2920:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"2922:77:8"},"nodeType":"YulFunctionCall","src":"2922:79:8"},"nodeType":"YulExpressionStatement","src":"2922:79:8"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2892:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"2900:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2889:2:8"},"nodeType":"YulFunctionCall","src":"2889:30:8"},"nodeType":"YulIf","src":"2886:117:8"},{"nodeType":"YulAssignment","src":"3012:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3028:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"3036:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3024:3:8"},"nodeType":"YulFunctionCall","src":"3024:17:8"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"3012:8:8"}]},{"body":{"nodeType":"YulBlock","src":"3095:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"3097:77:8"},"nodeType":"YulFunctionCall","src":"3097:79:8"},"nodeType":"YulExpressionStatement","src":"3097:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"3060:8:8"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3074:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"3082:4:8","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3070:3:8"},"nodeType":"YulFunctionCall","src":"3070:17:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3056:3:8"},"nodeType":"YulFunctionCall","src":"3056:32:8"},{"name":"end","nodeType":"YulIdentifier","src":"3090:3:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3053:2:8"},"nodeType":"YulFunctionCall","src":"3053:41:8"},"nodeType":"YulIf","src":"3050:128:8"}]},"name":"abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2673:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"2681:3:8","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"2689:8:8","type":""},{"name":"length","nodeType":"YulTypedName","src":"2699:6:8","type":""}],"src":"2616:568:8"},{"body":{"nodeType":"YulBlock","src":"3342:843:8","statements":[{"body":{"nodeType":"YulBlock","src":"3389:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3391:77:8"},"nodeType":"YulFunctionCall","src":"3391:79:8"},"nodeType":"YulExpressionStatement","src":"3391:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3363:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"3372:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3359:3:8"},"nodeType":"YulFunctionCall","src":"3359:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"3384:3:8","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3355:3:8"},"nodeType":"YulFunctionCall","src":"3355:33:8"},"nodeType":"YulIf","src":"3352:120:8"},{"nodeType":"YulBlock","src":"3482:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"3497:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"3511:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3501:6:8","type":""}]},{"nodeType":"YulAssignment","src":"3526:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3561:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"3572:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3557:3:8"},"nodeType":"YulFunctionCall","src":"3557:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3581:7:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3536:20:8"},"nodeType":"YulFunctionCall","src":"3536:53:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3526:6:8"}]}]},{"nodeType":"YulBlock","src":"3609:118:8","statements":[{"nodeType":"YulVariableDeclaration","src":"3624:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"3638:2:8","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3628:6:8","type":""}]},{"nodeType":"YulAssignment","src":"3654:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3689:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"3700:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3685:3:8"},"nodeType":"YulFunctionCall","src":"3685:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3709:7:8"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3664:20:8"},"nodeType":"YulFunctionCall","src":"3664:53:8"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3654:6:8"}]}]},{"nodeType":"YulBlock","src":"3737:118:8","statements":[{"nodeType":"YulVariableDeclaration","src":"3752:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"3766:2:8","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3756:6:8","type":""}]},{"nodeType":"YulAssignment","src":"3782:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3817:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"3828:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3813:3:8"},"nodeType":"YulFunctionCall","src":"3813:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3837:7:8"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3792:20:8"},"nodeType":"YulFunctionCall","src":"3792:53:8"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3782:6:8"}]}]},{"nodeType":"YulBlock","src":"3865:313:8","statements":[{"nodeType":"YulVariableDeclaration","src":"3880:46:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3911:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"3922:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3907:3:8"},"nodeType":"YulFunctionCall","src":"3907:18:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3894:12:8"},"nodeType":"YulFunctionCall","src":"3894:32:8"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3884:6:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"3973:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3975:77:8"},"nodeType":"YulFunctionCall","src":"3975:79:8"},"nodeType":"YulExpressionStatement","src":"3975:79:8"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3945:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"3953:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3942:2:8"},"nodeType":"YulFunctionCall","src":"3942:30:8"},"nodeType":"YulIf","src":"3939:117:8"},{"nodeType":"YulAssignment","src":"4070:98:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4140:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"4151:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4136:3:8"},"nodeType":"YulFunctionCall","src":"4136:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4160:7:8"}],"functionName":{"name":"abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"4088:47:8"},"nodeType":"YulFunctionCall","src":"4088:80:8"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4070:6:8"},{"name":"value4","nodeType":"YulIdentifier","src":"4078:6:8"}]}]}]},"name":"abi_decode_tuple_t_uint256t_bytes32t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3280:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3291:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3303:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3311:6:8","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3319:6:8","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3327:6:8","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3335:6:8","type":""}],"src":"3190:995:8"},{"body":{"nodeType":"YulBlock","src":"4257:263:8","statements":[{"body":{"nodeType":"YulBlock","src":"4303:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4305:77:8"},"nodeType":"YulFunctionCall","src":"4305:79:8"},"nodeType":"YulExpressionStatement","src":"4305:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4278:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"4287:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4274:3:8"},"nodeType":"YulFunctionCall","src":"4274:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"4299:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4270:3:8"},"nodeType":"YulFunctionCall","src":"4270:32:8"},"nodeType":"YulIf","src":"4267:119:8"},{"nodeType":"YulBlock","src":"4396:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"4411:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"4425:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4415:6:8","type":""}]},{"nodeType":"YulAssignment","src":"4440:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4475:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"4486:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4471:3:8"},"nodeType":"YulFunctionCall","src":"4471:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4495:7:8"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4450:20:8"},"nodeType":"YulFunctionCall","src":"4450:53:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4440:6:8"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4227:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4238:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4250:6:8","type":""}],"src":"4191:329:8"},{"body":{"nodeType":"YulBlock","src":"4591:53:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4608:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4631:5:8"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"4613:17:8"},"nodeType":"YulFunctionCall","src":"4613:24:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4601:6:8"},"nodeType":"YulFunctionCall","src":"4601:37:8"},"nodeType":"YulExpressionStatement","src":"4601:37:8"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4579:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4586:3:8","type":""}],"src":"4526:118:8"},{"body":{"nodeType":"YulBlock","src":"4715:53:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4732:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4755:5:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4737:17:8"},"nodeType":"YulFunctionCall","src":"4737:24:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4725:6:8"},"nodeType":"YulFunctionCall","src":"4725:37:8"},"nodeType":"YulExpressionStatement","src":"4725:37:8"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4703:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4710:3:8","type":""}],"src":"4650:118:8"},{"body":{"nodeType":"YulBlock","src":"4922:282:8","statements":[{"nodeType":"YulAssignment","src":"4932:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4944:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"4955:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4940:3:8"},"nodeType":"YulFunctionCall","src":"4940:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4932:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5012:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5025:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"5036:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5021:3:8"},"nodeType":"YulFunctionCall","src":"5021:17:8"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"4968:43:8"},"nodeType":"YulFunctionCall","src":"4968:71:8"},"nodeType":"YulExpressionStatement","src":"4968:71:8"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5093:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5106:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"5117:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5102:3:8"},"nodeType":"YulFunctionCall","src":"5102:18:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"5049:43:8"},"nodeType":"YulFunctionCall","src":"5049:72:8"},"nodeType":"YulExpressionStatement","src":"5049:72:8"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"5169:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5182:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"5193:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5178:3:8"},"nodeType":"YulFunctionCall","src":"5178:18:8"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"5131:37:8"},"nodeType":"YulFunctionCall","src":"5131:66:8"},"nodeType":"YulExpressionStatement","src":"5131:66:8"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_bool__to_t_bytes32_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4878:9:8","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4890:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4898:6:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4906:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4917:4:8","type":""}],"src":"4774:430:8"},{"body":{"nodeType":"YulBlock","src":"5308:124:8","statements":[{"nodeType":"YulAssignment","src":"5318:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5330:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"5341:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5326:3:8"},"nodeType":"YulFunctionCall","src":"5326:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5318:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5398:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5411:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"5422:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5407:3:8"},"nodeType":"YulFunctionCall","src":"5407:17:8"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"5354:43:8"},"nodeType":"YulFunctionCall","src":"5354:71:8"},"nodeType":"YulExpressionStatement","src":"5354:71:8"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5280:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5292:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5303:4:8","type":""}],"src":"5210:222:8"},{"body":{"nodeType":"YulBlock","src":"5483:81:8","statements":[{"nodeType":"YulAssignment","src":"5493:65:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5508:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"5515:42:8","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5504:3:8"},"nodeType":"YulFunctionCall","src":"5504:54:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5493:7:8"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5465:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5475:7:8","type":""}],"src":"5438:126:8"},{"body":{"nodeType":"YulBlock","src":"5615:51:8","statements":[{"nodeType":"YulAssignment","src":"5625:35:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5654:5:8"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5636:17:8"},"nodeType":"YulFunctionCall","src":"5636:24:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5625:7:8"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5597:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5607:7:8","type":""}],"src":"5570:96:8"},{"body":{"nodeType":"YulBlock","src":"5715:79:8","statements":[{"body":{"nodeType":"YulBlock","src":"5772:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5781:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5784:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5774:6:8"},"nodeType":"YulFunctionCall","src":"5774:12:8"},"nodeType":"YulExpressionStatement","src":"5774:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5738:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5763:5:8"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5745:17:8"},"nodeType":"YulFunctionCall","src":"5745:24:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5735:2:8"},"nodeType":"YulFunctionCall","src":"5735:35:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5728:6:8"},"nodeType":"YulFunctionCall","src":"5728:43:8"},"nodeType":"YulIf","src":"5725:63:8"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5708:5:8","type":""}],"src":"5672:122:8"},{"body":{"nodeType":"YulBlock","src":"5852:87:8","statements":[{"nodeType":"YulAssignment","src":"5862:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5884:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5871:12:8"},"nodeType":"YulFunctionCall","src":"5871:20:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5862:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5927:5:8"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"5900:26:8"},"nodeType":"YulFunctionCall","src":"5900:33:8"},"nodeType":"YulExpressionStatement","src":"5900:33:8"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5830:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"5838:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5846:5:8","type":""}],"src":"5800:139:8"},{"body":{"nodeType":"YulBlock","src":"6028:391:8","statements":[{"body":{"nodeType":"YulBlock","src":"6074:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6076:77:8"},"nodeType":"YulFunctionCall","src":"6076:79:8"},"nodeType":"YulExpressionStatement","src":"6076:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6049:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"6058:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6045:3:8"},"nodeType":"YulFunctionCall","src":"6045:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"6070:2:8","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6041:3:8"},"nodeType":"YulFunctionCall","src":"6041:32:8"},"nodeType":"YulIf","src":"6038:119:8"},{"nodeType":"YulBlock","src":"6167:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"6182:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"6196:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6186:6:8","type":""}]},{"nodeType":"YulAssignment","src":"6211:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6246:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"6257:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6242:3:8"},"nodeType":"YulFunctionCall","src":"6242:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6266:7:8"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6221:20:8"},"nodeType":"YulFunctionCall","src":"6221:53:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6211:6:8"}]}]},{"nodeType":"YulBlock","src":"6294:118:8","statements":[{"nodeType":"YulVariableDeclaration","src":"6309:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"6323:2:8","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6313:6:8","type":""}]},{"nodeType":"YulAssignment","src":"6339:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6374:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"6385:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6370:3:8"},"nodeType":"YulFunctionCall","src":"6370:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6394:7:8"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6349:20:8"},"nodeType":"YulFunctionCall","src":"6349:53:8"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6339:6:8"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5990:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6001:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6013:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6021:6:8","type":""}],"src":"5945:474:8"},{"body":{"nodeType":"YulBlock","src":"6491:263:8","statements":[{"body":{"nodeType":"YulBlock","src":"6537:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6539:77:8"},"nodeType":"YulFunctionCall","src":"6539:79:8"},"nodeType":"YulExpressionStatement","src":"6539:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6512:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"6521:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6508:3:8"},"nodeType":"YulFunctionCall","src":"6508:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"6533:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6504:3:8"},"nodeType":"YulFunctionCall","src":"6504:32:8"},"nodeType":"YulIf","src":"6501:119:8"},{"nodeType":"YulBlock","src":"6630:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"6645:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"6659:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6649:6:8","type":""}]},{"nodeType":"YulAssignment","src":"6674:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6709:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"6720:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6705:3:8"},"nodeType":"YulFunctionCall","src":"6705:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6729:7:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6684:20:8"},"nodeType":"YulFunctionCall","src":"6684:53:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6674:6:8"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6461:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6472:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6484:6:8","type":""}],"src":"6425:329:8"},{"body":{"nodeType":"YulBlock","src":"6819:40:8","statements":[{"nodeType":"YulAssignment","src":"6830:22:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6846:5:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6840:5:8"},"nodeType":"YulFunctionCall","src":"6840:12:8"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6830:6:8"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6802:5:8","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6812:6:8","type":""}],"src":"6760:99:8"},{"body":{"nodeType":"YulBlock","src":"6961:73:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6978:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"6983:6:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6971:6:8"},"nodeType":"YulFunctionCall","src":"6971:19:8"},"nodeType":"YulExpressionStatement","src":"6971:19:8"},{"nodeType":"YulAssignment","src":"6999:29:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7018:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"7023:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7014:3:8"},"nodeType":"YulFunctionCall","src":"7014:14:8"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6999:11:8"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6933:3:8","type":""},{"name":"length","nodeType":"YulTypedName","src":"6938:6:8","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6949:11:8","type":""}],"src":"6865:169:8"},{"body":{"nodeType":"YulBlock","src":"7102:184:8","statements":[{"nodeType":"YulVariableDeclaration","src":"7112:10:8","value":{"kind":"number","nodeType":"YulLiteral","src":"7121:1:8","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7116:1:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"7181:63:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7206:3:8"},{"name":"i","nodeType":"YulIdentifier","src":"7211:1:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7202:3:8"},"nodeType":"YulFunctionCall","src":"7202:11:8"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7225:3:8"},{"name":"i","nodeType":"YulIdentifier","src":"7230:1:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7221:3:8"},"nodeType":"YulFunctionCall","src":"7221:11:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7215:5:8"},"nodeType":"YulFunctionCall","src":"7215:18:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7195:6:8"},"nodeType":"YulFunctionCall","src":"7195:39:8"},"nodeType":"YulExpressionStatement","src":"7195:39:8"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7142:1:8"},{"name":"length","nodeType":"YulIdentifier","src":"7145:6:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7139:2:8"},"nodeType":"YulFunctionCall","src":"7139:13:8"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7153:19:8","statements":[{"nodeType":"YulAssignment","src":"7155:15:8","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7164:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"7167:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7160:3:8"},"nodeType":"YulFunctionCall","src":"7160:10:8"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7155:1:8"}]}]},"pre":{"nodeType":"YulBlock","src":"7135:3:8","statements":[]},"src":"7131:113:8"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7264:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"7269:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7260:3:8"},"nodeType":"YulFunctionCall","src":"7260:16:8"},{"kind":"number","nodeType":"YulLiteral","src":"7278:1:8","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7253:6:8"},"nodeType":"YulFunctionCall","src":"7253:27:8"},"nodeType":"YulExpressionStatement","src":"7253:27:8"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7084:3:8","type":""},{"name":"dst","nodeType":"YulTypedName","src":"7089:3:8","type":""},{"name":"length","nodeType":"YulTypedName","src":"7094:6:8","type":""}],"src":"7040:246:8"},{"body":{"nodeType":"YulBlock","src":"7340:54:8","statements":[{"nodeType":"YulAssignment","src":"7350:38:8","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7368:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"7375:2:8","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7364:3:8"},"nodeType":"YulFunctionCall","src":"7364:14:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7384:2:8","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7380:3:8"},"nodeType":"YulFunctionCall","src":"7380:7:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7360:3:8"},"nodeType":"YulFunctionCall","src":"7360:28:8"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"7350:6:8"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7323:5:8","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"7333:6:8","type":""}],"src":"7292:102:8"},{"body":{"nodeType":"YulBlock","src":"7492:285:8","statements":[{"nodeType":"YulVariableDeclaration","src":"7502:53:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7549:5:8"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7516:32:8"},"nodeType":"YulFunctionCall","src":"7516:39:8"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7506:6:8","type":""}]},{"nodeType":"YulAssignment","src":"7564:78:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7630:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"7635:6:8"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7571:58:8"},"nodeType":"YulFunctionCall","src":"7571:71:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7564:3:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7690:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"7697:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7686:3:8"},"nodeType":"YulFunctionCall","src":"7686:16:8"},{"name":"pos","nodeType":"YulIdentifier","src":"7704:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"7709:6:8"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7651:34:8"},"nodeType":"YulFunctionCall","src":"7651:65:8"},"nodeType":"YulExpressionStatement","src":"7651:65:8"},{"nodeType":"YulAssignment","src":"7725:46:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7736:3:8"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7763:6:8"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7741:21:8"},"nodeType":"YulFunctionCall","src":"7741:29:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7732:3:8"},"nodeType":"YulFunctionCall","src":"7732:39:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7725:3:8"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7473:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7480:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7488:3:8","type":""}],"src":"7400:377:8"},{"body":{"nodeType":"YulBlock","src":"8007:519:8","statements":[{"nodeType":"YulAssignment","src":"8017:27:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8029:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8040:3:8","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8025:3:8"},"nodeType":"YulFunctionCall","src":"8025:19:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8017:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8065:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8076:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8061:3:8"},"nodeType":"YulFunctionCall","src":"8061:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8084:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"8090:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8080:3:8"},"nodeType":"YulFunctionCall","src":"8080:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8054:6:8"},"nodeType":"YulFunctionCall","src":"8054:47:8"},"nodeType":"YulExpressionStatement","src":"8054:47:8"},{"nodeType":"YulAssignment","src":"8110:86:8","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8182:6:8"},{"name":"tail","nodeType":"YulIdentifier","src":"8191:4:8"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8118:63:8"},"nodeType":"YulFunctionCall","src":"8118:78:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8110:4:8"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8250:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8263:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8274:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8259:3:8"},"nodeType":"YulFunctionCall","src":"8259:18:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8206:43:8"},"nodeType":"YulFunctionCall","src":"8206:72:8"},"nodeType":"YulExpressionStatement","src":"8206:72:8"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8332:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8345:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8356:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8341:3:8"},"nodeType":"YulFunctionCall","src":"8341:18:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8288:43:8"},"nodeType":"YulFunctionCall","src":"8288:72:8"},"nodeType":"YulExpressionStatement","src":"8288:72:8"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"8414:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8427:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8438:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8423:3:8"},"nodeType":"YulFunctionCall","src":"8423:18:8"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8370:43:8"},"nodeType":"YulFunctionCall","src":"8370:72:8"},"nodeType":"YulExpressionStatement","src":"8370:72:8"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"8490:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8503:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8514:3:8","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8499:3:8"},"nodeType":"YulFunctionCall","src":"8499:19:8"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"8452:37:8"},"nodeType":"YulFunctionCall","src":"8452:67:8"},"nodeType":"YulExpressionStatement","src":"8452:67:8"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_uint256_t_uint256_t_bytes32_t_bool__to_t_string_memory_ptr_t_uint256_t_uint256_t_bytes32_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7947:9:8","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7959:6:8","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7967:6:8","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7975:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7983:6:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7991:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8002:4:8","type":""}],"src":"7783:743:8"},{"body":{"nodeType":"YulBlock","src":"8621:478:8","statements":[{"body":{"nodeType":"YulBlock","src":"8670:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8672:77:8"},"nodeType":"YulFunctionCall","src":"8672:79:8"},"nodeType":"YulExpressionStatement","src":"8672:79:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8649:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"8657:4:8","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8645:3:8"},"nodeType":"YulFunctionCall","src":"8645:17:8"},{"name":"end","nodeType":"YulIdentifier","src":"8664:3:8"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8641:3:8"},"nodeType":"YulFunctionCall","src":"8641:27:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8634:6:8"},"nodeType":"YulFunctionCall","src":"8634:35:8"},"nodeType":"YulIf","src":"8631:122:8"},{"nodeType":"YulAssignment","src":"8762:30:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8785:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8772:12:8"},"nodeType":"YulFunctionCall","src":"8772:20:8"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8762:6:8"}]},{"body":{"nodeType":"YulBlock","src":"8835:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"8837:77:8"},"nodeType":"YulFunctionCall","src":"8837:79:8"},"nodeType":"YulExpressionStatement","src":"8837:79:8"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8807:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"8815:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8804:2:8"},"nodeType":"YulFunctionCall","src":"8804:30:8"},"nodeType":"YulIf","src":"8801:117:8"},{"nodeType":"YulAssignment","src":"8927:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8943:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"8951:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8939:3:8"},"nodeType":"YulFunctionCall","src":"8939:17:8"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"8927:8:8"}]},{"body":{"nodeType":"YulBlock","src":"9010:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"9012:77:8"},"nodeType":"YulFunctionCall","src":"9012:79:8"},"nodeType":"YulExpressionStatement","src":"9012:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"8975:8:8"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8989:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"8997:4:8","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8985:3:8"},"nodeType":"YulFunctionCall","src":"8985:17:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8971:3:8"},"nodeType":"YulFunctionCall","src":"8971:32:8"},{"name":"end","nodeType":"YulIdentifier","src":"9005:3:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8968:2:8"},"nodeType":"YulFunctionCall","src":"8968:41:8"},"nodeType":"YulIf","src":"8965:128:8"}]},"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8588:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"8596:3:8","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"8604:8:8","type":""},{"name":"length","nodeType":"YulTypedName","src":"8614:6:8","type":""}],"src":"8546:553:8"},{"body":{"nodeType":"YulBlock","src":"9259:957:8","statements":[{"body":{"nodeType":"YulBlock","src":"9306:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9308:77:8"},"nodeType":"YulFunctionCall","src":"9308:79:8"},"nodeType":"YulExpressionStatement","src":"9308:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9280:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"9289:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9276:3:8"},"nodeType":"YulFunctionCall","src":"9276:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"9301:3:8","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9272:3:8"},"nodeType":"YulFunctionCall","src":"9272:33:8"},"nodeType":"YulIf","src":"9269:120:8"},{"nodeType":"YulBlock","src":"9399:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"9414:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"9428:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9418:6:8","type":""}]},{"nodeType":"YulAssignment","src":"9443:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9478:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"9489:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9474:3:8"},"nodeType":"YulFunctionCall","src":"9474:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9498:7:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9453:20:8"},"nodeType":"YulFunctionCall","src":"9453:53:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9443:6:8"}]}]},{"nodeType":"YulBlock","src":"9526:298:8","statements":[{"nodeType":"YulVariableDeclaration","src":"9541:46:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9572:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"9583:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9568:3:8"},"nodeType":"YulFunctionCall","src":"9568:18:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9555:12:8"},"nodeType":"YulFunctionCall","src":"9555:32:8"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9545:6:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"9634:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9636:77:8"},"nodeType":"YulFunctionCall","src":"9636:79:8"},"nodeType":"YulExpressionStatement","src":"9636:79:8"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9606:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"9614:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9603:2:8"},"nodeType":"YulFunctionCall","src":"9603:30:8"},"nodeType":"YulIf","src":"9600:117:8"},{"nodeType":"YulAssignment","src":"9731:83:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9786:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"9797:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9782:3:8"},"nodeType":"YulFunctionCall","src":"9782:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9806:7:8"}],"functionName":{"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulIdentifier","src":"9749:32:8"},"nodeType":"YulFunctionCall","src":"9749:65:8"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9731:6:8"},{"name":"value2","nodeType":"YulIdentifier","src":"9739:6:8"}]}]},{"nodeType":"YulBlock","src":"9834:118:8","statements":[{"nodeType":"YulVariableDeclaration","src":"9849:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"9863:2:8","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9853:6:8","type":""}]},{"nodeType":"YulAssignment","src":"9879:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9914:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"9925:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9910:3:8"},"nodeType":"YulFunctionCall","src":"9910:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9934:7:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9889:20:8"},"nodeType":"YulFunctionCall","src":"9889:53:8"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9879:6:8"}]}]},{"nodeType":"YulBlock","src":"9962:118:8","statements":[{"nodeType":"YulVariableDeclaration","src":"9977:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"9991:2:8","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9981:6:8","type":""}]},{"nodeType":"YulAssignment","src":"10007:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10042:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"10053:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10038:3:8"},"nodeType":"YulFunctionCall","src":"10038:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10062:7:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10017:20:8"},"nodeType":"YulFunctionCall","src":"10017:53:8"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"10007:6:8"}]}]},{"nodeType":"YulBlock","src":"10090:119:8","statements":[{"nodeType":"YulVariableDeclaration","src":"10105:17:8","value":{"kind":"number","nodeType":"YulLiteral","src":"10119:3:8","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10109:6:8","type":""}]},{"nodeType":"YulAssignment","src":"10136:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10171:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"10182:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10167:3:8"},"nodeType":"YulFunctionCall","src":"10167:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10191:7:8"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10146:20:8"},"nodeType":"YulFunctionCall","src":"10146:53:8"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"10136:6:8"}]}]}]},"name":"abi_decode_tuple_t_uint256t_string_calldata_ptrt_uint256t_uint256t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9189:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9200:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9212:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9220:6:8","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9228:6:8","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9236:6:8","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9244:6:8","type":""},{"name":"value5","nodeType":"YulTypedName","src":"9252:6:8","type":""}],"src":"9105:1111:8"},{"body":{"nodeType":"YulBlock","src":"10305:391:8","statements":[{"body":{"nodeType":"YulBlock","src":"10351:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10353:77:8"},"nodeType":"YulFunctionCall","src":"10353:79:8"},"nodeType":"YulExpressionStatement","src":"10353:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10326:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"10335:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10322:3:8"},"nodeType":"YulFunctionCall","src":"10322:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"10347:2:8","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10318:3:8"},"nodeType":"YulFunctionCall","src":"10318:32:8"},"nodeType":"YulIf","src":"10315:119:8"},{"nodeType":"YulBlock","src":"10444:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"10459:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"10473:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10463:6:8","type":""}]},{"nodeType":"YulAssignment","src":"10488:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10523:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"10534:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10519:3:8"},"nodeType":"YulFunctionCall","src":"10519:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10543:7:8"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10498:20:8"},"nodeType":"YulFunctionCall","src":"10498:53:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10488:6:8"}]}]},{"nodeType":"YulBlock","src":"10571:118:8","statements":[{"nodeType":"YulVariableDeclaration","src":"10586:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"10600:2:8","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10590:6:8","type":""}]},{"nodeType":"YulAssignment","src":"10616:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10651:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"10662:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10647:3:8"},"nodeType":"YulFunctionCall","src":"10647:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10671:7:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10626:20:8"},"nodeType":"YulFunctionCall","src":"10626:53:8"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10616:6:8"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10267:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10278:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10290:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10298:6:8","type":""}],"src":"10222:474:8"},{"body":{"nodeType":"YulBlock","src":"10785:391:8","statements":[{"body":{"nodeType":"YulBlock","src":"10831:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10833:77:8"},"nodeType":"YulFunctionCall","src":"10833:79:8"},"nodeType":"YulExpressionStatement","src":"10833:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10806:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"10815:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10802:3:8"},"nodeType":"YulFunctionCall","src":"10802:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"10827:2:8","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10798:3:8"},"nodeType":"YulFunctionCall","src":"10798:32:8"},"nodeType":"YulIf","src":"10795:119:8"},{"nodeType":"YulBlock","src":"10924:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"10939:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"10953:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10943:6:8","type":""}]},{"nodeType":"YulAssignment","src":"10968:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11003:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"11014:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10999:3:8"},"nodeType":"YulFunctionCall","src":"10999:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11023:7:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10978:20:8"},"nodeType":"YulFunctionCall","src":"10978:53:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10968:6:8"}]}]},{"nodeType":"YulBlock","src":"11051:118:8","statements":[{"nodeType":"YulVariableDeclaration","src":"11066:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"11080:2:8","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11070:6:8","type":""}]},{"nodeType":"YulAssignment","src":"11096:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11131:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"11142:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11127:3:8"},"nodeType":"YulFunctionCall","src":"11127:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11151:7:8"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"11106:20:8"},"nodeType":"YulFunctionCall","src":"11106:53:8"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11096:6:8"}]}]}]},"name":"abi_decode_tuple_t_uint256t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10747:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10758:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10770:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10778:6:8","type":""}],"src":"10702:474:8"},{"body":{"nodeType":"YulBlock","src":"11288:60:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11310:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"11318:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11306:3:8"},"nodeType":"YulFunctionCall","src":"11306:14:8"},{"hexValue":"496e76616c696420656c656374696f6e","kind":"string","nodeType":"YulLiteral","src":"11322:18:8","type":"","value":"Invalid election"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11299:6:8"},"nodeType":"YulFunctionCall","src":"11299:42:8"},"nodeType":"YulExpressionStatement","src":"11299:42:8"}]},"name":"store_literal_in_memory_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11280:6:8","type":""}],"src":"11182:166:8"},{"body":{"nodeType":"YulBlock","src":"11500:220:8","statements":[{"nodeType":"YulAssignment","src":"11510:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11576:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"11581:2:8","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11517:58:8"},"nodeType":"YulFunctionCall","src":"11517:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11510:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11682:3:8"}],"functionName":{"name":"store_literal_in_memory_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a","nodeType":"YulIdentifier","src":"11593:88:8"},"nodeType":"YulFunctionCall","src":"11593:93:8"},"nodeType":"YulExpressionStatement","src":"11593:93:8"},{"nodeType":"YulAssignment","src":"11695:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11706:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"11711:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11702:3:8"},"nodeType":"YulFunctionCall","src":"11702:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11695:3:8"}]}]},"name":"abi_encode_t_stringliteral_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11488:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11496:3:8","type":""}],"src":"11354:366:8"},{"body":{"nodeType":"YulBlock","src":"11897:248:8","statements":[{"nodeType":"YulAssignment","src":"11907:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11919:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"11930:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11915:3:8"},"nodeType":"YulFunctionCall","src":"11915:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11907:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11954:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"11965:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11950:3:8"},"nodeType":"YulFunctionCall","src":"11950:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11973:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"11979:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11969:3:8"},"nodeType":"YulFunctionCall","src":"11969:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11943:6:8"},"nodeType":"YulFunctionCall","src":"11943:47:8"},"nodeType":"YulExpressionStatement","src":"11943:47:8"},{"nodeType":"YulAssignment","src":"11999:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12133:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12007:124:8"},"nodeType":"YulFunctionCall","src":"12007:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11999:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11877:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11892:4:8","type":""}],"src":"11726:419:8"},{"body":{"nodeType":"YulBlock","src":"12257:55:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12279:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"12287:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12275:3:8"},"nodeType":"YulFunctionCall","src":"12275:14:8"},{"hexValue":"4e6f742073746172746564","kind":"string","nodeType":"YulLiteral","src":"12291:13:8","type":"","value":"Not started"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12268:6:8"},"nodeType":"YulFunctionCall","src":"12268:37:8"},"nodeType":"YulExpressionStatement","src":"12268:37:8"}]},"name":"store_literal_in_memory_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12249:6:8","type":""}],"src":"12151:161:8"},{"body":{"nodeType":"YulBlock","src":"12464:220:8","statements":[{"nodeType":"YulAssignment","src":"12474:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12540:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"12545:2:8","type":"","value":"11"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12481:58:8"},"nodeType":"YulFunctionCall","src":"12481:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12474:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12646:3:8"}],"functionName":{"name":"store_literal_in_memory_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8","nodeType":"YulIdentifier","src":"12557:88:8"},"nodeType":"YulFunctionCall","src":"12557:93:8"},"nodeType":"YulExpressionStatement","src":"12557:93:8"},{"nodeType":"YulAssignment","src":"12659:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12670:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"12675:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12666:3:8"},"nodeType":"YulFunctionCall","src":"12666:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12659:3:8"}]}]},"name":"abi_encode_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12452:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12460:3:8","type":""}],"src":"12318:366:8"},{"body":{"nodeType":"YulBlock","src":"12861:248:8","statements":[{"nodeType":"YulAssignment","src":"12871:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12883:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"12894:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12879:3:8"},"nodeType":"YulFunctionCall","src":"12879:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12871:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12918:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"12929:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12914:3:8"},"nodeType":"YulFunctionCall","src":"12914:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12937:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"12943:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12933:3:8"},"nodeType":"YulFunctionCall","src":"12933:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12907:6:8"},"nodeType":"YulFunctionCall","src":"12907:47:8"},"nodeType":"YulExpressionStatement","src":"12907:47:8"},{"nodeType":"YulAssignment","src":"12963:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13097:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12971:124:8"},"nodeType":"YulFunctionCall","src":"12971:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12963:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12841:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12856:4:8","type":""}],"src":"12690:419:8"},{"body":{"nodeType":"YulBlock","src":"13221:49:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13243:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"13251:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13239:3:8"},"nodeType":"YulFunctionCall","src":"13239:14:8"},{"hexValue":"456e646564","kind":"string","nodeType":"YulLiteral","src":"13255:7:8","type":"","value":"Ended"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13232:6:8"},"nodeType":"YulFunctionCall","src":"13232:31:8"},"nodeType":"YulExpressionStatement","src":"13232:31:8"}]},"name":"store_literal_in_memory_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13213:6:8","type":""}],"src":"13115:155:8"},{"body":{"nodeType":"YulBlock","src":"13422:219:8","statements":[{"nodeType":"YulAssignment","src":"13432:73:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13498:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"13503:1:8","type":"","value":"5"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13439:58:8"},"nodeType":"YulFunctionCall","src":"13439:66:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13432:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13603:3:8"}],"functionName":{"name":"store_literal_in_memory_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057","nodeType":"YulIdentifier","src":"13514:88:8"},"nodeType":"YulFunctionCall","src":"13514:93:8"},"nodeType":"YulExpressionStatement","src":"13514:93:8"},{"nodeType":"YulAssignment","src":"13616:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13627:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"13632:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13623:3:8"},"nodeType":"YulFunctionCall","src":"13623:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13616:3:8"}]}]},"name":"abi_encode_t_stringliteral_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13410:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13418:3:8","type":""}],"src":"13276:365:8"},{"body":{"nodeType":"YulBlock","src":"13818:248:8","statements":[{"nodeType":"YulAssignment","src":"13828:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13840:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"13851:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13836:3:8"},"nodeType":"YulFunctionCall","src":"13836:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13828:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13875:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"13886:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13871:3:8"},"nodeType":"YulFunctionCall","src":"13871:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13894:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"13900:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13890:3:8"},"nodeType":"YulFunctionCall","src":"13890:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13864:6:8"},"nodeType":"YulFunctionCall","src":"13864:47:8"},"nodeType":"YulExpressionStatement","src":"13864:47:8"},{"nodeType":"YulAssignment","src":"13920:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14054:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13928:124:8"},"nodeType":"YulFunctionCall","src":"13928:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13920:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13798:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13813:4:8","type":""}],"src":"13647:419:8"},{"body":{"nodeType":"YulBlock","src":"14178:61:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14200:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"14208:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14196:3:8"},"nodeType":"YulFunctionCall","src":"14196:14:8"},{"hexValue":"496e76616c69642063616e646964617465","kind":"string","nodeType":"YulLiteral","src":"14212:19:8","type":"","value":"Invalid candidate"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14189:6:8"},"nodeType":"YulFunctionCall","src":"14189:43:8"},"nodeType":"YulExpressionStatement","src":"14189:43:8"}]},"name":"store_literal_in_memory_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14170:6:8","type":""}],"src":"14072:167:8"},{"body":{"nodeType":"YulBlock","src":"14391:220:8","statements":[{"nodeType":"YulAssignment","src":"14401:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14467:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"14472:2:8","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14408:58:8"},"nodeType":"YulFunctionCall","src":"14408:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14401:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14573:3:8"}],"functionName":{"name":"store_literal_in_memory_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1","nodeType":"YulIdentifier","src":"14484:88:8"},"nodeType":"YulFunctionCall","src":"14484:93:8"},"nodeType":"YulExpressionStatement","src":"14484:93:8"},{"nodeType":"YulAssignment","src":"14586:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14597:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"14602:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14593:3:8"},"nodeType":"YulFunctionCall","src":"14593:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14586:3:8"}]}]},"name":"abi_encode_t_stringliteral_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14379:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14387:3:8","type":""}],"src":"14245:366:8"},{"body":{"nodeType":"YulBlock","src":"14788:248:8","statements":[{"nodeType":"YulAssignment","src":"14798:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14810:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"14821:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14806:3:8"},"nodeType":"YulFunctionCall","src":"14806:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14798:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14845:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"14856:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14841:3:8"},"nodeType":"YulFunctionCall","src":"14841:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14864:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"14870:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14860:3:8"},"nodeType":"YulFunctionCall","src":"14860:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14834:6:8"},"nodeType":"YulFunctionCall","src":"14834:47:8"},"nodeType":"YulExpressionStatement","src":"14834:47:8"},{"nodeType":"YulAssignment","src":"14890:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15024:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14898:124:8"},"nodeType":"YulFunctionCall","src":"14898:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14890:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14768:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14783:4:8","type":""}],"src":"14617:419:8"},{"body":{"nodeType":"YulBlock","src":"15148:57:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15170:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"15178:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15166:3:8"},"nodeType":"YulFunctionCall","src":"15166:14:8"},{"hexValue":"416c726561647920766f746564","kind":"string","nodeType":"YulLiteral","src":"15182:15:8","type":"","value":"Already voted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15159:6:8"},"nodeType":"YulFunctionCall","src":"15159:39:8"},"nodeType":"YulExpressionStatement","src":"15159:39:8"}]},"name":"store_literal_in_memory_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15140:6:8","type":""}],"src":"15042:163:8"},{"body":{"nodeType":"YulBlock","src":"15357:220:8","statements":[{"nodeType":"YulAssignment","src":"15367:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15433:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"15438:2:8","type":"","value":"13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15374:58:8"},"nodeType":"YulFunctionCall","src":"15374:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15367:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15539:3:8"}],"functionName":{"name":"store_literal_in_memory_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6","nodeType":"YulIdentifier","src":"15450:88:8"},"nodeType":"YulFunctionCall","src":"15450:93:8"},"nodeType":"YulExpressionStatement","src":"15450:93:8"},{"nodeType":"YulAssignment","src":"15552:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15563:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"15568:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15559:3:8"},"nodeType":"YulFunctionCall","src":"15559:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15552:3:8"}]}]},"name":"abi_encode_t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15345:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15353:3:8","type":""}],"src":"15211:366:8"},{"body":{"nodeType":"YulBlock","src":"15754:248:8","statements":[{"nodeType":"YulAssignment","src":"15764:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15776:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"15787:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15772:3:8"},"nodeType":"YulFunctionCall","src":"15772:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15764:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15811:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"15822:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15807:3:8"},"nodeType":"YulFunctionCall","src":"15807:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15830:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"15836:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15826:3:8"},"nodeType":"YulFunctionCall","src":"15826:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15800:6:8"},"nodeType":"YulFunctionCall","src":"15800:47:8"},"nodeType":"YulExpressionStatement","src":"15800:47:8"},{"nodeType":"YulAssignment","src":"15856:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15990:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15864:124:8"},"nodeType":"YulFunctionCall","src":"15864:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15856:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15734:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15749:4:8","type":""}],"src":"15583:419:8"},{"body":{"nodeType":"YulBlock","src":"16055:32:8","statements":[{"nodeType":"YulAssignment","src":"16065:16:8","value":{"name":"value","nodeType":"YulIdentifier","src":"16076:5:8"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"16065:7:8"}]}]},"name":"leftAlign_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16037:5:8","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"16047:7:8","type":""}],"src":"16008:79:8"},{"body":{"nodeType":"YulBlock","src":"16176:74:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16193:3:8"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16236:5:8"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"16218:17:8"},"nodeType":"YulFunctionCall","src":"16218:24:8"}],"functionName":{"name":"leftAlign_t_bytes32","nodeType":"YulIdentifier","src":"16198:19:8"},"nodeType":"YulFunctionCall","src":"16198:45:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16186:6:8"},"nodeType":"YulFunctionCall","src":"16186:58:8"},"nodeType":"YulExpressionStatement","src":"16186:58:8"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16164:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16171:3:8","type":""}],"src":"16093:157:8"},{"body":{"nodeType":"YulBlock","src":"16372:140:8","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16445:6:8"},{"name":"pos","nodeType":"YulIdentifier","src":"16454:3:8"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16383:61:8"},"nodeType":"YulFunctionCall","src":"16383:75:8"},"nodeType":"YulExpressionStatement","src":"16383:75:8"},{"nodeType":"YulAssignment","src":"16467:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16478:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"16483:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16474:3:8"},"nodeType":"YulFunctionCall","src":"16474:12:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16467:3:8"}]},{"nodeType":"YulAssignment","src":"16496:10:8","value":{"name":"pos","nodeType":"YulIdentifier","src":"16503:3:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16496:3:8"}]}]},"name":"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16351:3:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16357:6:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16368:3:8","type":""}],"src":"16256:256:8"},{"body":{"nodeType":"YulBlock","src":"16624:65:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16646:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"16654:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16642:3:8"},"nodeType":"YulFunctionCall","src":"16642:14:8"},{"hexValue":"4e6f7420616e20656c696769626c6520766f746572","kind":"string","nodeType":"YulLiteral","src":"16658:23:8","type":"","value":"Not an eligible voter"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16635:6:8"},"nodeType":"YulFunctionCall","src":"16635:47:8"},"nodeType":"YulExpressionStatement","src":"16635:47:8"}]},"name":"store_literal_in_memory_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16616:6:8","type":""}],"src":"16518:171:8"},{"body":{"nodeType":"YulBlock","src":"16841:220:8","statements":[{"nodeType":"YulAssignment","src":"16851:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16917:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"16922:2:8","type":"","value":"21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16858:58:8"},"nodeType":"YulFunctionCall","src":"16858:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16851:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17023:3:8"}],"functionName":{"name":"store_literal_in_memory_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b","nodeType":"YulIdentifier","src":"16934:88:8"},"nodeType":"YulFunctionCall","src":"16934:93:8"},"nodeType":"YulExpressionStatement","src":"16934:93:8"},{"nodeType":"YulAssignment","src":"17036:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17047:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"17052:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17043:3:8"},"nodeType":"YulFunctionCall","src":"17043:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17036:3:8"}]}]},"name":"abi_encode_t_stringliteral_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16829:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16837:3:8","type":""}],"src":"16695:366:8"},{"body":{"nodeType":"YulBlock","src":"17238:248:8","statements":[{"nodeType":"YulAssignment","src":"17248:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17260:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"17271:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17256:3:8"},"nodeType":"YulFunctionCall","src":"17256:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17248:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17295:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"17306:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17291:3:8"},"nodeType":"YulFunctionCall","src":"17291:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17314:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"17320:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17310:3:8"},"nodeType":"YulFunctionCall","src":"17310:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17284:6:8"},"nodeType":"YulFunctionCall","src":"17284:47:8"},"nodeType":"YulExpressionStatement","src":"17284:47:8"},{"nodeType":"YulAssignment","src":"17340:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17474:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17348:124:8"},"nodeType":"YulFunctionCall","src":"17348:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17340:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17218:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17233:4:8","type":""}],"src":"17067:419:8"},{"body":{"nodeType":"YulBlock","src":"17520:152:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17537:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17540:77:8","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17530:6:8"},"nodeType":"YulFunctionCall","src":"17530:88:8"},"nodeType":"YulExpressionStatement","src":"17530:88:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17634:1:8","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"17637:4:8","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17627:6:8"},"nodeType":"YulFunctionCall","src":"17627:15:8"},"nodeType":"YulExpressionStatement","src":"17627:15:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17658:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17661:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17651:6:8"},"nodeType":"YulFunctionCall","src":"17651:15:8"},"nodeType":"YulExpressionStatement","src":"17651:15:8"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"17492:180:8"},{"body":{"nodeType":"YulBlock","src":"17729:269:8","statements":[{"nodeType":"YulAssignment","src":"17739:22:8","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"17753:4:8"},{"kind":"number","nodeType":"YulLiteral","src":"17759:1:8","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"17749:3:8"},"nodeType":"YulFunctionCall","src":"17749:12:8"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17739:6:8"}]},{"nodeType":"YulVariableDeclaration","src":"17770:38:8","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"17800:4:8"},{"kind":"number","nodeType":"YulLiteral","src":"17806:1:8","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17796:3:8"},"nodeType":"YulFunctionCall","src":"17796:12:8"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"17774:18:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"17847:51:8","statements":[{"nodeType":"YulAssignment","src":"17861:27:8","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17875:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"17883:4:8","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17871:3:8"},"nodeType":"YulFunctionCall","src":"17871:17:8"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17861:6:8"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"17827:18:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17820:6:8"},"nodeType":"YulFunctionCall","src":"17820:26:8"},"nodeType":"YulIf","src":"17817:81:8"},{"body":{"nodeType":"YulBlock","src":"17950:42:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"17964:16:8"},"nodeType":"YulFunctionCall","src":"17964:18:8"},"nodeType":"YulExpressionStatement","src":"17964:18:8"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"17914:18:8"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17937:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"17945:2:8","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17934:2:8"},"nodeType":"YulFunctionCall","src":"17934:14:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17911:2:8"},"nodeType":"YulFunctionCall","src":"17911:38:8"},"nodeType":"YulIf","src":"17908:84:8"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"17713:4:8","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"17722:6:8","type":""}],"src":"17678:320:8"},{"body":{"nodeType":"YulBlock","src":"18110:59:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18132:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"18140:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18128:3:8"},"nodeType":"YulFunctionCall","src":"18128:14:8"},{"hexValue":"456c656374696f6e20657869737473","kind":"string","nodeType":"YulLiteral","src":"18144:17:8","type":"","value":"Election exists"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18121:6:8"},"nodeType":"YulFunctionCall","src":"18121:41:8"},"nodeType":"YulExpressionStatement","src":"18121:41:8"}]},"name":"store_literal_in_memory_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18102:6:8","type":""}],"src":"18004:165:8"},{"body":{"nodeType":"YulBlock","src":"18321:220:8","statements":[{"nodeType":"YulAssignment","src":"18331:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18397:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"18402:2:8","type":"","value":"15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18338:58:8"},"nodeType":"YulFunctionCall","src":"18338:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18331:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18503:3:8"}],"functionName":{"name":"store_literal_in_memory_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779","nodeType":"YulIdentifier","src":"18414:88:8"},"nodeType":"YulFunctionCall","src":"18414:93:8"},"nodeType":"YulExpressionStatement","src":"18414:93:8"},{"nodeType":"YulAssignment","src":"18516:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18527:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"18532:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18523:3:8"},"nodeType":"YulFunctionCall","src":"18523:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18516:3:8"}]}]},"name":"abi_encode_t_stringliteral_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18309:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18317:3:8","type":""}],"src":"18175:366:8"},{"body":{"nodeType":"YulBlock","src":"18718:248:8","statements":[{"nodeType":"YulAssignment","src":"18728:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18740:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"18751:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18736:3:8"},"nodeType":"YulFunctionCall","src":"18736:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18728:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18775:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"18786:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18771:3:8"},"nodeType":"YulFunctionCall","src":"18771:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18794:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"18800:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18790:3:8"},"nodeType":"YulFunctionCall","src":"18790:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18764:6:8"},"nodeType":"YulFunctionCall","src":"18764:47:8"},"nodeType":"YulExpressionStatement","src":"18764:47:8"},{"nodeType":"YulAssignment","src":"18820:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18954:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18828:124:8"},"nodeType":"YulFunctionCall","src":"18828:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18820:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18698:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18713:4:8","type":""}],"src":"18547:419:8"},{"body":{"nodeType":"YulBlock","src":"19000:152:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19017:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19020:77:8","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19010:6:8"},"nodeType":"YulFunctionCall","src":"19010:88:8"},"nodeType":"YulExpressionStatement","src":"19010:88:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19114:1:8","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19117:4:8","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19107:6:8"},"nodeType":"YulFunctionCall","src":"19107:15:8"},"nodeType":"YulExpressionStatement","src":"19107:15:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19138:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19141:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19131:6:8"},"nodeType":"YulFunctionCall","src":"19131:15:8"},"nodeType":"YulExpressionStatement","src":"19131:15:8"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"18972:180:8"},{"body":{"nodeType":"YulBlock","src":"19212:87:8","statements":[{"nodeType":"YulAssignment","src":"19222:11:8","value":{"name":"ptr","nodeType":"YulIdentifier","src":"19230:3:8"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"19222:4:8"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19250:1:8","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"19253:3:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19243:6:8"},"nodeType":"YulFunctionCall","src":"19243:14:8"},"nodeType":"YulExpressionStatement","src":"19243:14:8"},{"nodeType":"YulAssignment","src":"19266:26:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19284:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19287:4:8","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"19274:9:8"},"nodeType":"YulFunctionCall","src":"19274:18:8"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"19266:4:8"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"19199:3:8","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"19207:4:8","type":""}],"src":"19158:141:8"},{"body":{"nodeType":"YulBlock","src":"19349:49:8","statements":[{"nodeType":"YulAssignment","src":"19359:33:8","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19377:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"19384:2:8","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19373:3:8"},"nodeType":"YulFunctionCall","src":"19373:14:8"},{"kind":"number","nodeType":"YulLiteral","src":"19389:2:8","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"19369:3:8"},"nodeType":"YulFunctionCall","src":"19369:23:8"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"19359:6:8"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19332:5:8","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"19342:6:8","type":""}],"src":"19305:93:8"},{"body":{"nodeType":"YulBlock","src":"19457:54:8","statements":[{"nodeType":"YulAssignment","src":"19467:37:8","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"19492:4:8"},{"name":"value","nodeType":"YulIdentifier","src":"19498:5:8"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19488:3:8"},"nodeType":"YulFunctionCall","src":"19488:16:8"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"19467:8:8"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"19432:4:8","type":""},{"name":"value","nodeType":"YulTypedName","src":"19438:5:8","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"19448:8:8","type":""}],"src":"19404:107:8"},{"body":{"nodeType":"YulBlock","src":"19593:317:8","statements":[{"nodeType":"YulVariableDeclaration","src":"19603:35:8","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"19624:10:8"},{"kind":"number","nodeType":"YulLiteral","src":"19636:1:8","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"19620:3:8"},"nodeType":"YulFunctionCall","src":"19620:18:8"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"19607:9:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19647:109:8","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"19678:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"19689:66:8","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"19659:18:8"},"nodeType":"YulFunctionCall","src":"19659:97:8"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"19651:4:8","type":""}]},{"nodeType":"YulAssignment","src":"19765:51:8","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"19796:9:8"},{"name":"toInsert","nodeType":"YulIdentifier","src":"19807:8:8"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"19777:18:8"},"nodeType":"YulFunctionCall","src":"19777:39:8"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"19765:8:8"}]},{"nodeType":"YulAssignment","src":"19825:30:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19838:5:8"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"19849:4:8"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19845:3:8"},"nodeType":"YulFunctionCall","src":"19845:9:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19834:3:8"},"nodeType":"YulFunctionCall","src":"19834:21:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19825:5:8"}]},{"nodeType":"YulAssignment","src":"19864:40:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19877:5:8"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"19888:8:8"},{"name":"mask","nodeType":"YulIdentifier","src":"19898:4:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19884:3:8"},"nodeType":"YulFunctionCall","src":"19884:19:8"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"19874:2:8"},"nodeType":"YulFunctionCall","src":"19874:30:8"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"19864:6:8"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19554:5:8","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"19561:10:8","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"19573:8:8","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"19586:6:8","type":""}],"src":"19517:393:8"},{"body":{"nodeType":"YulBlock","src":"19948:28:8","statements":[{"nodeType":"YulAssignment","src":"19958:12:8","value":{"name":"value","nodeType":"YulIdentifier","src":"19965:5:8"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"19958:3:8"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19934:5:8","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"19944:3:8","type":""}],"src":"19916:60:8"},{"body":{"nodeType":"YulBlock","src":"20042:82:8","statements":[{"nodeType":"YulAssignment","src":"20052:66:8","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20110:5:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"20092:17:8"},"nodeType":"YulFunctionCall","src":"20092:24:8"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"20083:8:8"},"nodeType":"YulFunctionCall","src":"20083:34:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"20065:17:8"},"nodeType":"YulFunctionCall","src":"20065:53:8"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"20052:9:8"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20022:5:8","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"20032:9:8","type":""}],"src":"19982:142:8"},{"body":{"nodeType":"YulBlock","src":"20177:28:8","statements":[{"nodeType":"YulAssignment","src":"20187:12:8","value":{"name":"value","nodeType":"YulIdentifier","src":"20194:5:8"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"20187:3:8"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20163:5:8","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"20173:3:8","type":""}],"src":"20130:75:8"},{"body":{"nodeType":"YulBlock","src":"20287:193:8","statements":[{"nodeType":"YulVariableDeclaration","src":"20297:63:8","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"20352:7:8"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"20321:30:8"},"nodeType":"YulFunctionCall","src":"20321:39:8"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"20301:16:8","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"20376:4:8"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"20416:4:8"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"20410:5:8"},"nodeType":"YulFunctionCall","src":"20410:11:8"},{"name":"offset","nodeType":"YulIdentifier","src":"20423:6:8"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"20455:16:8"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"20431:23:8"},"nodeType":"YulFunctionCall","src":"20431:41:8"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"20382:27:8"},"nodeType":"YulFunctionCall","src":"20382:91:8"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"20369:6:8"},"nodeType":"YulFunctionCall","src":"20369:105:8"},"nodeType":"YulExpressionStatement","src":"20369:105:8"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"20264:4:8","type":""},{"name":"offset","nodeType":"YulTypedName","src":"20270:6:8","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"20278:7:8","type":""}],"src":"20211:269:8"},{"body":{"nodeType":"YulBlock","src":"20535:24:8","statements":[{"nodeType":"YulAssignment","src":"20545:8:8","value":{"kind":"number","nodeType":"YulLiteral","src":"20552:1:8","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"20545:3:8"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"20531:3:8","type":""}],"src":"20486:73:8"},{"body":{"nodeType":"YulBlock","src":"20618:136:8","statements":[{"nodeType":"YulVariableDeclaration","src":"20628:46:8","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"20642:30:8"},"nodeType":"YulFunctionCall","src":"20642:32:8"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"20632:6:8","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"20727:4:8"},{"name":"offset","nodeType":"YulIdentifier","src":"20733:6:8"},{"name":"zero_0","nodeType":"YulIdentifier","src":"20741:6:8"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"20683:43:8"},"nodeType":"YulFunctionCall","src":"20683:65:8"},"nodeType":"YulExpressionStatement","src":"20683:65:8"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"20604:4:8","type":""},{"name":"offset","nodeType":"YulTypedName","src":"20610:6:8","type":""}],"src":"20565:189:8"},{"body":{"nodeType":"YulBlock","src":"20810:136:8","statements":[{"body":{"nodeType":"YulBlock","src":"20877:63:8","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"20921:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"20928:1:8","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"20891:29:8"},"nodeType":"YulFunctionCall","src":"20891:39:8"},"nodeType":"YulExpressionStatement","src":"20891:39:8"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"20830:5:8"},{"name":"end","nodeType":"YulIdentifier","src":"20837:3:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"20827:2:8"},"nodeType":"YulFunctionCall","src":"20827:14:8"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"20842:26:8","statements":[{"nodeType":"YulAssignment","src":"20844:22:8","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"20857:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"20864:1:8","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20853:3:8"},"nodeType":"YulFunctionCall","src":"20853:13:8"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"20844:5:8"}]}]},"pre":{"nodeType":"YulBlock","src":"20824:2:8","statements":[]},"src":"20820:120:8"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"20798:5:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"20805:3:8","type":""}],"src":"20760:186:8"},{"body":{"nodeType":"YulBlock","src":"21031:464:8","statements":[{"body":{"nodeType":"YulBlock","src":"21057:431:8","statements":[{"nodeType":"YulVariableDeclaration","src":"21071:54:8","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"21119:5:8"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"21087:31:8"},"nodeType":"YulFunctionCall","src":"21087:38:8"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"21075:8:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21138:63:8","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"21161:8:8"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"21189:10:8"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"21171:17:8"},"nodeType":"YulFunctionCall","src":"21171:29:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21157:3:8"},"nodeType":"YulFunctionCall","src":"21157:44:8"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"21142:11:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"21358:27:8","statements":[{"nodeType":"YulAssignment","src":"21360:23:8","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"21375:8:8"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"21360:11:8"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"21342:10:8"},{"kind":"number","nodeType":"YulLiteral","src":"21354:2:8","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"21339:2:8"},"nodeType":"YulFunctionCall","src":"21339:18:8"},"nodeType":"YulIf","src":"21336:49:8"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"21427:11:8"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"21444:8:8"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"21472:3:8"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"21454:17:8"},"nodeType":"YulFunctionCall","src":"21454:22:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21440:3:8"},"nodeType":"YulFunctionCall","src":"21440:37:8"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"21398:28:8"},"nodeType":"YulFunctionCall","src":"21398:80:8"},"nodeType":"YulExpressionStatement","src":"21398:80:8"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"21048:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"21053:2:8","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21045:2:8"},"nodeType":"YulFunctionCall","src":"21045:11:8"},"nodeType":"YulIf","src":"21042:446:8"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"21007:5:8","type":""},{"name":"len","nodeType":"YulTypedName","src":"21014:3:8","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"21019:10:8","type":""}],"src":"20952:543:8"},{"body":{"nodeType":"YulBlock","src":"21564:54:8","statements":[{"nodeType":"YulAssignment","src":"21574:37:8","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"21599:4:8"},{"name":"value","nodeType":"YulIdentifier","src":"21605:5:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21595:3:8"},"nodeType":"YulFunctionCall","src":"21595:16:8"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"21574:8:8"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"21539:4:8","type":""},{"name":"value","nodeType":"YulTypedName","src":"21545:5:8","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"21555:8:8","type":""}],"src":"21501:117:8"},{"body":{"nodeType":"YulBlock","src":"21675:118:8","statements":[{"nodeType":"YulVariableDeclaration","src":"21685:68:8","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21734:1:8","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"21737:5:8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"21730:3:8"},"nodeType":"YulFunctionCall","src":"21730:13:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21749:1:8","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21745:3:8"},"nodeType":"YulFunctionCall","src":"21745:6:8"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"21701:28:8"},"nodeType":"YulFunctionCall","src":"21701:51:8"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21697:3:8"},"nodeType":"YulFunctionCall","src":"21697:56:8"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"21689:4:8","type":""}]},{"nodeType":"YulAssignment","src":"21762:25:8","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"21776:4:8"},{"name":"mask","nodeType":"YulIdentifier","src":"21782:4:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21772:3:8"},"nodeType":"YulFunctionCall","src":"21772:15:8"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"21762:6:8"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"21652:4:8","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"21658:5:8","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"21668:6:8","type":""}],"src":"21624:169:8"},{"body":{"nodeType":"YulBlock","src":"21879:214:8","statements":[{"nodeType":"YulAssignment","src":"22012:37:8","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22039:4:8"},{"name":"len","nodeType":"YulIdentifier","src":"22045:3:8"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"22020:18:8"},"nodeType":"YulFunctionCall","src":"22020:29:8"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"22012:4:8"}]},{"nodeType":"YulAssignment","src":"22058:29:8","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22069:4:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22079:1:8","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"22082:3:8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22075:3:8"},"nodeType":"YulFunctionCall","src":"22075:11:8"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"22066:2:8"},"nodeType":"YulFunctionCall","src":"22066:21:8"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"22058:4:8"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"21860:4:8","type":""},{"name":"len","nodeType":"YulTypedName","src":"21866:3:8","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"21874:4:8","type":""}],"src":"21798:295:8"},{"body":{"nodeType":"YulBlock","src":"22190:1303:8","statements":[{"nodeType":"YulVariableDeclaration","src":"22201:51:8","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"22248:3:8"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"22215:32:8"},"nodeType":"YulFunctionCall","src":"22215:37:8"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"22205:6:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"22337:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"22339:16:8"},"nodeType":"YulFunctionCall","src":"22339:18:8"},"nodeType":"YulExpressionStatement","src":"22339:18:8"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"22309:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"22317:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22306:2:8"},"nodeType":"YulFunctionCall","src":"22306:30:8"},"nodeType":"YulIf","src":"22303:56:8"},{"nodeType":"YulVariableDeclaration","src":"22369:52:8","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"22415:4:8"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"22409:5:8"},"nodeType":"YulFunctionCall","src":"22409:11:8"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"22383:25:8"},"nodeType":"YulFunctionCall","src":"22383:38:8"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"22373:6:8","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"22514:4:8"},{"name":"oldLen","nodeType":"YulIdentifier","src":"22520:6:8"},{"name":"newLen","nodeType":"YulIdentifier","src":"22528:6:8"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"22468:45:8"},"nodeType":"YulFunctionCall","src":"22468:67:8"},"nodeType":"YulExpressionStatement","src":"22468:67:8"},{"nodeType":"YulVariableDeclaration","src":"22545:18:8","value":{"kind":"number","nodeType":"YulLiteral","src":"22562:1:8","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"22549:9:8","type":""}]},{"nodeType":"YulAssignment","src":"22573:17:8","value":{"kind":"number","nodeType":"YulLiteral","src":"22586:4:8","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"22573:9:8"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"22637:611:8","statements":[{"nodeType":"YulVariableDeclaration","src":"22651:37:8","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"22670:6:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22682:4:8","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22678:3:8"},"nodeType":"YulFunctionCall","src":"22678:9:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22666:3:8"},"nodeType":"YulFunctionCall","src":"22666:22:8"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"22655:7:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22702:51:8","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"22748:4:8"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"22716:31:8"},"nodeType":"YulFunctionCall","src":"22716:37:8"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"22706:6:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22766:10:8","value":{"kind":"number","nodeType":"YulLiteral","src":"22775:1:8","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"22770:1:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"22834:163:8","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"22859:6:8"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"22877:3:8"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"22882:9:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22873:3:8"},"nodeType":"YulFunctionCall","src":"22873:19:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22867:5:8"},"nodeType":"YulFunctionCall","src":"22867:26:8"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"22852:6:8"},"nodeType":"YulFunctionCall","src":"22852:42:8"},"nodeType":"YulExpressionStatement","src":"22852:42:8"},{"nodeType":"YulAssignment","src":"22911:24:8","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"22925:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"22933:1:8","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22921:3:8"},"nodeType":"YulFunctionCall","src":"22921:14:8"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"22911:6:8"}]},{"nodeType":"YulAssignment","src":"22952:31:8","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"22969:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"22980:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22965:3:8"},"nodeType":"YulFunctionCall","src":"22965:18:8"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"22952:9:8"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"22800:1:8"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"22803:7:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22797:2:8"},"nodeType":"YulFunctionCall","src":"22797:14:8"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"22812:21:8","statements":[{"nodeType":"YulAssignment","src":"22814:17:8","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"22823:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"22826:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22819:3:8"},"nodeType":"YulFunctionCall","src":"22819:12:8"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"22814:1:8"}]}]},"pre":{"nodeType":"YulBlock","src":"22793:3:8","statements":[]},"src":"22789:208:8"},{"body":{"nodeType":"YulBlock","src":"23033:156:8","statements":[{"nodeType":"YulVariableDeclaration","src":"23051:43:8","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23078:3:8"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"23083:9:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23074:3:8"},"nodeType":"YulFunctionCall","src":"23074:19:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23068:5:8"},"nodeType":"YulFunctionCall","src":"23068:26:8"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"23055:9:8","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"23118:6:8"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"23145:9:8"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"23160:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"23168:4:8","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23156:3:8"},"nodeType":"YulFunctionCall","src":"23156:17:8"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"23126:18:8"},"nodeType":"YulFunctionCall","src":"23126:48:8"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"23111:6:8"},"nodeType":"YulFunctionCall","src":"23111:64:8"},"nodeType":"YulExpressionStatement","src":"23111:64:8"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"23016:7:8"},{"name":"newLen","nodeType":"YulIdentifier","src":"23025:6:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23013:2:8"},"nodeType":"YulFunctionCall","src":"23013:19:8"},"nodeType":"YulIf","src":"23010:179:8"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23209:4:8"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"23223:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"23231:1:8","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"23219:3:8"},"nodeType":"YulFunctionCall","src":"23219:14:8"},{"kind":"number","nodeType":"YulLiteral","src":"23235:1:8","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23215:3:8"},"nodeType":"YulFunctionCall","src":"23215:22:8"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"23202:6:8"},"nodeType":"YulFunctionCall","src":"23202:36:8"},"nodeType":"YulExpressionStatement","src":"23202:36:8"}]},"nodeType":"YulCase","src":"22630:618:8","value":{"kind":"number","nodeType":"YulLiteral","src":"22635:1:8","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"23265:222:8","statements":[{"nodeType":"YulVariableDeclaration","src":"23279:14:8","value":{"kind":"number","nodeType":"YulLiteral","src":"23292:1:8","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"23283:5:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"23316:67:8","statements":[{"nodeType":"YulAssignment","src":"23334:35:8","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23353:3:8"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"23358:9:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23349:3:8"},"nodeType":"YulFunctionCall","src":"23349:19:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23343:5:8"},"nodeType":"YulFunctionCall","src":"23343:26:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23334:5:8"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"23309:6:8"},"nodeType":"YulIf","src":"23306:77:8"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23403:4:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23462:5:8"},{"name":"newLen","nodeType":"YulIdentifier","src":"23469:6:8"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"23409:52:8"},"nodeType":"YulFunctionCall","src":"23409:67:8"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"23396:6:8"},"nodeType":"YulFunctionCall","src":"23396:81:8"},"nodeType":"YulExpressionStatement","src":"23396:81:8"}]},"nodeType":"YulCase","src":"23257:230:8","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"22610:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"22618:2:8","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22607:2:8"},"nodeType":"YulFunctionCall","src":"22607:14:8"},"nodeType":"YulSwitch","src":"22600:887:8"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"22179:4:8","type":""},{"name":"src","nodeType":"YulTypedName","src":"22185:3:8","type":""}],"src":"22098:1395:8"},{"body":{"nodeType":"YulBlock","src":"23563:82:8","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23586:3:8"},{"name":"src","nodeType":"YulIdentifier","src":"23591:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"23596:6:8"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"23573:12:8"},"nodeType":"YulFunctionCall","src":"23573:30:8"},"nodeType":"YulExpressionStatement","src":"23573:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23623:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"23628:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23619:3:8"},"nodeType":"YulFunctionCall","src":"23619:16:8"},{"kind":"number","nodeType":"YulLiteral","src":"23637:1:8","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23612:6:8"},"nodeType":"YulFunctionCall","src":"23612:27:8"},"nodeType":"YulExpressionStatement","src":"23612:27:8"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"23545:3:8","type":""},{"name":"dst","nodeType":"YulTypedName","src":"23550:3:8","type":""},{"name":"length","nodeType":"YulTypedName","src":"23555:6:8","type":""}],"src":"23499:146:8"},{"body":{"nodeType":"YulBlock","src":"23777:215:8","statements":[{"nodeType":"YulAssignment","src":"23787:78:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23853:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"23858:6:8"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23794:58:8"},"nodeType":"YulFunctionCall","src":"23794:71:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23787:3:8"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"23912:5:8"},{"name":"pos","nodeType":"YulIdentifier","src":"23919:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"23924:6:8"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"23875:36:8"},"nodeType":"YulFunctionCall","src":"23875:56:8"},"nodeType":"YulExpressionStatement","src":"23875:56:8"},{"nodeType":"YulAssignment","src":"23940:46:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23951:3:8"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"23978:6:8"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"23956:21:8"},"nodeType":"YulFunctionCall","src":"23956:29:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23947:3:8"},"nodeType":"YulFunctionCall","src":"23947:39:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23940:3:8"}]}]},"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"23750:5:8","type":""},{"name":"length","nodeType":"YulTypedName","src":"23757:6:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"23765:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23773:3:8","type":""}],"src":"23675:317:8"},{"body":{"nodeType":"YulBlock","src":"24182:369:8","statements":[{"nodeType":"YulAssignment","src":"24192:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24204:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"24215:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24200:3:8"},"nodeType":"YulFunctionCall","src":"24200:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24192:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24239:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"24250:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24235:3:8"},"nodeType":"YulFunctionCall","src":"24235:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24258:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"24264:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24254:3:8"},"nodeType":"YulFunctionCall","src":"24254:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24228:6:8"},"nodeType":"YulFunctionCall","src":"24228:47:8"},"nodeType":"YulExpressionStatement","src":"24228:47:8"},{"nodeType":"YulAssignment","src":"24284:96:8","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24358:6:8"},{"name":"value1","nodeType":"YulIdentifier","src":"24366:6:8"},{"name":"tail","nodeType":"YulIdentifier","src":"24375:4:8"}],"functionName":{"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24292:65:8"},"nodeType":"YulFunctionCall","src":"24292:88:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24284:4:8"}]},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"24434:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24447:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"24458:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24443:3:8"},"nodeType":"YulFunctionCall","src":"24443:18:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"24390:43:8"},"nodeType":"YulFunctionCall","src":"24390:72:8"},"nodeType":"YulExpressionStatement","src":"24390:72:8"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"24516:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24529:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"24540:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24525:3:8"},"nodeType":"YulFunctionCall","src":"24525:18:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"24472:43:8"},"nodeType":"YulFunctionCall","src":"24472:72:8"},"nodeType":"YulExpressionStatement","src":"24472:72:8"}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_uint256__to_t_string_memory_ptr_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24130:9:8","type":""},{"name":"value3","nodeType":"YulTypedName","src":"24142:6:8","type":""},{"name":"value2","nodeType":"YulTypedName","src":"24150:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24158:6:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24166:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24177:4:8","type":""}],"src":"23998:553:8"},{"body":{"nodeType":"YulBlock","src":"24663:60:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24685:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"24693:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24681:3:8"},"nodeType":"YulFunctionCall","src":"24681:14:8"},{"hexValue":"43616e64696461746520657869737473","kind":"string","nodeType":"YulLiteral","src":"24697:18:8","type":"","value":"Candidate exists"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24674:6:8"},"nodeType":"YulFunctionCall","src":"24674:42:8"},"nodeType":"YulExpressionStatement","src":"24674:42:8"}]},"name":"store_literal_in_memory_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24655:6:8","type":""}],"src":"24557:166:8"},{"body":{"nodeType":"YulBlock","src":"24875:220:8","statements":[{"nodeType":"YulAssignment","src":"24885:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24951:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"24956:2:8","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24892:58:8"},"nodeType":"YulFunctionCall","src":"24892:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24885:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25057:3:8"}],"functionName":{"name":"store_literal_in_memory_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1","nodeType":"YulIdentifier","src":"24968:88:8"},"nodeType":"YulFunctionCall","src":"24968:93:8"},"nodeType":"YulExpressionStatement","src":"24968:93:8"},{"nodeType":"YulAssignment","src":"25070:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25081:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"25086:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25077:3:8"},"nodeType":"YulFunctionCall","src":"25077:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25070:3:8"}]}]},"name":"abi_encode_t_stringliteral_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24863:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24871:3:8","type":""}],"src":"24729:366:8"},{"body":{"nodeType":"YulBlock","src":"25272:248:8","statements":[{"nodeType":"YulAssignment","src":"25282:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25294:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"25305:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25290:3:8"},"nodeType":"YulFunctionCall","src":"25290:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25282:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25329:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"25340:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25325:3:8"},"nodeType":"YulFunctionCall","src":"25325:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25348:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"25354:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25344:3:8"},"nodeType":"YulFunctionCall","src":"25344:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25318:6:8"},"nodeType":"YulFunctionCall","src":"25318:47:8"},"nodeType":"YulExpressionStatement","src":"25318:47:8"},{"nodeType":"YulAssignment","src":"25374:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25508:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25382:124:8"},"nodeType":"YulFunctionCall","src":"25382:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25374:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25252:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25267:4:8","type":""}],"src":"25101:419:8"},{"body":{"nodeType":"YulBlock","src":"25554:152:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25571:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25574:77:8","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25564:6:8"},"nodeType":"YulFunctionCall","src":"25564:88:8"},"nodeType":"YulExpressionStatement","src":"25564:88:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25668:1:8","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25671:4:8","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25661:6:8"},"nodeType":"YulFunctionCall","src":"25661:15:8"},"nodeType":"YulExpressionStatement","src":"25661:15:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25692:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25695:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25685:6:8"},"nodeType":"YulFunctionCall","src":"25685:15:8"},"nodeType":"YulExpressionStatement","src":"25685:15:8"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"25526:180:8"},{"body":{"nodeType":"YulBlock","src":"25740:152:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25757:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25760:77:8","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25750:6:8"},"nodeType":"YulFunctionCall","src":"25750:88:8"},"nodeType":"YulExpressionStatement","src":"25750:88:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25854:1:8","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25857:4:8","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25847:6:8"},"nodeType":"YulFunctionCall","src":"25847:15:8"},"nodeType":"YulExpressionStatement","src":"25847:15:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25878:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25881:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25871:6:8"},"nodeType":"YulFunctionCall","src":"25871:15:8"},"nodeType":"YulExpressionStatement","src":"25871:15:8"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"25712:180:8"},{"body":{"nodeType":"YulBlock","src":"25941:190:8","statements":[{"nodeType":"YulAssignment","src":"25951:33:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25978:5:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25960:17:8"},"nodeType":"YulFunctionCall","src":"25960:24:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"25951:5:8"}]},{"body":{"nodeType":"YulBlock","src":"26074:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"26076:16:8"},"nodeType":"YulFunctionCall","src":"26076:18:8"},"nodeType":"YulExpressionStatement","src":"26076:18:8"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25999:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"26006:66:8","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"25996:2:8"},"nodeType":"YulFunctionCall","src":"25996:77:8"},"nodeType":"YulIf","src":"25993:103:8"},{"nodeType":"YulAssignment","src":"26105:20:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26116:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"26123:1:8","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26112:3:8"},"nodeType":"YulFunctionCall","src":"26112:13:8"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"26105:3:8"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25927:5:8","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25937:3:8","type":""}],"src":"25898:233:8"},{"body":{"nodeType":"YulBlock","src":"26202:53:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26219:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26242:5:8"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"26224:17:8"},"nodeType":"YulFunctionCall","src":"26224:24:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26212:6:8"},"nodeType":"YulFunctionCall","src":"26212:37:8"},"nodeType":"YulExpressionStatement","src":"26212:37:8"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26190:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26197:3:8","type":""}],"src":"26137:118:8"},{"body":{"nodeType":"YulBlock","src":"26387:206:8","statements":[{"nodeType":"YulAssignment","src":"26397:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26409:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"26420:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26405:3:8"},"nodeType":"YulFunctionCall","src":"26405:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26397:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26477:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26490:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"26501:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26486:3:8"},"nodeType":"YulFunctionCall","src":"26486:17:8"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26433:43:8"},"nodeType":"YulFunctionCall","src":"26433:71:8"},"nodeType":"YulExpressionStatement","src":"26433:71:8"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26558:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26571:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"26582:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26567:3:8"},"nodeType":"YulFunctionCall","src":"26567:18:8"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"26514:43:8"},"nodeType":"YulFunctionCall","src":"26514:72:8"},"nodeType":"YulExpressionStatement","src":"26514:72:8"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26351:9:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26363:6:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26371:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26382:4:8","type":""}],"src":"26261:332:8"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes32[]\n    function abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_uint256t_bytes32t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3, value4 := abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint256_t_bool__to_t_bytes32_t_uint256_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr_t_uint256_t_uint256_t_bytes32_t_bool__to_t_string_memory_ptr_t_uint256_t_uint256_t_bytes32_t_bool__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    // string\n    function abi_decode_t_string_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_uint256t_string_calldata_ptrt_uint256t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1, value2 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value4 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_bytes32(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Invalid election\")\n\n    }\n\n    function abi_encode_t_stringliteral_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_dbc26958ddd0d77ba59570c1a009785d60cc1400bb4ed2ffdc44e6fa1e770f7a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8(memPtr) {\n\n        mstore(add(memPtr, 0), \"Not started\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 11)\n        store_literal_in_memory_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ended\")\n\n    }\n\n    function abi_encode_t_stringliteral_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 5)\n        store_literal_in_memory_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_62e2b7ee3165656a8eb55fec054afcb6b8e75837d8e41ca8e4e449e96f102057_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1(memPtr) {\n\n        mstore(add(memPtr, 0), \"Invalid candidate\")\n\n    }\n\n    function abi_encode_t_stringliteral_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_5e08d3f48383789a6de57bd1ce2690d9c2e7e2730c9898292987cc6cddf215e1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"Already voted\")\n\n    }\n\n    function abi_encode_t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n        store_literal_in_memory_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Not an eligible voter\")\n\n    }\n\n    function abi_encode_t_stringliteral_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n        store_literal_in_memory_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7564755949e8fdb66470fa9c6bdd0573ab798beddac490939a7128bc8389a24b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779(memPtr) {\n\n        mstore(add(memPtr, 0), \"Election exists\")\n\n    }\n\n    function abi_encode_t_stringliteral_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 15)\n        store_literal_in_memory_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_850cad2f4d821d72fa6166d3eb05bd15054f06374454a424d68749b97d574779_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // string -> string\n    function abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_calldata_ptr_t_uint256_t_uint256__to_t_string_memory_ptr_t_uint256_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(value0, value1,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1(memPtr) {\n\n        mstore(add(memPtr, 0), \"Candidate exists\")\n\n    }\n\n    function abi_encode_t_stringliteral_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7c68d8c7ed74dffc1710ebe12ea485300f5c564f20db2552ee28328fd5a7d7c1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n    }\n\n}\n","id":8,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100ea5760003560e01c806375b238fc1161008c57806391d148541161006657806391d148541461025f578063a217fddf1461028f578063bd7cab9c146102ad578063d547741f146102dd576100ea565b806375b238fc14610209578063789175b214610227578063840e12f514610243576100ea565b8063248a9ca3116100c8578063248a9ca31461016d5780632f2ff15d1461019d57806336568abe146101b95780635e6fef01146101d5576100ea565b806301ffc9a7146100ef57806317386b871461011f5780631a0478d51461013b575b600080fd5b61010960048036038101906101049190610f98565b6102f9565b6040516101169190610fe0565b60405180910390f35b610139600480360381019061013491906110cc565b610373565b005b61015560048036038101906101509190611154565b610681565b6040516101649392919061119f565b60405180910390f35b61018760048036038101906101829190611154565b6106b8565b60405161019491906111d6565b60405180910390f35b6101b760048036038101906101b2919061124f565b6106d7565b005b6101d360048036038101906101ce919061124f565b6106f9565b005b6101ef60048036038101906101ea919061128f565b610774565b60405161020095949392919061134c565b60405180910390f35b61021161083f565b60405161021e91906111d6565b60405180910390f35b610241600480360381019061023c91906113fc565b610863565b005b61025d60048036038101906102589190611496565b610a10565b005b6102796004803603810190610274919061124f565b610b0b565b6040516102869190610fe0565b60405180910390f35b610297610b75565b6040516102a491906111d6565b60405180910390f35b6102c760048036038101906102c291906114d6565b610b7c565b6040516102d49190610fe0565b60405180910390f35b6102f760048036038101906102f2919061124f565b610bab565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061036c575061036b82610bcd565b5b9050919050565b8460006001600083815260200190815260200160002090508060040160009054906101000a900460ff166103dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d390611562565b60405180910390fd5b8060010154421015610423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041a906115ce565b60405180910390fd5b806002015442111561046a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104619061163a565b60405180910390fd5b60006001600089815260200190815260200160002090506002600087815260200190815260200160002060020160009054906101000a900460ff166104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db906116a6565b60405180910390fd5b60036000898152602001908152602001600020600088815260200190815260200160002060009054906101000a900460ff1615610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90611712565b60405180910390fd5b6105cc858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508260030154896040516020016105b19190611753565b60405160208183030381529060405280519060200120610c37565b61060b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610602906117ba565b60405180910390fd5b6001600360008a8152602001908152602001600020600089815260200190815260200160002060006101000a81548160ff0219169083151502179055508587897f2e82bdc8daf342458c2dc7bf51c3aefd294a3f9d8389e73e35937693b793882e60405160405180910390a45050505050505050565b60026020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16905083565b6000806000838152602001908152602001600020600101549050919050565b6106e0826106b8565b6106e981610c4e565b6106f38383610c62565b50505050565b610701610d53565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610765576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61076f8282610d5b565b505050565b600160205280600052604060002060009150905080600001805461079790611809565b80601f01602080910402602001604051908101604052809291908181526020018280546107c390611809565b80156108105780601f106107e557610100808354040283529160200191610810565b820191906000526020600020905b8154815290600101906020018083116107f357829003601f168201915b5050505050908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561088d81610c4e565b6001600088815260200190815260200160002060040160009054906101000a900460ff16156108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e890611886565b60405180910390fd5b6040518060a0016040528087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001858152602001848152602001838152602001600115158152506001600089815260200190815260200160002060008201518160000190816109879190611a81565b5060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050867fe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d9878787876040516109ff9493929190611b8f565b60405180910390a250505050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610a3a81610c4e565b6002600084815260200190815260200160002060020160009054906101000a900460ff1615610a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9590611c1b565b60405180910390fd5b60405180606001604052808481526020018381526020016001151581525060026000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b610bb4826106b8565b610bbd81610c4e565b610bc78383610d5b565b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600082610c448584610e4d565b1490509392505050565b610c5f81610c5a610d53565b610ea3565b50565b6000610c6e8383610b0b565b610d4857600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610ce5610d53565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050610d4d565b600090505b92915050565b600033905090565b6000610d678383610b0b565b15610e4257600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610ddf610d53565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050610e47565b600090505b92915050565b60008082905060005b8451811015610e9857610e8382868381518110610e7657610e75611c3b565b5b6020026020010151610ef4565b91508080610e9090611c99565b915050610e56565b508091505092915050565b610ead8282610b0b565b610ef05780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401610ee7929190611cf0565b60405180910390fd5b5050565b6000818310610f0c57610f078284610f1f565b610f17565b610f168383610f1f565b5b905092915050565b600082600052816020526040600020905092915050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610f7581610f40565b8114610f8057600080fd5b50565b600081359050610f9281610f6c565b92915050565b600060208284031215610fae57610fad610f36565b5b6000610fbc84828501610f83565b91505092915050565b60008115159050919050565b610fda81610fc5565b82525050565b6000602082019050610ff56000830184610fd1565b92915050565b6000819050919050565b61100e81610ffb565b811461101957600080fd5b50565b60008135905061102b81611005565b92915050565b6000819050919050565b61104481611031565b811461104f57600080fd5b50565b6000813590506110618161103b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261108c5761108b611067565b5b8235905067ffffffffffffffff8111156110a9576110a861106c565b5b6020830191508360208202830111156110c5576110c4611071565b5b9250929050565b6000806000806000608086880312156110e8576110e7610f36565b5b60006110f68882890161101c565b955050602061110788828901611052565b945050604061111888828901611052565b935050606086013567ffffffffffffffff81111561113957611138610f3b565b5b61114588828901611076565b92509250509295509295909350565b60006020828403121561116a57611169610f36565b5b600061117884828501611052565b91505092915050565b61118a81611031565b82525050565b61119981610ffb565b82525050565b60006060820190506111b46000830186611181565b6111c16020830185611190565b6111ce6040830184610fd1565b949350505050565b60006020820190506111eb6000830184611181565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061121c826111f1565b9050919050565b61122c81611211565b811461123757600080fd5b50565b60008135905061124981611223565b92915050565b6000806040838503121561126657611265610f36565b5b600061127485828601611052565b92505060206112858582860161123a565b9150509250929050565b6000602082840312156112a5576112a4610f36565b5b60006112b38482850161101c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112f65780820151818401526020810190506112db565b60008484015250505050565b6000601f19601f8301169050919050565b600061131e826112bc565b61132881856112c7565b93506113388185602086016112d8565b61134181611302565b840191505092915050565b600060a08201905081810360008301526113668188611313565b90506113756020830187611190565b6113826040830186611190565b61138f6060830185611181565b61139c6080830184610fd1565b9695505050505050565b60008083601f8401126113bc576113bb611067565b5b8235905067ffffffffffffffff8111156113d9576113d861106c565b5b6020830191508360018202830111156113f5576113f4611071565b5b9250929050565b60008060008060008060a0878903121561141957611418610f36565b5b600061142789828a0161101c565b965050602087013567ffffffffffffffff81111561144857611447610f3b565b5b61145489828a016113a6565b9550955050604061146789828a0161101c565b935050606061147889828a0161101c565b925050608061148989828a01611052565b9150509295509295509295565b600080604083850312156114ad576114ac610f36565b5b60006114bb85828601611052565b92505060206114cc8582860161101c565b9150509250929050565b600080604083850312156114ed576114ec610f36565b5b60006114fb8582860161101c565b925050602061150c85828601611052565b9150509250929050565b7f496e76616c696420656c656374696f6e00000000000000000000000000000000600082015250565b600061154c6010836112c7565b915061155782611516565b602082019050919050565b6000602082019050818103600083015261157b8161153f565b9050919050565b7f4e6f742073746172746564000000000000000000000000000000000000000000600082015250565b60006115b8600b836112c7565b91506115c382611582565b602082019050919050565b600060208201905081810360008301526115e7816115ab565b9050919050565b7f456e646564000000000000000000000000000000000000000000000000000000600082015250565b60006116246005836112c7565b915061162f826115ee565b602082019050919050565b6000602082019050818103600083015261165381611617565b9050919050565b7f496e76616c69642063616e646964617465000000000000000000000000000000600082015250565b60006116906011836112c7565b915061169b8261165a565b602082019050919050565b600060208201905081810360008301526116bf81611683565b9050919050565b7f416c726561647920766f74656400000000000000000000000000000000000000600082015250565b60006116fc600d836112c7565b9150611707826116c6565b602082019050919050565b6000602082019050818103600083015261172b816116ef565b9050919050565b6000819050919050565b61174d61174882611031565b611732565b82525050565b600061175f828461173c565b60208201915081905092915050565b7f4e6f7420616e20656c696769626c6520766f7465720000000000000000000000600082015250565b60006117a46015836112c7565b91506117af8261176e565b602082019050919050565b600060208201905081810360008301526117d381611797565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061182157607f821691505b602082108103611834576118336117da565b5b50919050565b7f456c656374696f6e206578697374730000000000000000000000000000000000600082015250565b6000611870600f836112c7565b915061187b8261183a565b602082019050919050565b6000602082019050818103600083015261189f81611863565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026119377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826118fa565b61194186836118fa565b95508019841693508086168417925050509392505050565b6000819050919050565b600061197e61197961197484610ffb565b611959565b610ffb565b9050919050565b6000819050919050565b61199883611963565b6119ac6119a482611985565b848454611907565b825550505050565b600090565b6119c16119b4565b6119cc81848461198f565b505050565b5b818110156119f0576119e56000826119b9565b6001810190506119d2565b5050565b601f821115611a3557611a06816118d5565b611a0f846118ea565b81016020851015611a1e578190505b611a32611a2a856118ea565b8301826119d1565b50505b505050565b600082821c905092915050565b6000611a5860001984600802611a3a565b1980831691505092915050565b6000611a718383611a47565b9150826002028217905092915050565b611a8a826112bc565b67ffffffffffffffff811115611aa357611aa26118a6565b5b611aad8254611809565b611ab88282856119f4565b600060209050601f831160018114611aeb5760008415611ad9578287015190505b611ae38582611a65565b865550611b4b565b601f198416611af9866118d5565b60005b82811015611b2157848901518255600182019150602085019450602081019050611afc565b86831015611b3e5784890151611b3a601f891682611a47565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b6000611b6e83856112c7565b9350611b7b838584611b53565b611b8483611302565b840190509392505050565b60006060820190508181036000830152611baa818688611b62565b9050611bb96020830185611190565b611bc66040830184611190565b95945050505050565b7f43616e6469646174652065786973747300000000000000000000000000000000600082015250565b6000611c056010836112c7565b9150611c1082611bcf565b602082019050919050565b60006020820190508181036000830152611c3481611bf8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ca482610ffb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611cd657611cd5611c6a565b5b600182019050919050565b611cea81611211565b82525050565b6000604082019050611d056000830185611ce1565b611d126020830184611181565b939250505056fea264697066735822122048bb1c48fd43ca8ad57e13e687e4ad242b8b3c42e126a579b9665cf6f7c7066964736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x91D14854 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0xBD7CAB9C EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2DD JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x75B238FC EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x789175B2 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x840E12F5 EQ PUSH2 0x243 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x248A9CA3 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x5E6FEF01 EQ PUSH2 0x1D5 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x17386B87 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x1A0478D5 EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x109 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x116 SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x155 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0x681 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x164 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x119F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x187 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x194 SWAP2 SWAP1 PUSH2 0x11D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B2 SWAP2 SWAP1 PUSH2 0x124F JUMP JUMPDEST PUSH2 0x6D7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CE SWAP2 SWAP1 PUSH2 0x124F JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EA SWAP2 SWAP1 PUSH2 0x128F JUMP JUMPDEST PUSH2 0x774 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x200 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x134C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x211 PUSH2 0x83F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x11D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x241 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23C SWAP2 SWAP1 PUSH2 0x13FC JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x258 SWAP2 SWAP1 PUSH2 0x1496 JUMP JUMPDEST PUSH2 0xA10 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x279 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x274 SWAP2 SWAP1 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xB0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x286 SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x297 PUSH2 0xB75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A4 SWAP2 SWAP1 PUSH2 0x11D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x14D6 JUMP JUMPDEST PUSH2 0xB7C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D4 SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F2 SWAP2 SWAP1 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xBAB JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x36C JUMPI POP PUSH2 0x36B DUP3 PUSH2 0xBCD JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP5 PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3D3 SWAP1 PUSH2 0x1562 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP1 PUSH2 0x15CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT ISZERO PUSH2 0x46A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x461 SWAP1 PUSH2 0x163A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x2 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DB SWAP1 PUSH2 0x16A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x556 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54D SWAP1 PUSH2 0x1712 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5CC DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP3 PUSH1 0x3 ADD SLOAD DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5B1 SWAP2 SWAP1 PUSH2 0x1753 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x60B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x602 SWAP1 PUSH2 0x17BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP6 DUP8 DUP10 PUSH32 0x2E82BDC8DAF342458C2DC7BF51C3AEFD294A3F9D8389E73E35937693B793882E PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6E0 DUP3 PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x6E9 DUP2 PUSH2 0xC4E JUMP JUMPDEST PUSH2 0x6F3 DUP4 DUP4 PUSH2 0xC62 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x701 PUSH2 0xD53 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x765 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6697B23200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x76F DUP3 DUP3 PUSH2 0xD5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x797 SWAP1 PUSH2 0x1809 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7C3 SWAP1 PUSH2 0x1809 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x810 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7E5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x810 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7F3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP6 JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH2 0x88D DUP2 PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8E8 SWAP1 PUSH2 0x1886 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x1 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SWAP1 DUP2 PUSH2 0x987 SWAP2 SWAP1 PUSH2 0x1A81 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP7 PUSH32 0xE7A0AAE5D733E07E246DEA86213A1AC1B0AA8554BDE889BB75C12752F44E53D9 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x9FF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH2 0xA3A DUP2 PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xA9E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA95 SWAP1 PUSH2 0x1C1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xBB4 DUP3 PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0xBBD DUP2 PUSH2 0xC4E JUMP JUMPDEST PUSH2 0xBC7 DUP4 DUP4 PUSH2 0xD5B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC44 DUP6 DUP5 PUSH2 0xE4D JUMP JUMPDEST EQ SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xC5F DUP2 PUSH2 0xC5A PUSH2 0xD53 JUMP JUMPDEST PUSH2 0xEA3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC6E DUP4 DUP4 PUSH2 0xB0B JUMP JUMPDEST PUSH2 0xD48 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xCE5 PUSH2 0xD53 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 POP PUSH2 0xD4D JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD67 DUP4 DUP4 PUSH2 0xB0B JUMP JUMPDEST ISZERO PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xDDF PUSH2 0xD53 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 POP PUSH2 0xE47 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE98 JUMPI PUSH2 0xE83 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE76 JUMPI PUSH2 0xE75 PUSH2 0x1C3B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xEF4 JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH2 0xE90 SWAP1 PUSH2 0x1C99 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE56 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xEAD DUP3 DUP3 PUSH2 0xB0B JUMP JUMPDEST PUSH2 0xEF0 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH32 0xE2517D3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEE7 SWAP3 SWAP2 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xF0C JUMPI PUSH2 0xF07 DUP3 DUP5 PUSH2 0xF1F JUMP JUMPDEST PUSH2 0xF17 JUMP JUMPDEST PUSH2 0xF16 DUP4 DUP4 PUSH2 0xF1F JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF75 DUP2 PUSH2 0xF40 JUMP JUMPDEST DUP2 EQ PUSH2 0xF80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF92 DUP2 PUSH2 0xF6C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFAE JUMPI PUSH2 0xFAD PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFBC DUP5 DUP3 DUP6 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFDA DUP2 PUSH2 0xFC5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFF5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xFD1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x100E DUP2 PUSH2 0xFFB JUMP JUMPDEST DUP2 EQ PUSH2 0x1019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x102B DUP2 PUSH2 0x1005 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1044 DUP2 PUSH2 0x1031 JUMP JUMPDEST DUP2 EQ PUSH2 0x104F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1061 DUP2 PUSH2 0x103B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x108C JUMPI PUSH2 0x108B PUSH2 0x1067 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A9 JUMPI PUSH2 0x10A8 PUSH2 0x106C JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x10C5 JUMPI PUSH2 0x10C4 PUSH2 0x1071 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x10E8 JUMPI PUSH2 0x10E7 PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10F6 DUP9 DUP3 DUP10 ADD PUSH2 0x101C JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x1107 DUP9 DUP3 DUP10 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x1118 DUP9 DUP3 DUP10 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1139 JUMPI PUSH2 0x1138 PUSH2 0xF3B JUMP JUMPDEST JUMPDEST PUSH2 0x1145 DUP9 DUP3 DUP10 ADD PUSH2 0x1076 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x116A JUMPI PUSH2 0x1169 PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1178 DUP5 DUP3 DUP6 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x118A DUP2 PUSH2 0x1031 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1199 DUP2 PUSH2 0xFFB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x11B4 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1181 JUMP JUMPDEST PUSH2 0x11C1 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1190 JUMP JUMPDEST PUSH2 0x11CE PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xFD1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11EB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1181 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x121C DUP3 PUSH2 0x11F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x122C DUP2 PUSH2 0x1211 JUMP JUMPDEST DUP2 EQ PUSH2 0x1237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1249 DUP2 PUSH2 0x1223 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1266 JUMPI PUSH2 0x1265 PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1274 DUP6 DUP3 DUP7 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1285 DUP6 DUP3 DUP7 ADD PUSH2 0x123A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12A5 JUMPI PUSH2 0x12A4 PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x12B3 DUP5 DUP3 DUP6 ADD PUSH2 0x101C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12F6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x12DB JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x131E DUP3 PUSH2 0x12BC JUMP JUMPDEST PUSH2 0x1328 DUP2 DUP6 PUSH2 0x12C7 JUMP JUMPDEST SWAP4 POP PUSH2 0x1338 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x12D8 JUMP JUMPDEST PUSH2 0x1341 DUP2 PUSH2 0x1302 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1366 DUP2 DUP9 PUSH2 0x1313 JUMP JUMPDEST SWAP1 POP PUSH2 0x1375 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1190 JUMP JUMPDEST PUSH2 0x1382 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x1190 JUMP JUMPDEST PUSH2 0x138F PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1181 JUMP JUMPDEST PUSH2 0x139C PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xFD1 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x13BC JUMPI PUSH2 0x13BB PUSH2 0x1067 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13D9 JUMPI PUSH2 0x13D8 PUSH2 0x106C JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x13F5 JUMPI PUSH2 0x13F4 PUSH2 0x1071 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1419 JUMPI PUSH2 0x1418 PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1427 DUP10 DUP3 DUP11 ADD PUSH2 0x101C JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1448 JUMPI PUSH2 0x1447 PUSH2 0xF3B JUMP JUMPDEST JUMPDEST PUSH2 0x1454 DUP10 DUP3 DUP11 ADD PUSH2 0x13A6 JUMP JUMPDEST SWAP6 POP SWAP6 POP POP PUSH1 0x40 PUSH2 0x1467 DUP10 DUP3 DUP11 ADD PUSH2 0x101C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x1478 DUP10 DUP3 DUP11 ADD PUSH2 0x101C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x1489 DUP10 DUP3 DUP11 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14AD JUMPI PUSH2 0x14AC PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14BB DUP6 DUP3 DUP7 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x14CC DUP6 DUP3 DUP7 ADD PUSH2 0x101C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14ED JUMPI PUSH2 0x14EC PUSH2 0xF36 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14FB DUP6 DUP3 DUP7 ADD PUSH2 0x101C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x150C DUP6 DUP3 DUP7 ADD PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C696420656C656374696F6E00000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x154C PUSH1 0x10 DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x1557 DUP3 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x157B DUP2 PUSH2 0x153F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E6F742073746172746564000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B8 PUSH1 0xB DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x15C3 DUP3 PUSH2 0x1582 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15E7 DUP2 PUSH2 0x15AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x456E646564000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1624 PUSH1 0x5 DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x162F DUP3 PUSH2 0x15EE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1653 DUP2 PUSH2 0x1617 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C69642063616E646964617465000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1690 PUSH1 0x11 DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x169B DUP3 PUSH2 0x165A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16BF DUP2 PUSH2 0x1683 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416C726561647920766F74656400000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16FC PUSH1 0xD DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x1707 DUP3 PUSH2 0x16C6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x172B DUP2 PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x174D PUSH2 0x1748 DUP3 PUSH2 0x1031 JUMP JUMPDEST PUSH2 0x1732 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x175F DUP3 DUP5 PUSH2 0x173C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E6F7420616E20656C696769626C6520766F7465720000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17A4 PUSH1 0x15 DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x17AF DUP3 PUSH2 0x176E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17D3 DUP2 PUSH2 0x1797 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1821 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1834 JUMPI PUSH2 0x1833 PUSH2 0x17DA JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x456C656374696F6E206578697374730000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1870 PUSH1 0xF DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x187B DUP3 PUSH2 0x183A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x189F DUP2 PUSH2 0x1863 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x1937 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x18FA JUMP JUMPDEST PUSH2 0x1941 DUP7 DUP4 PUSH2 0x18FA JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197E PUSH2 0x1979 PUSH2 0x1974 DUP5 PUSH2 0xFFB JUMP JUMPDEST PUSH2 0x1959 JUMP JUMPDEST PUSH2 0xFFB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1998 DUP4 PUSH2 0x1963 JUMP JUMPDEST PUSH2 0x19AC PUSH2 0x19A4 DUP3 PUSH2 0x1985 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x1907 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x19C1 PUSH2 0x19B4 JUMP JUMPDEST PUSH2 0x19CC DUP2 DUP5 DUP5 PUSH2 0x198F JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x19F0 JUMPI PUSH2 0x19E5 PUSH1 0x0 DUP3 PUSH2 0x19B9 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x19D2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1A35 JUMPI PUSH2 0x1A06 DUP2 PUSH2 0x18D5 JUMP JUMPDEST PUSH2 0x1A0F DUP5 PUSH2 0x18EA JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x1A1E JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x1A32 PUSH2 0x1A2A DUP6 PUSH2 0x18EA JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x19D1 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A58 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x1A3A JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A71 DUP4 DUP4 PUSH2 0x1A47 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1A8A DUP3 PUSH2 0x12BC JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AA3 JUMPI PUSH2 0x1AA2 PUSH2 0x18A6 JUMP JUMPDEST JUMPDEST PUSH2 0x1AAD DUP3 SLOAD PUSH2 0x1809 JUMP JUMPDEST PUSH2 0x1AB8 DUP3 DUP3 DUP6 PUSH2 0x19F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1AEB JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x1AD9 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x1AE3 DUP6 DUP3 PUSH2 0x1A65 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x1B4B JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x1AF9 DUP7 PUSH2 0x18D5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1B21 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1AFC JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x1B3E JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x1B3A PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x1A47 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B6E DUP4 DUP6 PUSH2 0x12C7 JUMP JUMPDEST SWAP4 POP PUSH2 0x1B7B DUP4 DUP6 DUP5 PUSH2 0x1B53 JUMP JUMPDEST PUSH2 0x1B84 DUP4 PUSH2 0x1302 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BAA DUP2 DUP7 DUP9 PUSH2 0x1B62 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BB9 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1190 JUMP JUMPDEST PUSH2 0x1BC6 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1190 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x43616E6469646174652065786973747300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C05 PUSH1 0x10 DUP4 PUSH2 0x12C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C10 DUP3 PUSH2 0x1BCF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C34 DUP2 PUSH2 0x1BF8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1CA4 DUP3 PUSH2 0xFFB JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1CD6 JUMPI PUSH2 0x1CD5 PUSH2 0x1C6A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CEA DUP2 PUSH2 0x1211 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1D05 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1CE1 JUMP JUMPDEST PUSH2 0x1D12 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1181 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE 0xBB SHR BASEFEE REVERT NUMBER 0xCA DUP11 0xD5 PUSH31 0x13E687E4AD242B8B3C42E126A579B9665CF6F7C7066964736F6C6343000814 STOP CALLER ","sourceMap":"187:3066:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2565:202:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2337:914:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;987:47;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;3810:120:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4226:136;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5328:245;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;936:45:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;234:60;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1552:525;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2083:248;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2854:136:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2187:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1040:68:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4642:138:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2565:202;2650:4;2688:32;2673:47;;;:11;:47;;;;:87;;;;2724:36;2748:11;2724:23;:36::i;:::-;2673:87;2666:94;;2565:202;;;:::o;2337:914:7:-;2581:10;1291:25;1319:9;:21;1329:10;1319:21;;;;;;;;;;;1291:49;;1358:8;:15;;;;;;;;;;;;1350:44;;;;;;;;;;;;:::i;:::-;;;;;;;;;1431:8;:18;;;1412:15;:37;;1404:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;1502:8;:16;;;1483:15;:35;;1475:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;2603:25:::1;2631:9;:21;2641:10;2631:21;;;;;;;;;;;2603:49;;2670:10;:25;2681:13;2670:25;;;;;;;;;;;:32;;;;;;;;;;;;2662:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;2756:16;:28;2773:10;2756:28;;;;;;;;;;;:45;2785:15;2756:45;;;;;;;;;;;;;;;;;;;;;2755:46;2734:106;;;;;;;;;;;;:::i;:::-;;;;;;;;;2907:160;2943:11;;2907:160;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2972:8;:19;;;3036:15;3019:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;3009:44;;;;;;2907:18;:160::i;:::-;2886:228;;;;;;;;;;;;:::i;:::-;;;;;;;;;3173:4;3125:16;:28;3142:10;3125:28;;;;;;;;;;;:45;3154:15;3125:45;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;3230:13;3213:15;3201:10;3192:52;;;;;;;;;;2593:658;1281:265:::0;2337:914;;;;;;:::o;987:47::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3810:120:0:-;3875:7;3901:6;:12;3908:4;3901:12;;;;;;;;;;;:22;;;3894:29;;3810:120;;;:::o;4226:136::-;4300:18;4313:4;4300:12;:18::i;:::-;2464:16;2475:4;2464:10;:16::i;:::-;4330:25:::1;4341:4;4347:7;4330:10;:25::i;:::-;;4226:136:::0;;;:::o;5328:245::-;5443:12;:10;:12::i;:::-;5421:34;;:18;:34;;;5417:102;;5478:30;;;;;;;;;;;;;;5417:102;5529:37;5541:4;5547:18;5529:11;:37::i;:::-;;5328:245;;:::o;936:45:7:-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;234:60::-;271:23;234:60;:::o;1552:525::-;271:23;2464:16:0;2475:4;2464:10;:16::i;:::-;1798:9:7::1;:21;1808:10;1798:21;;;;;;;;;;;:28;;;;;;;;;;;;1797:29;1789:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;1880:122;;;;;;;;1902:4;;1880:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1920:9;1880:122;;;;1943:7;1880:122;;;;1964:10;1880:122;;;;1988:4;1880:122;;;;::::0;1856:9:::1;:21;1866:10;1856:21;;;;;;;;;;;:146;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2033:10;2017:53;2045:4;;2051:9;2062:7;2017:53;;;;;;;;;:::i;:::-;;;;;;;;1552:525:::0;;;;;;;:::o;2083:248::-;271:23;2464:16:0;2475:4;2464:10;:16::i;:::-;2212:10:7::1;:18;2223:6;2212:18;;;;;;;;;;;:25;;;;;;;;;;;;2211:26;2203:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;2289:35;;;;;;;;2299:6;2289:35;;;;2307:10;2289:35;;;;2319:4;2289:35;;;;::::0;2268:10:::1;:18;2279:6;2268:18;;;;;;;;;;;:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2083:248:::0;;;:::o;2854:136:0:-;2931:4;2954:6;:12;2961:4;2954:12;;;;;;;;;;;:20;;:29;2975:7;2954:29;;;;;;;;;;;;;;;;;;;;;;;;;2947:36;;2854:136;;;;:::o;2187:49::-;2232:4;2187:49;;;:::o;1040:68:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4642:138:0:-;4717:18;4730:4;4717:12;:18::i;:::-;2464:16;2475:4;2464:10;:16::i;:::-;4747:26:::1;4759:4;4765:7;4747:11;:26::i;:::-;;4642:138:::0;;;:::o;763:146:5:-;839:4;877:25;862:40;;;:11;:40;;;;855:47;;763:146;;;:::o;1902:154:4:-;1993:4;2045;2016:25;2029:5;2036:4;2016:12;:25::i;:::-;:33;2009:40;;1902:154;;;;;:::o;3199:103:0:-;3265:30;3276:4;3282:12;:10;:12::i;:::-;3265:10;:30::i;:::-;3199:103;:::o;6179:316::-;6256:4;6277:22;6285:4;6291:7;6277;:22::i;:::-;6272:217;;6347:4;6315:6;:12;6322:4;6315:12;;;;;;;;;;;:20;;:29;6336:7;6315:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;6397:12;:10;:12::i;:::-;6370:40;;6388:7;6370:40;;6382:4;6370:40;;;;;;;;;;6431:4;6424:11;;;;6272:217;6473:5;6466:12;;6179:316;;;;;:::o;656:96:2:-;709:7;735:10;728:17;;656:96;:::o;6732:317:0:-;6810:4;6830:22;6838:4;6844:7;6830;:22::i;:::-;6826:217;;;6900:5;6868:6;:12;6875:4;6868:12;;;;;;;;;;;:20;;:29;6889:7;6868:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;6951:12;:10;:12::i;:::-;6924:40;;6942:7;6924:40;;6936:4;6924:40;;;;;;;;;;6985:4;6978:11;;;;6826:217;7027:5;7020:12;;6732:317;;;;;:::o;2457:308:4:-;2540:7;2559:20;2582:4;2559:27;;2601:9;2596:134;2620:5;:12;2616:1;:16;2596:134;;;2668:51;2696:12;2710:5;2716:1;2710:8;;;;;;;;:::i;:::-;;;;;;;;2668:27;:51::i;:::-;2653:66;;2634:3;;;;;:::i;:::-;;;;2596:134;;;;2746:12;2739:19;;;2457:308;;;;:::o;3432:197:0:-;3520:22;3528:4;3534:7;3520;:22::i;:::-;3515:108;;3598:7;3607:4;3565:47;;;;;;;;;;;;:::i;:::-;;;;;;;;3515:108;3432:197;;:::o;504:167:3:-;579:7;609:1;605;:5;:59;;640:24;659:1;662;640:18;:24::i;:::-;605:59;;;613:24;632:1;635;613:18;:24::i;:::-;605:59;598:66;;504:167;;;;:::o;791:239::-;864:13;941:1;935:4;928:15;969:1;963:4;956:15;1009:4;1003;993:21;984:30;;791:239;;;;:::o;88:117:8:-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:77::-;1911:7;1940:5;1929:16;;1874:77;;;:::o;1957:122::-;2030:24;2048:5;2030:24;:::i;:::-;2023:5;2020:35;2010:63;;2069:1;2066;2059:12;2010:63;1957:122;:::o;2085:139::-;2131:5;2169:6;2156:20;2147:29;;2185:33;2212:5;2185:33;:::i;:::-;2085:139;;;;:::o;2230:117::-;2339:1;2336;2329:12;2353:117;2462:1;2459;2452:12;2476:117;2585:1;2582;2575:12;2616:568;2689:8;2699:6;2749:3;2742:4;2734:6;2730:17;2726:27;2716:122;;2757:79;;:::i;:::-;2716:122;2870:6;2857:20;2847:30;;2900:18;2892:6;2889:30;2886:117;;;2922:79;;:::i;:::-;2886:117;3036:4;3028:6;3024:17;3012:29;;3090:3;3082:4;3074:6;3070:17;3060:8;3056:32;3053:41;3050:128;;;3097:79;;:::i;:::-;3050:128;2616:568;;;;;:::o;3190:995::-;3303:6;3311;3319;3327;3335;3384:3;3372:9;3363:7;3359:23;3355:33;3352:120;;;3391:79;;:::i;:::-;3352:120;3511:1;3536:53;3581:7;3572:6;3561:9;3557:22;3536:53;:::i;:::-;3526:63;;3482:117;3638:2;3664:53;3709:7;3700:6;3689:9;3685:22;3664:53;:::i;:::-;3654:63;;3609:118;3766:2;3792:53;3837:7;3828:6;3817:9;3813:22;3792:53;:::i;:::-;3782:63;;3737:118;3922:2;3911:9;3907:18;3894:32;3953:18;3945:6;3942:30;3939:117;;;3975:79;;:::i;:::-;3939:117;4088:80;4160:7;4151:6;4140:9;4136:22;4088:80;:::i;:::-;4070:98;;;;3865:313;3190:995;;;;;;;;:::o;4191:329::-;4250:6;4299:2;4287:9;4278:7;4274:23;4270:32;4267:119;;;4305:79;;:::i;:::-;4267:119;4425:1;4450:53;4495:7;4486:6;4475:9;4471:22;4450:53;:::i;:::-;4440:63;;4396:117;4191:329;;;;:::o;4526:118::-;4613:24;4631:5;4613:24;:::i;:::-;4608:3;4601:37;4526:118;;:::o;4650:::-;4737:24;4755:5;4737:24;:::i;:::-;4732:3;4725:37;4650:118;;:::o;4774:430::-;4917:4;4955:2;4944:9;4940:18;4932:26;;4968:71;5036:1;5025:9;5021:17;5012:6;4968:71;:::i;:::-;5049:72;5117:2;5106:9;5102:18;5093:6;5049:72;:::i;:::-;5131:66;5193:2;5182:9;5178:18;5169:6;5131:66;:::i;:::-;4774:430;;;;;;:::o;5210:222::-;5303:4;5341:2;5330:9;5326:18;5318:26;;5354:71;5422:1;5411:9;5407:17;5398:6;5354:71;:::i;:::-;5210:222;;;;:::o;5438:126::-;5475:7;5515:42;5508:5;5504:54;5493:65;;5438:126;;;:::o;5570:96::-;5607:7;5636:24;5654:5;5636:24;:::i;:::-;5625:35;;5570:96;;;:::o;5672:122::-;5745:24;5763:5;5745:24;:::i;:::-;5738:5;5735:35;5725:63;;5784:1;5781;5774:12;5725:63;5672:122;:::o;5800:139::-;5846:5;5884:6;5871:20;5862:29;;5900:33;5927:5;5900:33;:::i;:::-;5800:139;;;;:::o;5945:474::-;6013:6;6021;6070:2;6058:9;6049:7;6045:23;6041:32;6038:119;;;6076:79;;:::i;:::-;6038:119;6196:1;6221:53;6266:7;6257:6;6246:9;6242:22;6221:53;:::i;:::-;6211:63;;6167:117;6323:2;6349:53;6394:7;6385:6;6374:9;6370:22;6349:53;:::i;:::-;6339:63;;6294:118;5945:474;;;;;:::o;6425:329::-;6484:6;6533:2;6521:9;6512:7;6508:23;6504:32;6501:119;;;6539:79;;:::i;:::-;6501:119;6659:1;6684:53;6729:7;6720:6;6709:9;6705:22;6684:53;:::i;:::-;6674:63;;6630:117;6425:329;;;;:::o;6760:99::-;6812:6;6846:5;6840:12;6830:22;;6760:99;;;:::o;6865:169::-;6949:11;6983:6;6978:3;6971:19;7023:4;7018:3;7014:14;6999:29;;6865:169;;;;:::o;7040:246::-;7121:1;7131:113;7145:6;7142:1;7139:13;7131:113;;;7230:1;7225:3;7221:11;7215:18;7211:1;7206:3;7202:11;7195:39;7167:2;7164:1;7160:10;7155:15;;7131:113;;;7278:1;7269:6;7264:3;7260:16;7253:27;7102:184;7040:246;;;:::o;7292:102::-;7333:6;7384:2;7380:7;7375:2;7368:5;7364:14;7360:28;7350:38;;7292:102;;;:::o;7400:377::-;7488:3;7516:39;7549:5;7516:39;:::i;:::-;7571:71;7635:6;7630:3;7571:71;:::i;:::-;7564:78;;7651:65;7709:6;7704:3;7697:4;7690:5;7686:16;7651:65;:::i;:::-;7741:29;7763:6;7741:29;:::i;:::-;7736:3;7732:39;7725:46;;7492:285;7400:377;;;;:::o;7783:743::-;8002:4;8040:3;8029:9;8025:19;8017:27;;8090:9;8084:4;8080:20;8076:1;8065:9;8061:17;8054:47;8118:78;8191:4;8182:6;8118:78;:::i;:::-;8110:86;;8206:72;8274:2;8263:9;8259:18;8250:6;8206:72;:::i;:::-;8288;8356:2;8345:9;8341:18;8332:6;8288:72;:::i;:::-;8370;8438:2;8427:9;8423:18;8414:6;8370:72;:::i;:::-;8452:67;8514:3;8503:9;8499:19;8490:6;8452:67;:::i;:::-;7783:743;;;;;;;;:::o;8546:553::-;8604:8;8614:6;8664:3;8657:4;8649:6;8645:17;8641:27;8631:122;;8672:79;;:::i;:::-;8631:122;8785:6;8772:20;8762:30;;8815:18;8807:6;8804:30;8801:117;;;8837:79;;:::i;:::-;8801:117;8951:4;8943:6;8939:17;8927:29;;9005:3;8997:4;8989:6;8985:17;8975:8;8971:32;8968:41;8965:128;;;9012:79;;:::i;:::-;8965:128;8546:553;;;;;:::o;9105:1111::-;9212:6;9220;9228;9236;9244;9252;9301:3;9289:9;9280:7;9276:23;9272:33;9269:120;;;9308:79;;:::i;:::-;9269:120;9428:1;9453:53;9498:7;9489:6;9478:9;9474:22;9453:53;:::i;:::-;9443:63;;9399:117;9583:2;9572:9;9568:18;9555:32;9614:18;9606:6;9603:30;9600:117;;;9636:79;;:::i;:::-;9600:117;9749:65;9806:7;9797:6;9786:9;9782:22;9749:65;:::i;:::-;9731:83;;;;9526:298;9863:2;9889:53;9934:7;9925:6;9914:9;9910:22;9889:53;:::i;:::-;9879:63;;9834:118;9991:2;10017:53;10062:7;10053:6;10042:9;10038:22;10017:53;:::i;:::-;10007:63;;9962:118;10119:3;10146:53;10191:7;10182:6;10171:9;10167:22;10146:53;:::i;:::-;10136:63;;10090:119;9105:1111;;;;;;;;:::o;10222:474::-;10290:6;10298;10347:2;10335:9;10326:7;10322:23;10318:32;10315:119;;;10353:79;;:::i;:::-;10315:119;10473:1;10498:53;10543:7;10534:6;10523:9;10519:22;10498:53;:::i;:::-;10488:63;;10444:117;10600:2;10626:53;10671:7;10662:6;10651:9;10647:22;10626:53;:::i;:::-;10616:63;;10571:118;10222:474;;;;;:::o;10702:::-;10770:6;10778;10827:2;10815:9;10806:7;10802:23;10798:32;10795:119;;;10833:79;;:::i;:::-;10795:119;10953:1;10978:53;11023:7;11014:6;11003:9;10999:22;10978:53;:::i;:::-;10968:63;;10924:117;11080:2;11106:53;11151:7;11142:6;11131:9;11127:22;11106:53;:::i;:::-;11096:63;;11051:118;10702:474;;;;;:::o;11182:166::-;11322:18;11318:1;11310:6;11306:14;11299:42;11182:166;:::o;11354:366::-;11496:3;11517:67;11581:2;11576:3;11517:67;:::i;:::-;11510:74;;11593:93;11682:3;11593:93;:::i;:::-;11711:2;11706:3;11702:12;11695:19;;11354:366;;;:::o;11726:419::-;11892:4;11930:2;11919:9;11915:18;11907:26;;11979:9;11973:4;11969:20;11965:1;11954:9;11950:17;11943:47;12007:131;12133:4;12007:131;:::i;:::-;11999:139;;11726:419;;;:::o;12151:161::-;12291:13;12287:1;12279:6;12275:14;12268:37;12151:161;:::o;12318:366::-;12460:3;12481:67;12545:2;12540:3;12481:67;:::i;:::-;12474:74;;12557:93;12646:3;12557:93;:::i;:::-;12675:2;12670:3;12666:12;12659:19;;12318:366;;;:::o;12690:419::-;12856:4;12894:2;12883:9;12879:18;12871:26;;12943:9;12937:4;12933:20;12929:1;12918:9;12914:17;12907:47;12971:131;13097:4;12971:131;:::i;:::-;12963:139;;12690:419;;;:::o;13115:155::-;13255:7;13251:1;13243:6;13239:14;13232:31;13115:155;:::o;13276:365::-;13418:3;13439:66;13503:1;13498:3;13439:66;:::i;:::-;13432:73;;13514:93;13603:3;13514:93;:::i;:::-;13632:2;13627:3;13623:12;13616:19;;13276:365;;;:::o;13647:419::-;13813:4;13851:2;13840:9;13836:18;13828:26;;13900:9;13894:4;13890:20;13886:1;13875:9;13871:17;13864:47;13928:131;14054:4;13928:131;:::i;:::-;13920:139;;13647:419;;;:::o;14072:167::-;14212:19;14208:1;14200:6;14196:14;14189:43;14072:167;:::o;14245:366::-;14387:3;14408:67;14472:2;14467:3;14408:67;:::i;:::-;14401:74;;14484:93;14573:3;14484:93;:::i;:::-;14602:2;14597:3;14593:12;14586:19;;14245:366;;;:::o;14617:419::-;14783:4;14821:2;14810:9;14806:18;14798:26;;14870:9;14864:4;14860:20;14856:1;14845:9;14841:17;14834:47;14898:131;15024:4;14898:131;:::i;:::-;14890:139;;14617:419;;;:::o;15042:163::-;15182:15;15178:1;15170:6;15166:14;15159:39;15042:163;:::o;15211:366::-;15353:3;15374:67;15438:2;15433:3;15374:67;:::i;:::-;15367:74;;15450:93;15539:3;15450:93;:::i;:::-;15568:2;15563:3;15559:12;15552:19;;15211:366;;;:::o;15583:419::-;15749:4;15787:2;15776:9;15772:18;15764:26;;15836:9;15830:4;15826:20;15822:1;15811:9;15807:17;15800:47;15864:131;15990:4;15864:131;:::i;:::-;15856:139;;15583:419;;;:::o;16008:79::-;16047:7;16076:5;16065:16;;16008:79;;;:::o;16093:157::-;16198:45;16218:24;16236:5;16218:24;:::i;:::-;16198:45;:::i;:::-;16193:3;16186:58;16093:157;;:::o;16256:256::-;16368:3;16383:75;16454:3;16445:6;16383:75;:::i;:::-;16483:2;16478:3;16474:12;16467:19;;16503:3;16496:10;;16256:256;;;;:::o;16518:171::-;16658:23;16654:1;16646:6;16642:14;16635:47;16518:171;:::o;16695:366::-;16837:3;16858:67;16922:2;16917:3;16858:67;:::i;:::-;16851:74;;16934:93;17023:3;16934:93;:::i;:::-;17052:2;17047:3;17043:12;17036:19;;16695:366;;;:::o;17067:419::-;17233:4;17271:2;17260:9;17256:18;17248:26;;17320:9;17314:4;17310:20;17306:1;17295:9;17291:17;17284:47;17348:131;17474:4;17348:131;:::i;:::-;17340:139;;17067:419;;;:::o;17492:180::-;17540:77;17537:1;17530:88;17637:4;17634:1;17627:15;17661:4;17658:1;17651:15;17678:320;17722:6;17759:1;17753:4;17749:12;17739:22;;17806:1;17800:4;17796:12;17827:18;17817:81;;17883:4;17875:6;17871:17;17861:27;;17817:81;17945:2;17937:6;17934:14;17914:18;17911:38;17908:84;;17964:18;;:::i;:::-;17908:84;17729:269;17678:320;;;:::o;18004:165::-;18144:17;18140:1;18132:6;18128:14;18121:41;18004:165;:::o;18175:366::-;18317:3;18338:67;18402:2;18397:3;18338:67;:::i;:::-;18331:74;;18414:93;18503:3;18414:93;:::i;:::-;18532:2;18527:3;18523:12;18516:19;;18175:366;;;:::o;18547:419::-;18713:4;18751:2;18740:9;18736:18;18728:26;;18800:9;18794:4;18790:20;18786:1;18775:9;18771:17;18764:47;18828:131;18954:4;18828:131;:::i;:::-;18820:139;;18547:419;;;:::o;18972:180::-;19020:77;19017:1;19010:88;19117:4;19114:1;19107:15;19141:4;19138:1;19131:15;19158:141;19207:4;19230:3;19222:11;;19253:3;19250:1;19243:14;19287:4;19284:1;19274:18;19266:26;;19158:141;;;:::o;19305:93::-;19342:6;19389:2;19384;19377:5;19373:14;19369:23;19359:33;;19305:93;;;:::o;19404:107::-;19448:8;19498:5;19492:4;19488:16;19467:37;;19404:107;;;;:::o;19517:393::-;19586:6;19636:1;19624:10;19620:18;19659:97;19689:66;19678:9;19659:97;:::i;:::-;19777:39;19807:8;19796:9;19777:39;:::i;:::-;19765:51;;19849:4;19845:9;19838:5;19834:21;19825:30;;19898:4;19888:8;19884:19;19877:5;19874:30;19864:40;;19593:317;;19517:393;;;;;:::o;19916:60::-;19944:3;19965:5;19958:12;;19916:60;;;:::o;19982:142::-;20032:9;20065:53;20083:34;20092:24;20110:5;20092:24;:::i;:::-;20083:34;:::i;:::-;20065:53;:::i;:::-;20052:66;;19982:142;;;:::o;20130:75::-;20173:3;20194:5;20187:12;;20130:75;;;:::o;20211:269::-;20321:39;20352:7;20321:39;:::i;:::-;20382:91;20431:41;20455:16;20431:41;:::i;:::-;20423:6;20416:4;20410:11;20382:91;:::i;:::-;20376:4;20369:105;20287:193;20211:269;;;:::o;20486:73::-;20531:3;20486:73;:::o;20565:189::-;20642:32;;:::i;:::-;20683:65;20741:6;20733;20727:4;20683:65;:::i;:::-;20618:136;20565:189;;:::o;20760:186::-;20820:120;20837:3;20830:5;20827:14;20820:120;;;20891:39;20928:1;20921:5;20891:39;:::i;:::-;20864:1;20857:5;20853:13;20844:22;;20820:120;;;20760:186;;:::o;20952:543::-;21053:2;21048:3;21045:11;21042:446;;;21087:38;21119:5;21087:38;:::i;:::-;21171:29;21189:10;21171:29;:::i;:::-;21161:8;21157:44;21354:2;21342:10;21339:18;21336:49;;;21375:8;21360:23;;21336:49;21398:80;21454:22;21472:3;21454:22;:::i;:::-;21444:8;21440:37;21427:11;21398:80;:::i;:::-;21057:431;;21042:446;20952:543;;;:::o;21501:117::-;21555:8;21605:5;21599:4;21595:16;21574:37;;21501:117;;;;:::o;21624:169::-;21668:6;21701:51;21749:1;21745:6;21737:5;21734:1;21730:13;21701:51;:::i;:::-;21697:56;21782:4;21776;21772:15;21762:25;;21675:118;21624:169;;;;:::o;21798:295::-;21874:4;22020:29;22045:3;22039:4;22020:29;:::i;:::-;22012:37;;22082:3;22079:1;22075:11;22069:4;22066:21;22058:29;;21798:295;;;;:::o;22098:1395::-;22215:37;22248:3;22215:37;:::i;:::-;22317:18;22309:6;22306:30;22303:56;;;22339:18;;:::i;:::-;22303:56;22383:38;22415:4;22409:11;22383:38;:::i;:::-;22468:67;22528:6;22520;22514:4;22468:67;:::i;:::-;22562:1;22586:4;22573:17;;22618:2;22610:6;22607:14;22635:1;22630:618;;;;23292:1;23309:6;23306:77;;;23358:9;23353:3;23349:19;23343:26;23334:35;;23306:77;23409:67;23469:6;23462:5;23409:67;:::i;:::-;23403:4;23396:81;23265:222;22600:887;;22630:618;22682:4;22678:9;22670:6;22666:22;22716:37;22748:4;22716:37;:::i;:::-;22775:1;22789:208;22803:7;22800:1;22797:14;22789:208;;;22882:9;22877:3;22873:19;22867:26;22859:6;22852:42;22933:1;22925:6;22921:14;22911:24;;22980:2;22969:9;22965:18;22952:31;;22826:4;22823:1;22819:12;22814:17;;22789:208;;;23025:6;23016:7;23013:19;23010:179;;;23083:9;23078:3;23074:19;23068:26;23126:48;23168:4;23160:6;23156:17;23145:9;23126:48;:::i;:::-;23118:6;23111:64;23033:156;23010:179;23235:1;23231;23223:6;23219:14;23215:22;23209:4;23202:36;22637:611;;;22600:887;;22190:1303;;;22098:1395;;:::o;23499:146::-;23596:6;23591:3;23586;23573:30;23637:1;23628:6;23623:3;23619:16;23612:27;23499:146;;;:::o;23675:317::-;23773:3;23794:71;23858:6;23853:3;23794:71;:::i;:::-;23787:78;;23875:56;23924:6;23919:3;23912:5;23875:56;:::i;:::-;23956:29;23978:6;23956:29;:::i;:::-;23951:3;23947:39;23940:46;;23675:317;;;;;:::o;23998:553::-;24177:4;24215:2;24204:9;24200:18;24192:26;;24264:9;24258:4;24254:20;24250:1;24239:9;24235:17;24228:47;24292:88;24375:4;24366:6;24358;24292:88;:::i;:::-;24284:96;;24390:72;24458:2;24447:9;24443:18;24434:6;24390:72;:::i;:::-;24472;24540:2;24529:9;24525:18;24516:6;24472:72;:::i;:::-;23998:553;;;;;;;:::o;24557:166::-;24697:18;24693:1;24685:6;24681:14;24674:42;24557:166;:::o;24729:366::-;24871:3;24892:67;24956:2;24951:3;24892:67;:::i;:::-;24885:74;;24968:93;25057:3;24968:93;:::i;:::-;25086:2;25081:3;25077:12;25070:19;;24729:366;;;:::o;25101:419::-;25267:4;25305:2;25294:9;25290:18;25282:26;;25354:9;25348:4;25344:20;25340:1;25329:9;25325:17;25318:47;25382:131;25508:4;25382:131;:::i;:::-;25374:139;;25101:419;;;:::o;25526:180::-;25574:77;25571:1;25564:88;25671:4;25668:1;25661:15;25695:4;25692:1;25685:15;25712:180;25760:77;25757:1;25750:88;25857:4;25854:1;25847:15;25881:4;25878:1;25871:15;25898:233;25937:3;25960:24;25978:5;25960:24;:::i;:::-;25951:33;;26006:66;25999:5;25996:77;25993:103;;26076:18;;:::i;:::-;25993:103;26123:1;26116:5;26112:13;26105:20;;25898:233;;;:::o;26137:118::-;26224:24;26242:5;26224:24;:::i;:::-;26219:3;26212:37;26137:118;;:::o;26261:332::-;26382:4;26420:2;26409:9;26405:18;26397:26;;26433:71;26501:1;26490:9;26486:17;26477:6;26433:71;:::i;:::-;26514:72;26582:2;26571:9;26567:18;26558:6;26514:72;:::i;:::-;26261:332;;;;;:::o"},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","DEFAULT_ADMIN_ROLE()":"a217fddf","addCandidate(bytes32,uint256)":"840e12f5","candidates(bytes32)":"1a0478d5","castVote(uint256,bytes32,bytes32,bytes32[])":"17386b87","createElection(uint256,string,uint256,uint256,bytes32)":"789175b2","elections(uint256)":"5e6fef01","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","spentCommitments(uint256,bytes32)":"bd7cab9c","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ElectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"voterCommitment\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"candidateHash\",\"type\":\"bytes32\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"addCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"voterCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"candidateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"createElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elections\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"spentCommitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"VotingGuardian\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://928cf2f0042c606f3dcb21bd8a272573f462a215cd65285d2d6b407f31e9bd67\",\"dweb:/ipfs/QmWGxjckno6sfjHPX5naPnsfsyisgy4PJDf46eLw9umfpx\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"contracts/Voting.sol\":{\"keccak256\":\"0xb671e7ca5159b82358ccf81d95cd4af8c546d1962023876d02910816afff45bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f8342e60b447194957da8f14b2a12f57bdd9877a8c0ba7aada77bd2510294d3\",\"dweb:/ipfs/QmTMWEcjMMEUHY8pUUcBLNVwcjuzvX15h5fL1yudTRR1NV\"]}},\"version\":1}"}}}}}