# General Code Style & Formatting

- Use pnpm for package management
- Use TypeScript
- Use Prettier for code formatting
- Use ESLint for code linting
- Use PascalCase for React component file names (e.g., UserCard.tsx, not user-card.tsx).
- Prefer named exports for components.
- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
- Avoid using any.
- Create necessary types.
- Use JSDoc to document public classes and methods.
- Don't leave blank lines within a function.
- One export per file.
- Use context7 for documentation reference for next.js, nest.js, clerk, prisma, redis, ethers.js, wagmi, tailwindcss, etc.

# Naming Conventions

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods (e.g., userName, not user-name).
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.

# Project Structure & Architecture

- Follow Next.js patterns and use the App Router.
- Correctly determine when to use server vs. client components in Next.js.

# Styling & UI

- Use Tailwind CSS for styling.
- Use Shadcn UI for components.

# Data Fetching & Forms

- Use TanStack Query (react-query) for frontend data fetching.
- Use React Hook Form for form handling.
- Use Zod for validation.

# State Management & Logic

- Use React Context for state management.

# Backend & Database

- Use Prisma for database access.
- Use NestJS for backend development.
- Use Clerk for authentication.
- Use ethers.js for Ethereum interactions.
- Use wagmi for wallet interactions.
- Use Redis for caching.
- Use MerkleTree for Merkle root generation.
